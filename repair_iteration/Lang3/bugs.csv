bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] dec = str.substring(decPos + 1); [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { [BUGGY] dec = str.substring(decPos + 1); [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { [BUGGY] [BUGGY] dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	494	494	1	add	
3	[BUG] [BUGGY] exp = null; [FE] AssertionError [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { [BUGGY] exp = null; [BUGGY] } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	573	573	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { [BUGGY] [BUGGY] exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	573	573	1	add	
5	[BUG] [BUGGY] if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { [FE] AssertionError [CONTEXT] } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); [BUGGY] if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { [BUGGY] return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	594	594	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); [BUGGY] [BUGGY] if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	594	594	1	add	
7	[BUG] [BUGGY] return f; [FE] AssertionError [CONTEXT]  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { [BUGGY] return f; [BUGGY] } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (final NumberFormatException nfe) { // NOPMD [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	595	595	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { [BUGGY] [BUGGY] return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (final NumberFormatException nfe) { // NOPMD [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5	595	595	1	add	
9	[BUG] [BUGGY] dec = str.substring(decPos + 1, expPos); [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } [BUGGY] dec = str.substring(decPos + 1, expPos); [BUGGY] } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	492	492	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } [BUGGY] [BUGGY] dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	492	492	1	add	
11	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	496	496	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	496	496	1	add	
13	[BUG] [BUGGY] numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [BUGGY] numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.  } else { [BUGGY] } else { if (expPos > -1) { if (expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [BUGGY] [BUGGY] numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.  } else { } else { if (expPos > -1) { if (expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	497	498	1	add	
15	[BUG] [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { [FE] AssertionError [CONTEXT]  }  default : throw new NumberFormatException(str + " is not a valid number."); } }   [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { [BUGGY] exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { // no decimal point and no exponent  try { return createInteger(str); } catch (final NumberFormatException nfe) { // NOPMD  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	570	570	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  }  default : throw new NumberFormatException(str + " is not a valid number."); } }   [BUGGY] [BUGGY] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { // no decimal point and no exponent  try { return createInteger(str); } catch (final NumberFormatException nfe) { // NOPMD  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	570	570	1	add	
17	[BUG] [BUGGY] exp = str.substring(expPos + 1, str.length()); [FE] AssertionError [CONTEXT] }  default : throw new NumberFormatException(str + " is not a valid number."); } }   if (expPos > -1 && expPos < str.length() - 1) { [BUGGY] exp = str.substring(expPos + 1, str.length()); [BUGGY] } else { exp = null; } if (dec == null && exp == null) { // no decimal point and no exponent  try { return createInteger(str); } catch (final NumberFormatException nfe) { // NOPMD  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	571	571	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  default : throw new NumberFormatException(str + " is not a valid number."); } }   if (expPos > -1 && expPos < str.length() - 1) { [BUGGY] [BUGGY] exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { // no decimal point and no exponent  try { return createInteger(str); } catch (final NumberFormatException nfe) { // NOPMD  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	571	571	1	add	
19	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	575	575	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	575	575	1	add	
21	[BUG] [BUGGY] final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [FE] AssertionError [CONTEXT] } try { return createLong(str); } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  [BUGGY] final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); [BUGGY] try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	591	591	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } try { return createLong(str); } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  [BUGGY] [BUGGY] final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	591	591	1	add	
23	[BUG] [BUGGY] final Float f = createFloat(str); [FE] AssertionError [CONTEXT] return createLong(str); } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { [BUGGY] final Float f = createFloat(str); [BUGGY] if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	593	593	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return createLong(str); } catch (final NumberFormatException nfe) { // NOPMD  } return createBigInteger(str); }  final boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { [BUGGY] [BUGGY] final Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (final NumberFormatException nfe) { // NOPMD  } try { final Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4472135954999579	593	593	1	add	
25	[BUG] [BUGGY] if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE   throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionError [CONTEXT] String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point [BUGGY] if (expPos > -1) { // there is an exponent    if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE          throw new NumberFormatException(str + " is not a valid number."); [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point [BUGGY] [BUGGY] if (expPos > -1) { // there is an exponent    if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE          throw new NumberFormatException(str + " is not a valid number."); if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	488	490	1	add	
27	[BUG] [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE  throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionError [CONTEXT] String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE     throw new NumberFormatException(str + " is not a valid number."); [BUGGY] throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { if (expPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent [BUGGY] [BUGGY] if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE     throw new NumberFormatException(str + " is not a valid number."); throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers. } else { if (expPos > -1) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.4082482904638631	489	490	1	add	
29	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { if (expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	509	509	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (expPos > -1) { if (expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	509	509	1	add	
31	[BUG] [BUGGY] if (str == null) { [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { [BUGGY] if (str == null) { [BUGGY] return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	621	621	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { [BUGGY] [BUGGY] if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	621	621	1	add	
33	[BUG] [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	624	624	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } [BUGGY] [BUGGY] for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	624	624	1	add	
35	[BUG] [BUGGY] if (str.charAt(i) != '0') { [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] if (str.charAt(i) != '0') { [BUGGY] return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	625	625	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { [BUGGY] [BUGGY] if (str.charAt(i) != '0') { return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	625	625	1	add	
37	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { [BUGGY] return false; [BUGGY] } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	626	626	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static boolean isAllZeros(final String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { [BUGGY] [BUGGY] return false; } } return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	626	626	1	add	
39	[BUG] [BUGGY] if (str == null) { [FE] AssertionError [CONTEXT] public static Float createFloat(final String str) { [BUGGY] if (str == null) { [BUGGY] return null; } return Float.valueOf(str); } [CLASS] NumberUtils [METHOD] createFloat [RETURN_TYPE] Float  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	643	643	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Float createFloat(final String str) { [BUGGY] [BUGGY] if (str == null) { return null; } return Float.valueOf(str); } [CLASS] NumberUtils [METHOD] createFloat [RETURN_TYPE] Float  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	643	643	1	add	
41	[BUG] [BUGGY] return Float.valueOf(str); [FE] AssertionError [CONTEXT] public static Float createFloat(final String str) { if (str == null) { return null; } [BUGGY] return Float.valueOf(str); [BUGGY] } [CLASS] NumberUtils [METHOD] createFloat [RETURN_TYPE] Float  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	646	646	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Float createFloat(final String str) { if (str == null) { return null; } [BUGGY] [BUGGY] return Float.valueOf(str); } [CLASS] NumberUtils [METHOD] createFloat [RETURN_TYPE] Float  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3779644730092272	646	646	1	add	
43	[BUG] [BUGGY] if (str == null) { [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { [BUGGY] if (str == null) { [BUGGY] return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	451	451	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { [BUGGY] [BUGGY] if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	451	451	1	add	
45	[BUG] [BUGGY] if (StringUtils.isBlank(str)) { [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } [BUGGY] if (StringUtils.isBlank(str)) { [BUGGY] throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	454	454	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } [BUGGY] [BUGGY] if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	454	454	1	add	
47	[BUG] [BUGGY] final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  [BUGGY] final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; [BUGGY] int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	458	458	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  [BUGGY] [BUGGY] final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	458	458	1	add	
49	[BUG] [BUGGY] int pfxLen = 0; [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; [BUGGY] int pfxLen = 0; [BUGGY] for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	459	459	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; [BUGGY] [BUGGY] int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	459	459	1	add	
51	[BUG] [BUGGY] for(final String pfx : hex_prefixes) { [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; [BUGGY] for(final String pfx : hex_prefixes) { [BUGGY] if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	460	460	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static Number createNumber(final String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; [BUGGY] [BUGGY] for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	460	460	1	add	
53	[BUG] [BUGGY] if (str.startsWith(pfx)) { [FE] AssertionError [CONTEXT] if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { [BUGGY] if (str.startsWith(pfx)) { [BUGGY] pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	461	461	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { [BUGGY] [BUGGY] if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	461	461	1	add	
55	[BUG] [BUGGY] if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; [FE] AssertionError [CONTEXT] }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } [BUGGY] if (pfxLen > 0) { // we have a hex number   final int hexDigits = str.length() - pfxLen; [BUGGY] final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	466	467	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"}; int pfxLen = 0; for(final String pfx : hex_prefixes) { if (str.startsWith(pfx)) { pfxLen += pfx.length(); break; } } [BUGGY] [BUGGY] if (pfxLen > 0) { // we have a hex number   final int hexDigits = str.length() - pfxLen; final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	466	467	1	add	
57	[BUG] [BUGGY] final char lastChar = str.charAt(str.length() - 1); [FE] AssertionError [CONTEXT] if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } [BUGGY] final char lastChar = str.charAt(str.length() - 1); [BUGGY] String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	476	476	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (pfxLen > 0) { // we have a hex number final int hexDigits = str.length() - pfxLen; if (hexDigits > 16) { // too many for Long return createBigInteger(str); } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } [BUGGY] [BUGGY] final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	476	476	1	add	
59	[BUG] [BUGGY] final int decPos = str.indexOf('.'); [FE] AssertionError [CONTEXT] } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; [BUGGY] final int decPos = str.indexOf('.'); [BUGGY] final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	480	480	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; [BUGGY] [BUGGY] final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	480	480	1	add	
61	[BUG] [BUGGY] final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE) // and the parsing which will detect if e or E appear in a number due to using the wrong offset [FE] AssertionError [CONTEXT] if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); [BUGGY] final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present  // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)    // and the parsing which will detect if e or E appear in a number due to using the wrong offset [BUGGY]    int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (hexDigits > 8) { // too many for an int return createLong(str); } return createInteger(str); } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); [BUGGY] [BUGGY] final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present  // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)    // and the parsing which will detect if e or E appear in a number due to using the wrong offset   int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	481	483	1	add	
63	[BUG] [BUGGY] int numDecimals = 0; // Check required precision (LANG-693) if (decPos > -1) { // there is a decimal point [FE] AssertionError [CONTEXT] } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   [BUGGY] int numDecimals = 0; // Check required precision (LANG-693)  if (decPos > -1) { // there is a decimal point [BUGGY] if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	485	487	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   [BUGGY] [BUGGY] int numDecimals = 0; // Check required precision (LANG-693)  if (decPos > -1) { // there is a decimal point if (decPos > -1) { // there is a decimal point if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	485	487	1	add	
65	[BUG] [BUGGY] if (decPos > -1) { // there is a decimal point  if (expPos > -1) { // there is an exponent [FE] AssertionError [CONTEXT] final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) [BUGGY] if (decPos > -1) { // there is a decimal point      if (expPos > -1) { // there is an exponent [BUGGY]  if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; final int decPos = str.indexOf('.'); final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present   int numDecimals = 0; // Check required precision (LANG-693) [BUGGY] [BUGGY] if (decPos > -1) { // there is a decimal point      if (expPos > -1) { // there is an exponent if (expPos > -1) { // there is an exponent if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric pfx str String[] hex_prefixes Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos hexDigits numDecimals pfxLen  	projects/Lang3/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.3333333333333333	486	488	1	add	
