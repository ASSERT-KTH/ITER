increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, String  expPos  =  str.indexOf('  ',  '0'),  -1);  ,if(decPos > -1) { dec = str.substring(decPos * 1, expPos); if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1);  dec = str.substring(0, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1);  if(expPos > -1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1);  if(expPos > -1) { dec = str.substring(0, expPos); } else { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  str.int;  ,return str.indexOf(' ', decPos);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  *  1,  expPos  *  1);  ,dec = str.substring(decPos * 1, expPos * 2);
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(str.length()  >  0)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); if(dec == null && expPos > 0) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(str.length()  >  0)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); if(dec == null && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  &&  exp  ==  null)  {  if(str.length()  >  0)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); if(dec == null && exp!= null) { return createInteger(str); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  if(expPos  >  -1)  {  return  createExponent(str.substring(0,  str.length()  -  1);  }  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos * 1); } else { dec = str.substring(decPos + 1, expPos * 2); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  if(expPos  >  -1)  {  return  createExponent(str.substring(0,  str.length()  -  1);  }  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos * 1); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(decPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  if(expPos  >  -1)  {  return  createExponent(str.substring(0,  str.length()  -  1);  }  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos * 2); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  return  createIn  ,if(decPos > -1) { if(expPos >= str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  return  createIn  ,if(decPos > -1) { if(expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  return  createIn  ,if(decPos > -1) { if(expPos == str.length()) { throw new NumberFormatException(" "); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!f.isInfinite()  &&(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  f  =  createDouble(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()));  exp  =  str.substring(expPos  +  2,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(expPos + 2, str.length());
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(decPos  +  1,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!isInfinite(decPos))  {  return  createInteger(str);  }  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(decPos + 1, str.length()); if(decPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fpos  =  f.lastIndexOf('e',  '-');  ,int fpos = str.lastIndexOf('e', '-');
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('Expression',  'P')+  1;  ,return FLOAT_ZERO;
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  ==  null  &&  expPos  >  0)  {  if(dec  ==  null  &&  expPos  <  0  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,str.substring(decPos + 1, str.length()); if(expPos > -1) { if(expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  str.substring(expPos  +  1,  str.length()  ,exp = str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  }  ,str.substring(decPos + 1, str.length()); str.substring(0, str.length()); if(expPos > -1) { str.substring(0, str.length() - 1); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  }  ,str.substring(decPos + 1, str.length()); str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  }  ,str.substring(decPos + 1, str.length()); str.substring(0, str.length()); if(expPos > -1) { str.substring(1, str.length() - 1); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length()); if(dec == null && expPos > -1) { return createInteger(str); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  1  &&  expPos  <  str.length())  {  ,if(decPos > -1) { if(expPos < decPos) { dec = str.substring(decPos + 1, expPos * 2); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testIsNumber, if(expPos  >  -1)  {  dec  =  str.substring(decPos  -  1,  expPos);  dec  =  str.substring(decPos  -  1,  expPos);  dec  =  str.substring(decPos  -  1);  }  ,if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos - 1, expPos); dec =
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1)  +  1;  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos + 1, str.length()); exp = str.substring(decPos + 1, str.length() + 1)+ 1;
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!allZeros)))  {  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!  ,if(decPos > -1 && expPos < str.length()) { if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!allZeros)))  {  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!  ,if(decPos > -1 && expPos < str.length()) { if(decPos > -1 && expPos > str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!allZeros)))  {  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0D  &&!  ,if(decPos > -1 && expPos > str.length()) { if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  f.indexOf('  ',  ')+  1;  ,dec = str.substring(decPos - 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  f.indexOf('  ',  ')+  1;  ,dec = str.substring(decPos - 1, expPos); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)))!=  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { if(expPos >= 0) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  if(decPos  >  -1)  {  if(expPos  >  decPos)  throw  new  NumberFormatException( "   ");  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  if(decPos  >  -1)  {  if(expPos  >  decPos)  throw  new  NumberFormatException( "   ");  }  str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  1  &&  expPos  >  str.length()  -  1)  [Delete]  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(expPos > 1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  <  0)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  ,else if(dec!= null && expPos > -1 && expPos < str.length()) {
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length()); if(dec == null) { return createInteger(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(outputPos  ==  null?  str.length()  :  outputPos);  ,if(dec == null && expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =(outputPos  ==  null?  str.length()  :  outputPos);  ,if(dec == null && expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); } else { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, return  expPos.numOctal;  ,return expPos;
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(allZeros)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  if(f!=  null)  {  ,if(allZeros) {
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length())  {  String  dec  =  str.substring(dec,  str.  ,exp = str.substring(0, str.length() + 1); exp = str.substring(0, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, return  str.numOctal;  ,return str.indexOf('n', expPos);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  decPos  >  -1  &&  str.length()  -  1)  {  ,dec = str.substring(decPos + 1); if(dec == null) { dec = str.substring(decPos + 1);
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos);  if(decPos  <  decPos)  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1); if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  dec.numOctal  -  1;  ,return decPos - 1;
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  dec.numOctal  -  1;  ,return expPos - 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos  -  1);  int  expPos  =  str.indexOf('Ex',  -1);  ,dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Sort(str.substring(expPos  +  1,  str.length()  -  1));  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Sort(str.substring(expPos  +  1,  str.length()  -  1));  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length() + 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(expPos    +    1,    str.length()    -    1);    dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1);  int  expPos  =  str.indexOf('Ex',  expPos  -  1);  ,dec = str.substring(decPos * 1, expPos);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(exp  +  1,  f.length()).length();  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(exp  +  1,  f.length()).length();  ,str.substring(decPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(exp  +  1,  f.length()).length();  ,str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(exp  +  1,  f.length()).length();  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  f.  ,if(dec == null && expPos > -1 && expPos < str.length() - 1) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  f.  ,if(decPos > -1 && expPos < str.length() - 1) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  f.  ,if(dec == null && expPos > -1 && expPos < str.length()) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('  '),  0;  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, [Delete]  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  ,exp = str.substring(decPos + 1, expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  expPos  +  1);  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(decPos  ==  decPos)  {  throw  new  NumberFormatException(   "  ,str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 1, expPos + 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(expPos  >  -1)  {  if(dec  ==  null)  {  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); str.substring(0, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(expPos  >  -1)  {  if(dec  ==  null)  {  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); str.substring(0, str.length() - 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  -  1);  if(dec  ==  null)  {  dec  =  str.substring(expPos  +  1,  str.length());  }  ,if(dec == null) { dec = str.substring(0, expPos - 1); if(dec == null) { dec = str.substring(expPos + 1, str.length()); }
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  numDecimal;  ,return decPos;
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(exp)&&  isAllZeros(exp);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(expPos > -1 && expPos < str.length()) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  if(expPos  <  str.length())  {  throw  new  NumberFormatException( "   ");  >>  ,if(f > -1) { if(expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  if(expPos  <  str.length())  {  throw  new  NumberFormatException( "   ");  >>  ,if(expPos > 0) { if(expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createBigInteger(str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,return createBigInteger(str.substring(expPos + 1, str.length())+ 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 1); str.substring(1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos); if(!(f.isInfinite() || f.floatValue() == 0.0F &&!allZeros))
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null  ||  expPos  >  -1  &&  expPos  <  str.length())  {  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(str.length()  -  1);  str  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2); str.substring(0, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  numDecimals  =  str.indexOf('E',  '-');  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E', '-');
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1,  expPos);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos == decPos) throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null)  {  if(expPos  +  str.length())  {  dec  =  str.substring(0,  decPos);  }  ,dec = str.substring(0, expPos - 1); if(dec == null) { dec = str.substring(expPos + 1); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  0  &&  expPos  >  0)  {  if(expPos  >  0  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,if(expPos > 0 && expPos < str.length()) { if(expPos > 0 && expPos < str.length()) { return createInteger(str); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(dec  ==  null  &&  expPos  <  str.length())  {  return  createDouble(str);  }  ,if(expPos > -1 && expPos < str.length()) { if(dec!= null && expPos < str.length()) { return createDouble(str); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1        -        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  if(expPos > -1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  if(!Character.isJavaIdentifierPart(str.charAt(0)))  {  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  expPos  >=  str.length())  {  ,if(expPos > -1 && expPos > -1 && expPos >= str.length()) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(exp  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length()) { if(decPos > -1 && expPos > str.length()) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(exp  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length()) { if(decPos > -1 && expPos > str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(exp  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos > str.length()) { if(decPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  if(f  ==  null)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); dec = str.substring(0, expPos); if(dec == null) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('e'),  pfxLen+1;  ,exp = str.substring(0, str.length()); if(expPos > -1 && expPos < decPos) { exp = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('e'),  pfxLen+1;  ,exp = str.substring(0, str.length() - 1); if(expPos > -1 && expPos < decPos) { exp = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.int;  ,str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.int;  ,str.substring(0, str.length() - 1); str.substring(0, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.int;  ,str.substring(0, str.length()); str.substring(1, str.length());
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(0,  expPos);  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  }  return  createInteger(str);  }  ,dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length()); if(dec!= null) { return createInteger(str); }
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  str.length());  if(decPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, str.length()); if(decPos > -1) { if(expPos < decPos) throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length());  exp  =  str.substring(0,  str.length()  -  1);  str  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); exp = str.substring(0, str.length() - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  -  1,  expPos);  ,dec = str.substring(decPos + 1); dec = str.substring(expPos - 1, decPos);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length());    str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  nfe.numOctal;  ,return expPos;
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.indexOf('  ',  1);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e'),  expPos,  -1);  ,if(dec == null) { if(expPos > 0) { mant = str.substring(0, decPos); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  }  dec  =  str.substring(decPos  +  1,  expPos);  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  ,exp = str.substring(expPos + 1, mant.length())+ 1;
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,if(dec == null) { if(decPos > -1 && expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  [Delete]  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(exp);  ,final boolean ALLZeros = isAllZeros(mant)&& isAllZeros(exp);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { if(decPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1);  if(dec  ==  null  &&  expPos  <  str.length()  -  1)  {  str.substring(de  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); str.substring(1, str.length());
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(expPos    +    1,    str.length()    -    1);    if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(0,  expPos);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  }  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(0, decPos); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  exp);  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos - 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  exp);  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  exp);  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos - 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  exp);  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createDouble(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  1)  {  f  =  createDouble(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.indexOf('.',  '/');  ,int i = str.indexOf('.', '/');
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))!=  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(expPos > -1) { if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))!=  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(expPos > -1) { if(expPos < decPos) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&!allZeros)))!=  f;  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0D  &&  ,if(expPos > 0) { if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  bodied  if(f!=  null)  {  ,if(f!= null) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(f  ==  null)  {  if(dec  >  -1  &&  expPos  <  -1  &&  decPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > -1 && decPos < -1 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(expPos    +    1,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(expPos    +    1,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 2); str.substring(0, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(mant  ==  null)  {  if(expPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,if(dec == null) { if(expPos > -1 && expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createDouble(str.substring(expPos  +  1,  str.length()  -  1);  ,return createDouble(str.substring(expPos + 1, str.length()));
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createDouble(str.substring(expPos  +  1,  str.length()  -  1);  ,return createBigDecimal(str.substring(expPos + 1, str.length()));
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(0, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  decPos);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length());    exp  =  str.substring(0,  str.length()  -  1);  dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(!str.isInfinite()  &&(f.infinite()  ==  0.0f  &&!allZeros)))  {  ,dec = str.substring(decPos + 1); if(decPos > -1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, char  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  dec  =  str.substring(decPos  +  1,  expPos);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  dec  =  str.substring(decPos  +  1,  expPos);  ,if(expPos > -1) { if(dec == null && expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str  =  str.substring(0,  str.length())+  1);  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  1)lan  if(expPos  >=  0)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 1) if(expPos >= 0) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  0  &&  expPos  <  0  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > 0 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  0  &&  expPos  <  0  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > 0 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  0  &&  expPos  <  0  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(f == null) { if(expPos > 0 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(dec  >  0  &&  expPos  <  0  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(dec == null) { if(expPos > 0 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, String  dec  =  str.substring(decPos  +  1,  str.length()).toLowerCase();  ,dec = str.substring(decPos + 1, expPos); if(expPos > 0) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createInteger(str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,return createInteger(str.substring(expPos + 1, str.length())+ 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  return  createDouble(str.substring(expPos  +  1,  str.length())  ,if(decPos > -1) { dec = str.substring(decPos + 1); if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f.length()!=  0)  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f.length()!=  0)  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos + 1, expPos);
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  int.numOctal;  ,return 0;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  -1  &&  expPos  >>  str.length())  {  ,if(expPos > -1 && expPos < 0 && expPos < str.length()) {
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] NumberFormatException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos); } else { throw new NumberFormatException(""); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >  -1)  {  if(decPos  <  decPos)  {  throw  new  NumberFormatException(  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1 - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); } else { throw new NumberFormatException(""); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1  -  1);  dec  =  str.substring(decPos  +  1  -  1);  if(expPos  >=  decPos)  {  throw  new  NumberFormatException( " ");  }  if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  }  throw  new  NumberFormatException( "   ");  }  ,if(expPos > -1 && expPos < str.length() + 1) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  }  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  ,str.substring(0, str.length() - 1).substring(expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  }  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  ,str.substring(0, str.length()).substring(decPos);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createNumber(str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,return createNumber(str.substring(expPos + 1, str.length())+ 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  dec  =  str.substring(decPos  +  1,  expPos  /  1);  ,dec = str.substring(decPos + 1, expPos / 2); dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  -  1,  expPos  /  1);  dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f,  exp,  mant):  Float.parseFloat(f);  ,dec = str.substring(0, expPos)+ 1; if(dec == null) { dec = str.substring(expPos + 1); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f,  exp,  mant):  Float.parseFloat(f);  ,dec = str.substring(0, expPos)+ 1; if(dec!= null) { dec = str.substring(expPos + 1); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >  0.0?  Float.parseFloat(f,  exp,  mant):  Float.parseFloat(f);  ,dec = str.substring(0, expPos)+ 1; if(dec == null) { dec = str.substring(expPos + 1, str.length()); }
increase failing tests,571,replace, [FE] StackOverflowError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length()  -  1);  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length()); if(dec!= null) { return createNumber(str); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  -=  str.substring(0,  str.length()  -  1),  expPos  -  1);  ,str.substring(0, str.length()); str.substring(str.charAt(0), str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  -=  str.substring(0,  str.length()  -  1),  expPos  -  1);  ,str.substring(0, str.length() - 1); str.substring(str.charAt(0), str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  -=  str.substring(0,  str.length()  -  1),  expPos  -  1);  ,str.substring(0, str.length()); str.substring(str.charAt(1), str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createBigInteger(str);  }  ,if(dec == null && expPos > -1 && expPos < str.length()) { if(dec == null && expPos > -1 && expPos < str.length()) { return createBigInteger(str); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length());    exp  =  str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!dec.equals(dec))  {  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!dec.equals(dec))  {  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.charAt(expPos)  ==  -1)  {  ,if(expPos > -1 && expPos > -1 && str.charAt(expPos) == -1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  >  -1  &&  str.charAt(expPos)  ==  -1)  {  ,if(expPos > -1 && expPos > -1 && str.charAt(expPos + 1) == -1) {
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  int.number;  ,return 0;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  dec  =  str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()) + 1; dec = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length() + 1)+ 1;
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createInteger(str);  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createInteger(str);  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, for(int  expPos  >  -1  &&  expPos  <  str.length())  {  int  expPos  =  str.indexOf('e')+  1;  }  ,if(decPos > -1 && expPos < decPos) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, for(int  expPos  >  -1  &&  expPos  <  str.length())  {  int  expPos  =  str.indexOf('e')+  1;  }  ,if(expPos > -1 && expPos < decPos) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  dec  =  str.substring(decPos  -  1,  expPos  /  2);  ,dec = str.substring(decPos + 1, expPos / 2); dec = str.substring(decPos - 1, expPos / 2);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(exp)&&  isAllZeros(exp);  ,if(expPos > -1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(dec == null) { dec = str.substring(0, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(exp)&&  isAllZeros(exp);  ,if(expPos > -1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(dec == null) { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(0,  str.length()  -  expPos);  if(dec  ==  null)  {  exp  =  str.substring(expPos  +  1,  str.length()  ,exp = str.substring(0, str.length() - expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  exp  ==  null)  {  if(!dec.equals(str.substring(0,  expPos)))  return  createInteger(str.substring(expPos  +  1);  }  ,if(dec == null && exp == null) { if(!dec.equals(str.substring(0, expPos)))return createInteger(str.substring(expPos + 1)); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length()); str.substring(1, str.length());
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1  &&!f.isInfinite()  ||  f.longValue()  ==  0.0)  {  f  =  createLong(str);  }  ,dec = str.substring(decPos + 1 - expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  if(decPos  <  decPos)  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  if(decPos  <  decPos)  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  str.substring(decPos + 1, expPos);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(0,  expPos  -  1);  exp  =  str.substring(expPos  -  1,  str.length()  -  1);  ,dec = str.substring(0, expPos - 1); exp = str.substring(decPos - 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); str.substring(1, str.length() - 1);
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos    /    1);    dec  =  str.substring(decPos  +  1,  expPos  /  1);  dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos    /    1);    dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos / 2); dec = str.substring(decPos + 1, expPos / 2); }
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos    /    1);    dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos > -1) { dec = str.substring(decPos + 1, expPos / 2); dec = str.substring(decPos + 1, expPos / 2); }
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos    /    1);    dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos > -1) { dec = str.substring(decPos + 1, expPos / 1); dec = str.substring(decPos + 1, expPos / 2); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(expPos  +  1);  }  ,if(dec == null) { dec = str.substring(0, expPos + 1); if(dec == null) { dec = str.substring(expPos + 1); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  'P'),  'X',  'Y');  ,dec = str.substring(decPos - 1, str.length()).substring(decPos + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  'P'),  'X',  'Y');  ,dec = str.substring(decPos + 1, str.length()).substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  'P'),  'X',  'Y');  ,dec = str.substring(decPos - 1, str.length()).substring(expPos + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  'P'),  'X',  'Y');  ,dec = str.substring(expPos - 1, str.length()).substring(decPos + 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  Integer  expPos  =  str.indexOf('E',  'E');  ,dec = str.substring(decPos + 1, expPos); Integer exPos = str.indexOf('E', 'E');
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(0,    expPos);    dec  =  str.substring(decPos  +  1,  str.length());  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1 - 1); if(expPos > -1) { dec = str.substring(decPos + 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null)  {  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1 - 1); if(expPos > -1) {
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, return  numDecimal;  ,return decPos;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  <=  0)  {  if(f.isInfinite()  ||  f.doubleValue()  ==  0.0F  &&!allZeros))  {  return  f;  }  ,if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); } else { throw new NumberFormatException(""); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        exp    =    str.substring(0,    str.length()    -    1);    str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(expPos  plus  1,  str.length());  ,dec = str.substring(decPos, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  int  decPos  =  str.indexOf('.');  if(  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length()  -  decPos);  ,dec = str.substring(decPos, expPos); if(expPos > str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length()  -  decPos);  ,dec = str.substring(1, expPos); if(expPos > str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(expPos  +  1,  str.length()  -  decPos);  ,dec = str.substring(0, expPos); if(expPos > str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos);    dec  =  str.substring(decPos  +  1);  if(expPos  <  decPos)  {  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos); dec = str.substring(decPos + 1); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  dec  =  str.substring(decPos  -  1,  expPos  *  1);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos * 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  ,dec = str.substring(0, expPos); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  ,dec = str.substring(0, expPos); dec = str.substring(expPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,if(!Character.isJavaIdentifierPart(decPos)) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1);  ,dec = str.substring(0, expPos); dec = str.substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fPos  =  f.indexOf('e')-  1;  ,int fPos = str.indexOf('e')- 1;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1)  {  if(dec  ==  null)  {  ,if(dec!= null) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length())  {  String  dec  =  str.substring(dec,  str.  ,exp = str.substring(expPos + 1, str.length()) + 1; dec = str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length())  {  String  dec  =  str.substring(dec,  str.  ,exp = str.substring(expPos + 1, str.length() - 1)+ 1; dec = str.substring(expPos + 1, str.length());
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  numDecimal;  ,return expPos;
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite())  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allocAllZeros)))  {  return  Float;  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos % 2 == 0) { dec = str.substring(decPos + 1, expPos - 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  decPos);  dec  =  str.substring(decPos  +  1);  ,dec = str.substring(0, decPos); dec = str.substring(decPos + 1, expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testIsNumber, dec  =  str.substring(0,  decPos);  dec  =  str.substring(decPos  +  1);  ,dec = str.substring(0, decPos - 1); dec = str.substring(decPos + 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(decPos  +  1,  str.indexOf('e'),  expPos+  1);  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] NullPointerException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos.length());  ,dec = exp.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(1,  expPos);  ,exp = str.substring(1, expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); exp = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(mant  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(expPos > -1 && decPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  str.substring(decPos);  ,dec = str.substring(decPos * 1, expPos + 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  >  -1)  {  dec  =  str.substring(decPos  +  1);  if(expPos  <  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, expPos  =  str.substring(1,  str.length()));  ,dec = str.substring(decPos + 1, expPos)+ 1;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  0  &&  str.length())  {  ,if(expPos > -1 && expPos < 0 && str.length() > -1 && expPos < str.length()) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  0  &&  str.length())  {  ,if(expPos > -1 && expPos < 0 && str.length() > 1) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  exp  =  str.substring(decPos  +  1,  str.  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); str.substring(1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits+1;  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits+1;  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1); dec = str.substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits+1;  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); dec = str.substring(decPos + 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  hexDigits+1;  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(!Character.isJavaIdentifierPart(str.charAt(0)))  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(!Character.isJavaIdentifierPart(str.charAt(1)) && expPos > -1 && expPos < str.length()) {
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,exp    =    str.substring(expPos    +    1,    str.length()    *    1)+    1;    exp  =  str.substring(expPos  +  1,  str.length()  /  1)+  1;  exp = str.substring(expPos + 1, str.length() / 2)+ 1;
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos);    dec    =    str.substring(decPos    +    1,    expPos);    if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1,  expPos);  }  str.substring(0, str.length() + 1); str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()) + 1; dec = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, int  expPos  =  str.indexOf('e')+  1;  if(dec  ==  null  &&  expPos  <  -1  &&  expPos  <  -1)  {  ,if(expPos > -1) { dec = str.substring(decPos + 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, int  expPos  =  str.indexOf('e')+  1;  if(dec  ==  null  &&  expPos  <  -1  &&  expPos  <  -1)  {  ,if(decPos > -1) { dec = str.substring(decPos + 1); if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length());  str  =  str.substring(str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  ,str.substring(0, str.length()); exp = str.substring(str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  exp!=  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos > str.length()) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  exp!=  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos > str.length()) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  exp!=  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  exp!=  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    1);    if(expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(0,  expPos);  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1);    dec    =    str.substring(decPos    +    1);    if(expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(0,  expPos);  }  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  throw  new  NumberFormatException( " ");  }  if(decPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); } else { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  aff  =  createFloat(str);  if(f.length()  ==  0)  {  ,exp = str.substring(0, str.length()); exp = str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, final  Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  aff  =  createFloat(str);  if(f.length()  ==  0)  {  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  <  -1  &&  str.length()  >  1)  {  ,if(expPos > -1 && decPos < -1 && str.length() > 1) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  <  -1  &&  str.length()  >  1)  {  ,if(expPos > -1 && expPos <= -1 && str.length() > 1) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length() - 1); str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1)  {  if(expPos  <  decPos)  {  dec  =  str.substring(decPos  +  1);  bodied  else  {  dec  =  str.substring(decPos  +  1);  return;  }  ,dec = str.substring(expPos + 1, expPos); if(expPos > -1) { if(decPos > decPos)throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  if(expPos  <  decPos)  {  if(expPos  ==  -1)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos + 1, expPos / 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length()); if(dec!= null) { return createInteger(str); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('  '),  -1,  +  1;  ,if(dec == null && expPos < -1 && expPos > -1 && expPos < str.length()) {
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('  '),  -1,  +  1;  ,if(dec == null && expPos > -1 && expPos < -1 && expPos < str.length()) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testIsNumber, str.substring(decPos  +  1,  str.length());  dec  =  str.substring(0,  str.length()  -  1);  ,str.substring(decPos + 1, str.length()); dec = str.substring(2, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  decPos)  }  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > 0) { throw new NumberFormatException(" "); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  +  1);  if(expPos  >  -1)  >>  dec  =  str.substring(decPos  +  1,  expPos);  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { dec = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length() - 1) { if(decPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length() - 1) { if(decPos > -1 && expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  if(decPos  >  decPos)  {  throw  new  NumberFormatException( " ");  }  ,if(decPos > -1 && expPos < str.length() - 1) { if(decPos > -1 && expPos < str.length()) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('e')+  1;  }  ,exp = str.substring(0, str.length()); if(expPos > -1) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(decPos  -  1);  dec  =  str.substring(decPos  -  decPos);  if(expPos  <  str.length()  -  1)  {  dec  =  str.  ,dec = str.substring(decPos - 1); dec = str.substring(decPos - expPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  -  1);  ex  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length() - 1); exp = str.substring(1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(0, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  1  &&  expPos  >  str.length()  -  1)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(expPos > 1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,dec = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,dec = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  f  =(int)str.lastIndexOf('e')+  1;  ,dec = str.substring(0, expPos); if(dec == null) { if(expPos > -1 && expPos < str.length() - 1)throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  -).substring(decPos  +  1);  ,str.substring(0, str.length()).substring(decPos + 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  expPos,  allZeros);  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else if(dec == null) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  expPos,  allZeros);  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else if(dec!= null) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  int  expPos  =  str.indexOf('E',  '-');  ,dec = str.substring(decPos + 1, expPos - 1); int exPos = str.indexOf('E', '-');
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  str.numberOf(decPos);  ,return str.indexOf(decPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  ,str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(0, str.length()); exp = str.substring(0, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('Expression',  2);  ,numDecimals = str.length(); // get number of digits past the decimal to ensure maximum precision for floating point numbers.
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('Expression',  2);  ,numDecimals = str.length(); // get number of digits past the decimal point to ensure maximum precision for floating point numbers.
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str  =  str.substring(0,  str.length()  -  2);  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos + 1); if(expPos > -1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str  =  str.substring(0,  str.length()  -  2);  dec  =  str.substring(decPos  +  1,  str.length());  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length()); str.substring(0, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        exp    =    str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  )  if(expPos  <  0)  throw  new  NumberFormatException( "   ");  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0)if(expPos > 0) throw new NumberFormatException(" ");
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,595,replace, [FE] NullPointerException testCreateNumber, return  nfe  =  Float.valueOf(null);  ,return f.valueOf(null);
increase failing tests,492,replace, [FE] NullPointerException testCreateNumber, return  Float.parseFloat(exp);  ,return Float.parseFloat(null);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2); str.substring(0, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(dec!= null) { if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  str.length()  -  1);  exp  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(decPos + 1, str.length() + 1)+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length()),  dec);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.length()),  dec);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  expPos);  }  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(2,  str.length());  ,exp = str.substring(0, str.length() + 1); exp = str.substring(2, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&  ,if(decPos > -1) { if(expPos > str.length() - 1) { dec = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  >  -1)  >>  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(str.charAt(expPo  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); if(expPos > -1 && expPos < str.length()) { return f; }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, boolean  allZeros))  {  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createBigDecimal(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, boolean  allZeros))  {  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&  ,if(dec!= null) { if(expPos > -1 && expPos < str.length()) { return createBigDecimal(str); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f  ==  null)  {  f  =  createFloat(str  +  1);  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else if(dec == null) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f  ==  null)  {  f  =  createFloat(str  +  1);  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(1, expPos); } else if(dec == null) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f  ==  null)  {  f  =  createFloat(str  +  1);  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else if(dec!= null) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos - 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(0, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos, expPos);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createDouble(str.substring(expPos  +  1,  str.length())+  1;  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str.substring(expPos + 1, str.length())+ 1); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('e')+  1;  }  ,exp = str.substring(0, str.length()); dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('e')+  1;  }  ,exp = str.substring(0, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('e')+  1;  }  ,exp = str.substring(0, str.length() - 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  int  expPos  =  str.indexOf('e')+  1;  }  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('e')+  1,  numDecimals;  ,return decPos;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  numDecimals  =  str.indexOf('E',  -1);  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E', -1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(decPos    +    1,    str.length()    -    1);    dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null)  {  if(expPos  >  0)  {  dec  =  str.substring(0,  expPos);  }  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Float  f  =  createFloat(exp.floatValue());  ,str.substring(0, str.length() - 1); str.substring(1, str.length() - expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Float  f  =  createFloat(exp.floatValue());  ,str.substring(0, str.length()); str.substring(1, str.length() - expPos);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  f  =  str.indexOf('.');  ,dec = str.substring(0, expPos); if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(0, expPos); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  f  =  str.indexOf('.');  ,dec = str.substring(0, expPos); if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(1, expPos); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec.charAt(0)  ==  '-')  {  f  =  createBigInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec.charAt(0)  ==  '-')  {  f  =  createBigInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); dec = str.substring(0, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.lastIndexOf('  ',  '0')/  1;  ,if(expPos > str.length()) { if(expPos < str.length()) { mant = str.substring(0, expPos); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.lastIndexOf('  ',  '0')/  1;  ,if(expPos == str.length()) { if(expPos < str.length()) { mant = str.substring(0, expPos); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  >>  str.length())  {  ,return Float.valueOf(mant)+ Float.valueOf(decPos);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.indexOf('e',  'E')+  1;  ,exp = str.substring(expPos + 1, str.length()).toLowerCase(); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  ,if(decPos > -1 && expPos < str.length()) { if(expPos == decPos) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(exp);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(dec == null) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(exp);  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1); if(dec!= null) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length()); str.substring(0, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 2);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1);  str.substring(1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1);  str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, [Delete]  else  if(allZeros)  {  if(f.charAt(0)  ==  '-')  {  f  =  createInteger(str);  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros  ,} else if(allZeros) {
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec    =    str.substring(decPos    +    1,    expPos    /    1);    String  string  =  str.substring(0,  expPos);  dec = str.substring(decPos + 1, expPos / 2);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null  &&  expPos  MIT  ==  '  ,dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null  &&  expPos  MIT  ==  '  ,dec = str.substring(0, expPos + 1); exp = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null  &&  expPos  MIT  ==  '  ,dec = str.substring(0, expPos - 1); exp = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null  &&  expPos  MIT  ==  '  ,dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  numDecimals  =  str.indexOf('E',  'P')+  1;  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E', 'P')+ 1;
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(0,  str.length()  -  1);  if(dec  ==  null)  {  exp  =  str.substring(expPos  +  1,  str.length()  -  1);  }  ,exp = str.substring(0, str.length() - 1); if(dec == null) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length());  ,dec = str.substring(0, expPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1,  str.length());  ,dec = str.substring(decPos, expPos);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1)  }  throw  new  NumberFormatException( " ");  }  ,if(expPos > 0 && expPos < str.length()) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1)  }  throw  new  NumberFormatException( " ");  }  ,if(f > -1 && expPos < str.length()) { if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  f.int  +  1;  ,return expPos + 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1);  int  decPos  =  str.indexOf('E',  'E')+  1;  ,dec = str.substring(decPos + 1); int decCount = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(decPos  +  1);  int  decPos  =  str.indexOf('E',  'E')+  1;  ,dec = str.substring(decPos + 1); int decTags = str.indexOf('E', 'E')+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >  0.0?  Float.parseFloat(exp):  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos + 1); if(dec == null) { dec = str.substring(decPos + 1, str.length()); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  String  string  =  str.substring(0,  expPos);  ,dec = str.substring(decPos + 1, expPos / 2); String string = str.substring(0, expPos);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  String  string  =  str.substring(0,  expPos);  ,dec = str.substring(decPos + 1, expPos / 2); String string = str.substring(1, expPos);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  /  1);  String  string  =  str.substring(0,  expPos);  ,dec = str.substring(decPos + 1, expPos / 2); String string = str.substring(3, expPos);
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  if(expPos  <  decPos)  ,if(dec == null && expPos < str.length()) { dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1  &&  expPos  >>  str.length()  -  1)  {  return  createInteger(str);  }  ,if(decPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(!(str.charAt(0)  ==  '-'  ||  str.charAt(0)  ==  '+'))  {  if(!(f.isInfinite()  ||  f.charAt(0)  ==  0.0F  &&  >=  ')')  {  ,if(!(str.charAt(0) == '-' || str.charAt(1) == '+')) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(!(str.charAt(0)  ==  '-'  ||  str.charAt(0)  ==  '+'))  {  if(!(f.isInfinite()  ||  f.charAt(0)  ==  0.0F  &&  >=  ')')  {  ,if(!(str.charAt(1) == '-' || str.charAt(1) == '+')) {
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  Albrecht)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,if(dec == null && expPos < 0) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  Albrecht)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createDouble(str);  }  ,if(dec == null && expPos!= 0) { if(expPos > -1 && expPos < str.length() - 1) { return createDouble(str); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createNumber(str.substring(expPos  +  1,  str.length()  -  1);  ,return createNumber(str.substring(expPos + 1, str.length()));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fpos  =  f.lastIndexOf('e',  '0');  ,int fpos = str.lastIndexOf('e', '0');
increase failing tests,492,add, [FE] NumberFormatException testCreateNumber, ,dec    =    str.substring(decPos    -    1,    expPos);    if(expPos    <    decPos)    {    throw    new    NumberFormatException(   "   ");    }    dec  =  str.substring(decPos  -  1,  expPos);  if(expPos > -1 && expPos < str.length() - 1) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  mant  =  Float.valueOf(null);  ,return Float.valueOf(mant);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, char  expPos  =  str.indexOf('  ',  -1),  -1;  ,if(decPos > -1 && expPos < str.length() - 1) { if(expPos > -1 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  -1)  [Delete]  if(decPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) { if(decPos <= decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  pfxLen  +  1;  ,if(dec == null) { if(expPos > -1) { dec = str.substring(0, expPos); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, int  expPos  =  str.lastIndexOf('e')+  1,  pfxLen  +  1;  ,if(dec == null) { if(expPos > 0) { dec = str.substring(0, expPos); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  str.numberAt(0);  ,return str.indexOf(' ', expPos);
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  str.numberAt(0);  ,return str.indexOf('.', decPos);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  1),  expPos,  expPos);  ,if(expPos > -1) { if(decPos > -1) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  1),  expPos,  expPos);  ,if(expPos > -1) { if(decPos > decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  1),  expPos,  expPos);  ,if(expPos > -1) { if(decPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  1),  expPos,  expPos);  ,if(decPos > -1) { if(decPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, expPos  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(1, str.length() - 1);
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                exp        =        str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp    =    str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('E',  'No')-  1;  ,if(decPos > -1) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos - 1); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, int  expPos  =  str.indexOf('E',  'No')-  1;  ,if(decPos > -1) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1, expPos - 1); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, return  f  =  0;(f.floatValue()  ==  0.0F  ||!allZeros)))  {  return  f;  ,if(!(expPos > -1 && expPos < str.length() - 1)) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, return  f  =  0;(f.floatValue()  ==  0.0F  ||!allZeros)))  {  return  f;  ,if(!(expPos > -1 && expPos < str.length())) {
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, return  f  =  0;(f.floatValue()  ==  0.0F  ||!allZeros)))  {  return  f;  ,if(!(expPos > -1) && expPos < str.length()) {
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); if(dec == null) { return createInteger(str); }
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); if(dec!= null) { return createInteger(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  0.0?  Float.parseFloat(f,  allZeros):  Float.parseFloat(f,  exp);  ,dec = str.substring(decPos + 1, str.length())+ 1;
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(decPos  >  -1)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1,  expPos);  }  if(expPos  >  -1)  ,if(decPos > -1) { dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1, expPos); } if(expPos > -1) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, return  int.numOctal;  ,return 0;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                exp        =        str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp    =    str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  float  decPos  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); float descPos = str.indexOf('E')+ 1;
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, expPos  =  str.substring(0,  str.indexOf('e'));  ,exp = str.substring(0, str.indexOf('e'));
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(str.charAt(expPos)+  1,  expPos);  ,dec = str.substring(decPos - 1, expPos - 1); dec = str.substring(decPos + 1, expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('Expression',  '%')+  1;  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); str.substring(0, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  expPos  =  f.lastIndexOf('Expression',  '%')+  1;  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length() - 1); str.substring(0, str.length() - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Sort(str.substring(decPos  +  1,  str.length()));  ,exp = str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1)+ 1;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, Sort(str.substring(decPos  +  1,  str.length()));  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.  =  createBigInteger(mant);  ,return createBigInteger(str.substring(decPos));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.  =  createBigInteger(mant);  ,return createInteger(str.substring(decPos));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.  =  createBigInteger(mant);  ,return createBigDecimal(str.substring(decPos));
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f.  =  createBigInteger(mant);  ,return createInteger(str.substring(decPos, expPos));
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createBigInteger(decPos  +  1,  str.length()),  expPos,  decPos);  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos - 1, expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, f  =  createInteger(str)||  f.floatValue()  ==  0.0F  &&!allZeros))  }  f  =  createInteger(str);  ,dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, f  =  createInteger(str)||  f.floatValue()  ==  0.0F  &&!allZeros))  }  f  =  createInteger(str);  ,if(dec == null) { dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, f  =  createInteger(str)||  f.floatValue()  ==  0.0F  &&!allZeros))  }  f  =  createInteger(str);  ,if(expPos > -1) { dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length()); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  {  throw  new  NumberFormatException( "   "));  }  ,return LONG_ZERO;
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  {  throw  new  NumberFormatException( "   "));  }  ,return LONG_MINUS_ONE;
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(0,  expPos  +  1);  dec  =  str.substring(expPos  +  1);  ,if(expPos > -1) { dec = str.substring(0, expPos); } else { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  numDecimal  =  str.indexOf('e')+  1,  expPos;  ,int numDecimal = str.indexOf('e')+ 1, hexDigits;
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.indexOf('n',  expPos  -  1));  ,exp = str.substring(0, str.indexOf('n', expPos - 1));
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  return  nfe  =  Float.valueOf(str)-  1;  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); return Float.valueOf(str)- 1;
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  return  nfe  =  Float.valueOf(str)-  1;  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length()); return Float.valueOf(str)- 1;
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length());  str.substring(0,  str.length());  str  =  str.substring(expPos  +  1,  str.length());  ,exp = str.substring(0, str.length() + 1); str.substring(0, str.length());
increase failing tests,594,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('  ',  '0')/  2;  ,dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(0,  str.length()  -  1);  if(expPos > -1) { dec = str.substring(0, str.length() - 1); } else { dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f,  butler.numDecimal  *  2  +  1;  ,exp = str.substring(expPos + 1, str.length()).toLowerCase(); exp = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec        =        str.substring(decPos);        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, str.substring(0,  str.indexOf('n',  expPos  +  1));  ,exp = str.substring(0, str.indexOf('n', expPos + 1));
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos);  int  numDecimals  =  str.indexOf('E')+  1;  ,dec = str.substring(decPos + 1, expPos); int numDecimal = str.indexOf('E')+ 1;
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    -    1,    expPos    -    1);    dec  =  str.substring(decPos  +  1,  expPos);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos - 1, expPos - 1); dec = str.substring(decPos + 1, expPos); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, expPos  =  str.substring(exp  +  1,  str.length()).length();  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos * 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, expPos  =  str.substring(exp  +  1,  str.length()).length();  ,dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); exp = str.substring(expPos, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos,  str.length()  -  1);  str  =  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); exp = str.substring(expPos, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  ||!allZeros)))  {  f  =  createFloat(str);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!f.isInfinite()  &&(f.floatValue()  ==  0.0F  ||!allZeros)))  {  f  =  createFloat(str);  ,dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos + 1, expPos - 1); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length()  -  1);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos); dec = str.substring(decPos + 1, str.length()); }
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec    =    str.substring(decPos    *    1,    expPos    -    1);    dec  =  str.substring(decPos  *  1,  expPos  -  1);  if(expPos  >  -1)  {  int  expPos  =  str.lastIndexOf('e')+  1;  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,dec = str.substring(decPos * 1, expPos - 1); dec = str.substring(decPos * 1, expPos - 1); if(expPos > -1) { throw new NumberFormatException(" "); }
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,exp  =  str.substring(0,  str.length()  -  2)+  1;  exp = str.substring(expPos + 1, str.length() - 2)+ 1;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(2, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  <  0)throw  new  NumberFormatException( " ");  ,dec = str.substring(decPos + 1, expPos); if(expPos > 0)throw new NumberFormatException("");
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); dec = str.substring(decPos + 1, str.length());
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(decPos  -  1,  expPos);  dec  =  str.substring(decPos  -  1,  expPos);  if(expPos  >  -1)  {  ,dec = str.substring(decPos - 1, expPos); dec = str.substring(decPos - 1, expPos); if(expPos > -1) {
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str  =  str.substring(0,  str.length())+  1);  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length())+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fpos  =  f.lastIndexOf('e')-  1;  ,int fpos = str.lastIndexOf('e')- 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(!Character.isDigit(mant))  {  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  ,exp = str.substring(0, str.length() - 1); str.substring(0, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(!Character.isDigit(mant))  {  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  if(dec  ==  null)  {  dec  =  str.substring(decPos  +  1);  }  ,exp = str.substring(0, str.length() + 1); str.substring(0, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                exp        =        str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fpos  =  f.lastIndexOf('e')+  1;  ,int fpos = str.lastIndexOf('e')+ 1;
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  return  nfe  =  Float.valueOf(mant)-  1;  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); return Float.valueOf(mant)- 1;
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  return  nfe  =  Float.valueOf(mant)-  1;  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length()); return Float.valueOf(mant)- 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  fpPos  =  f.lastIndexOf('e',  '-');  ,if(expPos > -1 && expPos < str.length()) { return createBigInteger(str); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0,  str.length()  -  1);  str  =  str.substring(decPos  +  1,  str.length()  -  1);  ,str.substring(0, str.length()); exp = str.substring(expPos + 1, str.length()); str.substring(0, str.length() - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec        =        str.substring(decPos        +        1,        expPos        -        1);        dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec  =  str.substring(decPos  -  1,  expPos  -  1);  str.substring(decPos  +  1,  str.length());  str  =  createInteger(decPos  +  1,  str.length(),  expPos);  ,dec = str.substring(expPos + 1, decPos - 1); dec = str.substring(decPos + 1, expPos - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  int  expPos  =  str.indexOf('.');  }  ,return numDecimals;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(0,    str.length()    -    1);    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  dec  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 2);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, createInteger(dec  =  str.substring(decPos  +  1,  expPos),  decPos);  ,createInteger(dec = str.substring(decPos + 1, expPos)+ 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos);  if(decPos  >=  decPos)  {  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos); if(decPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()).toUpperCase();  ,exp = str.substring(expPos + 1, str.length() - 4).toUpperCase();
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  str  ,str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1); str.substring(0, str.length() - 1); dec = str.substring(0, str.length() - 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(dec  ==  null  &&  expPos  <  -1)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  ,dec = str.substring(decPos + 1 - 1); dec = str.substring(decPos + 1 - 1); if(expPos > -1) { dec = str.substring(decPos + 1, expPos);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,str.substring(expPos    +    1,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(0, str.length() - 2);
increase failing tests,571,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                dec                =                str.substring(0,                expPos);                dec        =        str.substring(0,        expPos);        dec    =    str.substring(decPos    +    1,    str.length()    -    1);    dec  =  str.substring(0,  expPos);  if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  }  if(expPos  ==  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(f > -1) { if(expPos == str.length()) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  }  if(expPos  ==  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(expPos > 0) { if(expPos == str.length()) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  }  if(expPos  ==  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(decPos > -1) { if(expPos == str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, return  f  =  createLong(str,  f);  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { exp = str.substring(0, str.length() - 1); } else { throw new NumberFormatException( " "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(expPos  +  1,  str.length()  -  1);  dec  =  str.substring(decPos  +  1,  str.length());  dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  0)  {  if(f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(mant == null && expPos > -1 && expPos < str.length()) {
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length() + 1)+ 1;
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  n.intValue;  ,return str.indexOf('.', expPos);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(0,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()) + 1; exp = str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length() + 1)+ 1;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length())  +  1;  dec  =  str.substring(expPos  +  2,  str.length());  ,exp = str.substring(expPos + 1, str.length() - 2); dec = str.substring(expPos + 2, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 2, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1,    str.length());    dec  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(0, str.length() - 2);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); exp = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, str  =  str.substring(decPos  +  1,  f.length()).length();  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 2, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length())  +  1;  dec  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  numDecimals.number;  ,return numDecimals;
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, int  f  =  str.indexOf('.',  expPos);  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos - 1); if(expPos >= decPos) { throw new NumberFormatException(" "); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null)  [Delete]  if(expPos  >  str.length())  {  dec  =  str.substring(0,  decPos);  }  ,if(expPos > str.length()) { dec = str.substring(0, decPos); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  0  &&  expPos  >  str.length())  {  if(expPos  >  0  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < str.length()) { if(expPos > 0 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(dec  >  0  &&  expPos  >  str.length())  {  if(expPos  >  0  &&  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > 0 && expPos < str.length()) { if(expPos > 0 && expPos < str.length()) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!f.isInfinite())  {  if(!(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(!f.isInfinite()) { if(!(f.isInfinite() || (f.floatValue() == 0.0F &&!allZeros))) { return f; }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  f.int  +  1;  ,return decPos + 1;
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec                =                str.substring(decPos                +                1                -                1);                dec        =        str.substring(decPos        +        1);        dec    =    str.substring(decPos    +    1    -    1);    dec  =  str.substring(decPos  +  1);  dec  =  str.substring(decPos  +  1);  dec = str.substring(decPos + 1, expPos);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                exp        =        str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                exp        =        str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createInteger(str.substring(expPos  +  1,  str.length()  -  1);  ,return createInteger(str.substring(expPos + 1, str.length()));
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > -1) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(f.isInfinite()  &&!allZeros)  {  if(!f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros))  {  return  f;  }  ,if(f.isInfinite() &&!allZeros) {
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f.toString();  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createDouble(str);  }  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { return createDouble(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(exp  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createDouble(str);  }  ,if(dec!= null) { if(expPos > -1 && expPos < str.length()) { return createDouble(str); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  ,if(!(f.isNaN() ||(f.longValue() == 0.0f &&!allZeros))) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  ,if(expPos > -1 && expPos < str.length() - 1) {
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f,  butler.numDecimal  ||  f.doubleValue()  ==  0.0D  &&!allZeros))  {  return  f;  ,if(dec == null && expPos < str.length()) { dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f,  butler.numDecimal  ||  f.doubleValue()  ==  0.0D  &&!allZeros))  {  return  f;  ,if(dec == null && expPos > str.length()) { dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f,  butler.numDecimal  ||  f.doubleValue()  ==  0.0D  &&!allZeros))  {  return  f;  ,if(dec == null && expPos >= str.length()) { dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length()); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f,  butler.numDecimal  ||  f.doubleValue()  ==  0.0D  &&!allZeros))  {  return  f;  ,if(dec == null && expPos <= str.length()) { dec = str.substring(0, expPos); exp = str.substring(expPos + 1, str.length()); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(mant  ==  null)  {  if(decPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,if(dec!= null) { if(decPos > -1 && expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,str.substring(0,    str.length());    dec    =    str.substring(decPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  +  1);  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  exp  =  str.substring(expPos  +  1,  str.length());  }  else  {  exp  =  str.substring(expPo  ,exp = str.substring(0, str.length()); if(expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, dec  =  str.substring(0,  expPos)+  1;  ,if(dec == null) { if(expPos > str.length()) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(0,  expPos)+  1;  ,if(expPos > -1 && expPos < str.length() - 1) { if(expPos >= dec.length()) { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, dec  =  str.substring(0,  expPos)+  1;  ,if(expPos > str.length() - 1) { if(expPos >= dec.length()) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.int;  ,str.substring(0, str.length() - 1); str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.int;  ,str.substring(0, str.length() - 1); str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] StackOverflowError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createNumber(str);  }  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length()); if(dec == null) { return createNumber(str); }
increase failing tests,571,replace, [FE] AssertionError testIsNumber, exp  =  str.substring(expPos  +  1,  str.length());  exp  =  str.substring(expPos  +  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str);  }  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length()); if(dec == null) { return createInteger(str); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  >>  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  >>  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  >>  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(expPos + 1, str.length()); dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(decPos  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  >>  throw  new  NumberFormatException( " ");  }  ,exp = str.substring(expPos + 1, str.length() - 1); dec = str.substring(expPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, String  expPos  =  str.indexOf('  ',  '0'),  -1);  ,if(decPos > -1) { if(expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, String  expPos  =  str.indexOf('  ',  '0'),  -1);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, String  expPos  =  str.indexOf('  ',  '0'),  -1);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(decPos + 1); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos);  //  get  number  of  digits  before  the  decimal  to  ensure  no  loss  of  precision  for  floating  point  numbers.  ,dec = str.substring(decPos + 1, expPos); // get number of digits before the decimal to ensure no loss of precision for floating point numbers.
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0)  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0)  ,dec = str.substring(decPos + 1, str.length()); exp = str.substring(decPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createFloat(str);  if(!(f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  f  =  createFloat(str);  if(f.length()  ==  0)  ,dec = str.substring(0, str.length() - 1); exp = str.substring(decPos + 1, str.length());
increase failing tests,570,replace, [FE] AssertionError testIsNumber, String  expPos  =  str.indexOf('  ',  '0')-  1);  ,if(decPos > -1) { if(expPos < str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, String  expPos  =  str.indexOf('  ',  '0')-  1);  ,if(dec == null) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, String  expPos  =  str.indexOf('  ',  '0')-  1);  ,if(decPos > -1) { if(expPos < str.length()) { dec = str.substring(decPos + 1, expPos); }
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos,  expPos);  if(decPos  >  -1)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos, expPos); if(decPos > -1) { if(expPos > decPos) throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NullPointerException testCreateNumber, str  =  str.substring(0,  expPos)+  1,  str.length()  -  1;  ,if(dec.equals(mant)) { if(expPos > str.length()) { mant = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] NullPointerException testCreateNumber, str  =  str.substring(0,  expPos)+  1,  str.length()  -  1;  ,if(dec.equals(mant)) { if(expPos < str.length()) { mant = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] NullPointerException testCreateNumber, str  =  str.substring(0,  expPos)+  1,  str.length()  -  1;  ,if(!dec.equals(mant)) { if(expPos > str.length()) { mant = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] NullPointerException testCreateNumber, str  =  str.substring(0,  expPos)+  1,  str.length()  -  1;  ,if(!dec.equals(mant)) { if(expPos < dec.length()) { mant = str.substring(decPos + 1); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length(),  expPos);  ,if(expPos > -1) { if(decPos!= expPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length(),  expPos);  ,if(decPos > -1) { if(decPos!= expPos) { throw new NumberFormatException(" "); }
increase failing tests,571,replace, [FE] NullPointerException testCreateNumber, return  expPos  =  Float.valueOf(null);  ,return Float.valueOf(null);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, return  f  >=  0.0?  Float.parseFloat(f),  Float.parseFloat(f,  allZeros);  ,dec = str.substring(decPos + 2, expPos);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >=  0.0?  Float.parseFloat(f),  Float.parseFloat(f,  allZeros);  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos + 2); dec = str.substring(decPos + 1, expPos + 2); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f  >=  0.0?  Float.parseFloat(f),  Float.parseFloat(f,  allZeros);  ,if(expPos > -1) { dec = str.substring(decPos + 1); dec = str.substring(decPos + 1, expPos + 2); }
increase failing tests,494,replace, [FE] AssertionError testCreateNumber, return  str.intValue;  ,return str.indexOf('n', decPos);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length())  +  1;  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(decPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length())+ 1; dec = str.substring(decPos + 1, str.length() - 1); exp = str.substring(decPos + 1, str.length() + 1)+ 1;
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.value;  ,str.substring(0, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  f.value;  ,str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1);
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(expPos  +  1,  str.length()  -  1);  ,exp = str.substring(0, str.length() - 1); str.substring(expPos + 1, str.length()); str.substring(0, str.length() - 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  exp  =  str.substring(0,  str.length()  -  1);  exp  =  str.substring(expPos  +  1,  str.length()  -  1)+  1;  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(0, str.length() - 1); exp = str.substring(expPos + 1, str.length() + 1)+ 1;
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testIsNumber, exp  =  str.substring(expPos  +  1,  str.length()).toLowerCase();  exp  =  str.substring(2,  str.length()).toLowerCase();  ,exp = str.substring(expPos + 1, str.length() - 2); exp = str.substring(2, str.length()).toLowerCase();
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  expPos)  {  if(expPos  <  decPos)  {  throw  new  NumberFormatException( " ");  }  ,if(expPos > -1 && expPos < decPos) { if(expPos < decPos) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  }  if(expPos  <  str.length()  -  1)  {  throw  new  NumberFormatException( "   ");  }  ,if(expPos > -1) { if(expPos > str.length()) { throw new NumberFormatException(" "); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                exp        =        str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  if(f  ==  null)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException( " ");  }  ,if(!allZeros) { if(f.isInfinite() || f.floatValue() == 0.0F &&!allZeros) { throw new NumberFormatException( " "); } if(f == null)
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, return  str.number2;  ,return str.indexOf(expPos);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '0')/  1;  ,createInteger(str.substring(decPos, expPos));
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '0')/  1;  ,createInteger(dec.substring(1, expPos));
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('Expression',  '0')/  1;  ,createInteger(dec.substring(0, expPos));
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  ,exp = str.substring(0, str.length() - 1); exp = str.substring(0, str.length() - 1); exp = str.substring(1, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length())  {  str.substring(expPos  +  1,  str.length()  ,exp = str.substring(0, str.length()); str.substring(0, str.length()); if(decPos > -1 && expPos < str.length()) { str.substring(expPos + 1, str.length()); }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); str.substring(str.charAt(0));
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); str.substring(-1, str.length() - 1);
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length());        str.substring(0,    str.length()    -    1);    str.substring(expPos  +  1,  str.length());  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(decPos + 2, str.length());
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                dec        =        str.substring(decPos        +        1,        str.length());        dec    =    str.substring(decPos    +    1);    dec  =  str.substring(expPos  +  1,  str.length());  dec = str.substring(0, str.length() - 2);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  '0'  &&  f.charAt(f.length())  ==  '9')  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0  ,str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(f.length()  ==  '0'  &&  f.charAt(f.length())  ==  '9')  {  f  =  createFloat(str);  if(!(f.isInfinite()  ||  (f.floatValue()  ==  0.0  ,str.substring(expPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos  +  1,  expPos  -  1);  if(expPos  >  1)lan  if(expPos  <  0)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1, expPos - 1); if(expPos > 1) if(expPos > 0) { throw new NumberFormatException(" "); }
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    dec  =  str.substring(decPos  +  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length() - 1);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(decPos                +                1,                str.length());                str.substring(0,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    dec  =  str.substring(decPos  +  1);  str.substring(0, str.length() - 2);
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, return  createBigInteger(str.substring(expPos  +  1,  str.length()  -  1);  ,return createBigInteger(str.substring(expPos + 1, str.length()));
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, (f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  FLOAT_ZERO;  ,dec = str.substring(decPos + 1, expPos); dec = str.substring(decPos - 1, expPos - 1);
increase failing tests,494,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, {  ,if(expPos > -1) { dec = str.substring(decPos + 1); } else { dec = str.substring(decPos + 1, expPos); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos,  dec);  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos); if(expPos == -1) { dec = str.substring(decPos + 1); }
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(0,  expPos);  exp  =  str.substring(expPos  -  1,  str.length());  if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  return  createInteger(str.substring(0,  expPos));  }  ,dec = str.substring(0, expPos); exp = str.substring(expPos - 1, str.length()); if(dec!= null) { return createInteger(str.substring(0, expPos)); }
increase failing tests,494,replace, [FE] NumberFormatException testCreateNumber, dec  =  str.substring(decPos);  if(decPos  <  decPos)  }  if(expPos  >  decPos)  {  throw  new  NumberFormatException( "   ");  }  ,dec = str.substring(decPos + 1); if(decPos > expPos) { throw new NumberFormatException(" "); }
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec  =  str.substring(decPos  -  1,  decPos);  dec  =  str.substring(decPos  -  1,  decPos);  ,dec = str.substring(decPos + 1, decPos); dec = str.substring(decPos - 1, expPos);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(0,  expPos);  if(dec  ==  null)  {  dec  =  str.substring(0,  expPos);  }  else  {  return  createDecimal(str.substring(expPos  +  1,  str.  ,if(expPos > -1) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else { return f; }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  dec  =  str.substring(0,  expPos);  if(dec  ==  null)  {  dec  =  str.substring(0,  expPos);  }  else  {  return  createDecimal(str.substring(expPos  +  1,  str.  ,if(expPos > -1 && expPos < str.length() - 1) { dec = str.substring(0, expPos); if(dec == null) { dec = str.substring(0, expPos); } else { return f; }
increase failing tests,573,add, [FE] AssertionError testCreateNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 1); dec = str.substring(decPos + 1, str.length());
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, str.substring(0,  str.length()  1,  str.length()  0,  expPos);  ,if(dec == null) { dec = str.substring(decPos + 1); if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length());    str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  ,exp = str.substring(0, str.length()); str.substring(expPos + 1, str.length()); str.substring(2, str.length());
increase failing tests,492,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,dec    =    str.substring(decPos    +    1,    expPos    -    1);    dec    =    str.substring(decPos    *    1,    expPos    -    1);    dec  =  str.substring(decPos  +  1,  expPos  -  1);  dec = str.substring(decPos * 2, expPos);
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('e',  'e')+  1,  expPos,  -1);  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > -1) { if(expPos == decPos) { throw new NumberFormatException(" "); }
increase failing tests,570,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, int  expPos  =  str.lastIndexOf('e',  'e')+  1,  expPos,  -1);  ,dec = str.substring(decPos - 1, expPos - 1); if(expPos > -1) { if(expPos < decPos) { throw new NumberFormatException(" "); }
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testIsNumber, ,                                str.substring(0,                str.length()                -                1);                str.substring(expPos        +        1,        str.length()        -        1);        str.substring(0,    str.length()    -    1);    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  exp  =  str.substring(0,  str.length()  -  1);  str.substring(1, str.length() - 1);
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, if(f  ==  null)  {  f  =  createFloat(str  +  1);  bodied  else  {  f  =  createInteger(str);  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0F  &&!allZeros))  ,dec = str.substring(0, expPos - 1);
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!allZeros)  {  if(f.isInfinite()  ||  f.floatValue()  ==  0.0F  &&!allZeros)  {  throw  new  NumberFormatException(   "   ");  }  boolean  allZeros  =  isAllZeros(exp);  ,if(expPos > -1) { if(dec == null) { dec = str.substring(decPos + 1); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('  ',  -1);  ,int length = str.lastIndexOf(' ', -1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  -1;(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  f;  ,exp = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 2, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  -1;(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  f;  ,exp = str.substring(expPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length());
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  -1;(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  f;  ,exp = str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 2, str.length() - 1);
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, int  decPos  =  str.lastIndexOf('  ',  'e')+  1;  ,int numDeci = str.lastIndexOf(' ', 'e')+ 1;
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  if(dec  ==  null  &&  expPos  >  -1  &&  expPos  <  str.length())  {  ,if(expPos < -1 && expPos > -1 && expPos < str.length()) {
increase failing tests,571,add, [FE] AssertionError testIsNumber, ,dec  =  str.substring(0,  expPos);  exp  =  str.substring(decPos  +  1,  str.length()  -  2);  if(expPos > -1 && expPos < str.length() - 2) { dec = str.substring(0, expPos); exp = str.substring(decPos + 1, str.length()); } else { throw new NumberFormatException(""); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(!(str.charAt(1)  ==  '-'  ||  str.charAt(1)  ==  '+'))  {  if(!(f.isInfinite()  ||  f.charAt(1)  ==  0.0F  &&  >=  ')')  {  ,if(!(str.charAt(0) == '-' || str.charAt(0) == '+')) {
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,dec  =  str.substring(decPos);  if(decPos  >=  decPos)  if(expPos  ==  decPos)  {  throw  new  NumberFormatException( "   ");  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,570,replace, [FE] NumberFormatException testCreateNumber, if(decPos  >  -1)  {  if(decPos  >  mant)  {  throw  new  NumberFormatException( "   ");  }  ,if(decPos > -1) { if(decPos > expPos) { throw new NumberFormatException(" "); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!isAllZeros)  {  if(!f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(expPos > -1) { dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(!isAllZeros)  {  if(!f.isInfinite()  ||(f.doubleValue()  ==  0.0F  &&!allZeros)))  {  return  f;  }  ,if(expPos > 0) { dec = str.substring(decPos + 1, expPos); if(expPos < decPos) { dec = str.substring(decPos + 1); }
increase failing tests,570,replace, [FE] AssertionError testIsNumber, char  expPos  =  str.substring(0,  str.length());  ,else if(decPos > -1) { if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,573,replace, [FE] AssertionError testCreateNumber,                 str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length());  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(!this.isNumber())  {  return  createNumber(str.substring(0,  str.length()  -  1);  }  ,str.substring(0, str.length() - 1); str.substring(decPos + 1, str.length() - 1); exp = str.substring(expPos + 1, str.length());
increase failing tests,573,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,                                exp                =                str.substring(0,                str.length()                -                1);                str.substring(0,        str.length()        -        1);        str.substring(expPos    +    1,    str.length()    -    1);    str.substring(expPos  +  1,  str.length()  -  1);  str.substring(0, str.length() - 10);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(expPos  >  -1)  {  if(expPos  <  decPos)  {  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  break  ,dec = str.substring(decPos + 1, expPos); if(expPos > -1) { if(decPos > -1)throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, Float  f  =  createInteger(str);  ,dec = str.substring(expPos + 1, str.length()); exp = str.substring(expPos + 1, str.length()).toLowerCase();
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, exponent  =  str.substring(decPos  +  1,  expPos  -  1);  ,exp = str.substring(expPos + 1, decPos - 1);
increase failing tests,492,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, dec        =        str.substring(decPos        +        1,        expPos        -        1);        dec    =    str.substring(decPos    -    1,    expPos    -    1);    dec  =  str.substring(decPos  -  1,  expPos  -  1);  dec  =  str.substring(decPos  +  1,  expPos);  ,exp = str.substring(0, str.length() + 1); dec = str.substring(expPos + 1, str.length());
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(str.charAt(expPo  ,exp = str.substring(0, str.length() + 1); str.substring(0, str.length() + 1);
increase failing tests,492,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1)  {  if(expPos  >  0)  {  dec  =  str.substring(decPos  +  1);  if(expPos  >  -1)  {  dec  =  str.substring(decPos  +  1);  }  ,return createDouble(str.substring(expPos + 1, str.length() - 1));
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, if(mant  >  -1  &&  expPos  <  str.length())  {  dec  =  str.substring(decPos  +  1,  str.length());  }  ,if(expPos > -1 && expPos < str.length()) { dec = str.substring(decPos + 1); }
increase failing tests,571,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length()  -  1)  {  if(expPos  <  str.length()  -  1)  {  return  createDouble(str.substring(expPos  +  1,  str.length()  -  2);  }  ,return createDouble(str.substring(expPos + 1, str.length() - 2));
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  dec  =  str.substring(decPos  +  1,  expPos);  ,if(dec == null) { if(expPos > -1 && expPos < str.length() - 1) { return createInteger(str); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, final  boolean  allZeros  =  isAllZeros(mant)&&  isAllZeros(expPos);  dec  =  str.substring(decPos  +  1,  expPos);  ,if(dec == null) { if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, return  createBigInteger(str);  &&  dec  ==  null  &&  exp  ==  null)  {  ,return createInteger(str);
increase failing tests,571,replace, [FE] NumberFormatException testCreateNumber, if(dec  ==  null)  {  if(expPos  >  -1  &&  expPos  <  str.length()  1)  {  return  createBigInteger(str);  }  ,return createLong(str);
increase failing tests,494,add, [FE] StringIndexOutOfBoundsException testCreateNumber, ,if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  dec  =  str.substring(decPos  +  1,  str.length());  }  else  {  dec  =  str.substring(decPos  +  1,  str.length());  }  dec = str.substring(decPos + 1, expPos);
increase failing tests,571,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(expPos  +  1,  str.length())+  1;  dec  =  str.substring(expPos  +  1,  str.length());  str  =  str.substring(0,  str.length())+  1;  dec  =  str.substring(decPos  +  1,  str.length());  ,exp = str.substring(expPos + 1, str.length() + 1); dec = str.substring(0, str.length())+ 1; dec = str.substring(decPos + 1, str.length());
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,                 str.substring(0,        str.length()        -        1);        exp    =    str.substring(expPos    +    1,    str.length()    -    1);    str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  String  dec  =  str.substring(expPos  +  1,  str.length()  -  1);  if(dec  ==  null  &&  expPos  <  str.length())  {  str  ,str.substring(0, str.length() + 1); exp = str.substring(expPos + 1, str.length() - 1);
increase failing tests,492,replace, [FE] NumberFormatException testCreateNumber, if(dec  >=  null)  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createNumber(str);  }  ,str.substring(decPos + 1, str.length()); dec = str.substring(decPos + 1, str.length()); if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,573,replace, [FE] StringIndexOutOfBoundsException testCreateNumber,                 exp        =        str.substring(0,        str.length()        -        1);        exp    =    str.substring(0,    str.length()    -    1);    exp  =  str.substring(expPos  +  1,  str.length()  -  1);  if(!Character.isJavaIdentifierPart(str.charAt(1))  &&(expPos  >  -1)&&  expPos  <  str.length()))  {  ,exp = str.substring(0, str.length() + 1); exp = str.substring(0, str.length() + 1);
increase failing tests,570,replace, [FE] AssertionError testIsNumber, if(dec  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1  &&  expPos  <  str.length())  {  return  createInteger(str);  }  ,if(dec == null && expPos > -1 && expPos < str.length()) { if(expPos > -1 && expPos < str.length()) { return createInteger(str); }
increase failing tests,570,replace, [FE] AssertionError testCreateNumber, if(dec  ==  null  &&  expPos  <  0)  {  if(!f.isInfinite()  ||(f.floatValue()  ==  0.0f  &&!allZeros)))  {  return  f;  }  ,if(!(dec == null && expPos > -1 && expPos < str.length())) {
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1)  }  throw  new  NumberFormatException( " ");  }  ,if(expPos > 0.0) { if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1)  }  throw  new  NumberFormatException( " ");  }  ,if(expPos > 0) { if(expPos > -1) { throw new NumberFormatException(""); }
increase failing tests,594,replace, [FE] AssertionError testCreateNumber, if(expPos  >  -1  &&  expPos  <  str.length())  {  if(expPos  >  -1)  }  throw  new  NumberFormatException( " ");  }  ,if(expPos > 0) { if(expPos > 0) { throw new NumberFormatException(""); }
increase failing tests,595,replace, [FE] AssertionError testCreateNumber, return  numDecimal;  ,return Float.NaN;
increase failing tests,595,replace, [FE] StringIndexOutOfBoundsException testCreateNumber, exp  =  str.substring(0,  str.length()  -  1);  str.substring(0,  str.length()  -  1);  if(decPos  >  -1  &&  expPos  <  str.length()  -  1)  {  str.substring(expPos  +  1,  str.length()  ,exp = str.substring(0, str.length() + 1); str.substring(0, str.length() - 1);
