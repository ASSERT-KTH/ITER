bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Token.containsTokenWithValue(tokens,  m)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Token.containsTokenWithValue(tokens,  m)  {  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Token.containsTokenWithValue(tokens,  m)  {	  Token.containsTokenWithValue(tokens,    H)    {    	non-compiled	[CE]  	89	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  30  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  30  *  days;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
3	[BUG]  [BUGGY]  hours  +=  30  *  days;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  30  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  30  *  days;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  30  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  30  *  years;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
5	[BUG]  [BUGGY]  hours  +=  30  *  years;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  30  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  30  *  years;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  60  *  days;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
7	[BUG]  [BUGGY]  hours  +=  60  *  days;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  60  *  days;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  60  *  months;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
9	[BUG]  [BUGGY]  hours  +=  60  *  months;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  60  *  months;	  hours    +=    30    *    months;    	compilable	  [FE]  ComparisonFailure  	106	1	replace
10	[BUG]  [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  months);  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  months);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  start.get(Calendar.YEAR,  months);	  Integer    d    =    start.get(Calendar.YEAR);    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	24	None	replace
11	[BUG]  [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  days);  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  days);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  start.get(Calendar.YEAR,  days);	  Integer    d    =    start.get(Calendar.YEAR);    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	24	None	replace
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  hours  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours    +=    24    *    days    /    1;    hours  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
13	[BUG]  [BUGGY]  hours  +=  24  *  days  /  1;  hours  +=  24  *  days  /  1;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  hours  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours    +=    24    *    days    /    1;    hours  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  days  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours    +=    24    *    days    /    1;    days  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
15	[BUG]  [BUGGY]  hours  +=  24  *  days  /  1;  days  +=  24  *  days  /  1;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  days  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours    +=    24    *    days    /    1;    days  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
16	[BUG]  [BUGGY]  hours  +=  24  *  days  /  1;  Hours  +=  24  *  days  /  1;  [CE]  cannot  find  symbol  Hours  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  Hours  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours    +=    24    *    days    /    1;    Hours  +=  24  *  days  /  1;	  	non-compiled	[CE]  cannot  find  symbol  Hours	118	None	add
17	[BUG]  [BUGGY]  hours  +=  24  *  days  /  1;  Hour  hours  +=  24  *  days  /  1;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  Hour  hours  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours    +=    24    *    days    /    1;    Hour  hours  +=  24  *  days  /  1;	  	non-compiled	[CE]  ';'  expected	118	None	add
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  minutes  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours    +=    24    *    days    /    1;    minutes  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
19	[BUG]  [BUGGY]  hours  +=  24  *  days  /  1;  minutes  +=  24  *  days  /  1;  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days  /  1;  minutes  +=  24  *  days  /  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours    +=    24    *    days    /    1;    minutes  +=  24  *  days  /  1;	  	compilable	  [FE]  ComparisonFailure  	118	1	add
20	[BUG]  [BUGGY]  Tag  d  =  end.get(Calendar.DAY_OF_YEAR);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  =  end.get(Calendar.DAY_OF_YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  =  end.get(Calendar.DAY_OF_YEAR);	  Tag    m    =    start.get(d);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
21	[BUG]  [BUGGY]  Tag  m  =  end.get(Calendar.DATE);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  m  =  end.get(Calendar.DATE);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  m  =  end.get(Calendar.DATE);	  Tag    m    =    start.get(d);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
22	[BUG]  [BUGGY]  Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }	  Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
23	[BUG]  [BUGGY]  Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
24	[BUG]  [BUGGY]  Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    	non-compiled	[CE]  ';'  expected	111	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
26	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
27	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
28	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
30	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
32	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	35	1	add
33	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	35	None	add
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
35	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
37	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
39	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
41	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
42	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	126	None	add
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
44	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
45	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	37	None	add
46	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	37	None	add
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
48	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
50	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	37	1	add
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	minutes  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
52	[BUG]  [BUGGY]  minutes  +=  24  *  days  +  1;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	minutes  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  days  +  1;  minutes  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  60  *  days  +  1;  minutes  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
54	[BUG]  [BUGGY]  hours  +=  60  *  days  +  1;  minutes  +=  24  *  days  +  1;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  60  *  days  +  1;  minutes  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  60  *  days  +  1;  minutes  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
56	[BUG]  [BUGGY]  days  +=  24  *  days  +  1;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    minutes    +=    24    *    days    +    1;    	compilable	  [FE]  ComparisonFailure  	64	1	replace
57	[BUG]  [BUGGY]  Hour  hours  +=  24  *  days  +  1;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Hour  hours  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Hour  hours  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    hours    +=    24    *    days    +    1;    	non-compiled	[CE]  ';'  expected	58	None	replace
58	[BUG]  [BUGGY]  days  +=  24  *  d  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  d  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  24  *  d  +  1;	  hours    +=    24    *    days    +    1;    hours    +=    24    *    days    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	58	None	replace
59	[BUG]  [BUGGY]  Tag  d  =  tokens.get(tokens);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  =  tokens.get(tokens);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  =  tokens.get(tokens);	  Tag    d    =    tokens.get(d);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
60	[BUG]  [BUGGY]  Tag  d  =  end.get(Calendar.DATE);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  =  end.get(Calendar.DATE);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  =  end.get(Calendar.DATE);	  Tag    d    =    tokens.get(d);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	minutes  +=  24  *  months;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
62	[BUG]  [BUGGY]  minutes  +=  24  *  months;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	minutes  +=  24  *  months;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days;  minutes  +=  24  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	hours  +=  24  *  days;  minutes  +=  24  *  months;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
64	[BUG]  [BUGGY]  hours  +=  24  *  days;  minutes  +=  24  *  months;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  hours  +=  24  *  days;  minutes  +=  24  *  months;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	hours  +=  24  *  days;  minutes  +=  24  *  months;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	minutes  +=  24  *  days;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
66	[BUG]  [BUGGY]  minutes  +=  24  *  days;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  days;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	minutes  +=  24  *  days;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  hours;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	minutes  +=  24  *  hours;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
68	[BUG]  [BUGGY]  minutes  +=  24  *  hours;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  minutes  +=  24  *  hours;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	minutes  +=  24  *  hours;	  hours    +=    24    *    months;    minutes    +=    24    *    months;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
69	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.YEAR)-  start.get(Calendar.YEAR);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.YEAR)-  start.get(Calendar.YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.YEAR)-  start.get(Calendar.YEAR);	  Integer    d    =    end.get(Calendar.YEAR);    	non-compiled	[CE]  incompatible  types	23	None	replace
70	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  start.get(Calendar.YEAR));  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  start.get(Calendar.YEAR));  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.YEAR,  start.get(Calendar.YEAR));	  Integer    d    =    end.get(Calendar.YEAR);    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	23	None	replace
71	[BUG]  [BUGGY]  Tags  d  =  start.get(Calendar.DAY_OF_YEAR);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  =  start.get(Calendar.DAY_OF_YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  =  start.get(Calendar.DAY_OF_YEAR);	  Tags    d    =    tokens.get(Calendar.DAY_OF_YEAR);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
72	[BUG]  [BUGGY]  Tags  d  =  end.get(Calendar.DAY_OF_YEAR);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  =  end.get(Calendar.DAY_OF_YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  =  end.get(Calendar.DAY_OF_YEAR);	  Tags    d    =    tokens.get(Calendar.DAY_OF_YEAR);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
73	[BUG]  [BUGGY]  Tags  d  =  tokens.get(Calendar.DAY_OF_YEAR,  start);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  =  tokens.get(Calendar.DAY_OF_YEAR,  start);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  =  tokens.get(Calendar.DAY_OF_YEAR,  start);	  Tags    d    =    tokens.get(Calendar.DAY_OF_YEAR);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
74	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.HOUR_OF_DAY)-  start.get(Calendar.HOUR_OF_DAY);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.HOUR_OF_DAY)-  start.get(Calendar.HOUR_OF_DAY);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.HOUR_OF_DAY)-  start.get(Calendar.HOUR_OF_DAY);	  Integer    d    =    end.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  incompatible  types	69	None	replace
75	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.HOUR_OF_DAY)+  1;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.HOUR_OF_DAY)+  1;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.HOUR_OF_DAY)+  1;	  Integer    d    =    end.get(Calendar.HOUR_OF_DAY);    	non-compiled	[CE]  incompatible  types	69	None	replace
76	[BUG]  [BUGGY]  Tag  dev  =  tokens.get(d);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  dev  =  tokens.get(d);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  dev  =  tokens.get(d);	  Tag    m    =    d.get(tokens);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
77	[BUG]  [BUGGY]  Tag  sibling  =  tokens.get(d);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  sibling  =  tokens.get(d);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  sibling  =  tokens.get(d);	  Tag    m    =    d.get(tokens);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
78	[BUG]  [BUGGY]  Tags  d  +=  24  *  years;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  +=  24  *  years;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  +=  24  *  years;	  Tags    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	128	None	replace
79	[BUG]  [BUGGY]  Tags  d  +=  24  *  days  +  1;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  +=  24  *  days  +  1;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  +=  24  *  days  +  1;	  Tags    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	128	None	replace
80	[BUG]  [BUGGY]  Tags  d  +=  24  *  months;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tags  d  +=  24  *  months;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tags  d  +=  24  *  months;	  Tags    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	128	None	replace
81	[BUG]  [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  M)&&!Token.containsTokenWithValue(tokens,  d))  {  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  M)&&!Token.containsTokenWithValue(tokens,  d))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	DurationFormatUtils.copyPeriodToString(tokens,  M)&&!Token.containsTokenWithValue(tokens,  d))  {	  DurationFormatUtils.copyPeriodToString(tokens,    d)&&!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  not  a  statement	85	None	replace
82	[BUG]  [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  H)&&!Token.containsTokenWithValue(tokens,  d))  {  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  H)&&!Token.containsTokenWithValue(tokens,  d))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	DurationFormatUtils.copyPeriodToString(tokens,  H)&&!Token.containsTokenWithValue(tokens,  d))  {	  DurationFormatUtils.copyPeriodToString(tokens,    d)&&!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  not  a  statement	85	None	replace
83	[BUG]  [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  months)&&!Token.containsTokenWithValue(tokens,  M))  {  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  months)&&!Token.containsTokenWithValue(tokens,  M))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	DurationFormatUtils.copyPeriodToString(tokens,  months)&&!Token.containsTokenWithValue(tokens,  M))  {	  DurationFormatUtils.copyPeriodToString(tokens,    d)&&!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  not  a  statement	85	None	replace
84	[BUG]  [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  d)&&!Token.containsTokenWithValue(tokens,  M))  {  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  DurationFormatUtils.copyPeriodToString(tokens,  d)&&!Token.containsTokenWithValue(tokens,  M))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	DurationFormatUtils.copyPeriodToString(tokens,  d)&&!Token.containsTokenWithValue(tokens,  M))  {	  DurationFormatUtils.copyPeriodToString(tokens,    d)&&!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  not  a  statement	85	None	replace
85	[BUG]  [BUGGY]  if(!Token.containsTokenWithValue(tokens,  M))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  if(!Token.containsTokenWithValue(tokens,  M))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	if(!Token.containsTokenWithValue(tokens,  M))  {	          if(!Token.containsTokenWithValue(tokens,    D))    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
86	[BUG]  [BUGGY]  if(!Token.containsTokenWithValue(tokens,  J))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  if(!Token.containsTokenWithValue(tokens,  J))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	if(!Token.containsTokenWithValue(tokens,  J))  {	          if(!Token.containsTokenWithValue(tokens,    D))    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
87	[BUG]  [BUGGY]  if(!Token.containsTokenWithValue(tokens,  S))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  if(!Token.containsTokenWithValue(tokens,  S))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	if(!Token.containsTokenWithValue(tokens,  S))  {	          if(!Token.containsTokenWithValue(tokens,    D))    {    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
89	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
91	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
93	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
94	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
95	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
96	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  L  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        H))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  L	13	None	add
97	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  24  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days    +=    24    *    days;    days  +=  24  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
98	[BUG]  [BUGGY]  days  +=  24  *  days;  days  +=  24  *  days;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  24  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days    +=    24    *    days;    days  +=  24  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
99	[BUG]  [BUGGY]  days  +=  24  *  days;  Days  +=  24  *  days;  [CE]  cannot  find  symbol  Days  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  Days  +=  24  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days    +=    24    *    days;    Days  +=  24  *  days;	  	non-compiled	[CE]  cannot  find  symbol  Days	2	None	add
100	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  25  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days    +=    24    *    days;    days  +=  25  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
101	[BUG]  [BUGGY]  days  +=  24  *  days;  days  +=  25  *  days;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  25  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days    +=    24    *    days;    days  +=  25  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  48  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days    +=    24    *    days;    days  +=  48  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
103	[BUG]  [BUGGY]  days  +=  24  *  days;  days  +=  48  *  days;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  48  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days    +=    24    *    days;    days  +=  48  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  12  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days    +=    24    *    days;    days  +=  12  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
105	[BUG]  [BUGGY]  days  +=  24  *  days;  days  +=  12  *  days;  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  days;  days  +=  12  *  days;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days    +=    24    *    days;    days  +=  12  *  days;	  	compilable	  [FE]  ComparisonFailure  	2	1	add
106	[BUG]  [BUGGY]  Hour  d  +=  24  *  months;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Hour  d  +=  24  *  months;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Hour  d  +=  24  *  months;	  d    +=    24    *    months;    	non-compiled	[CE]  ';'  expected	102	None	replace
107	[BUG]  [BUGGY]  Tag  d  +=  24  *  days  +  1;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  +=  24  *  days  +  1;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  +=  24  *  days  +  1;	  Tag    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	68	None	replace
108	[BUG]  [BUGGY]  Tag  d  +=  24  *  years;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  +=  24  *  years;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  +=  24  *  years;	  Tag    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	68	None	replace
109	[BUG]  [BUGGY]  Tag  d  +=  24  *  months;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  d  +=  24  *  months;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  d  +=  24  *  months;	  Tag    d    +=    24    *    days;    	non-compiled	[CE]  ';'  expected	68	None	replace
110	[BUG]  [BUGGY]  Hour  d  +=  24  *  years;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Hour  d  +=  24  *  years;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Hour  d  +=  24  *  years;	  d    +=    24    *    years;    	non-compiled	[CE]  ';'  expected	101	None	replace
111	[BUG]  [BUGGY]  Tag  m  =  end.get(Calendar.DAY_OF_YEAR)-  start.get(Calendar.DAY_OF_YEAR);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Tag  m  =  end.get(Calendar.DAY_OF_YEAR)-  start.get(Calendar.DAY_OF_YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Tag  m  =  end.get(Calendar.DAY_OF_YEAR)-  start.get(Calendar.DAY_OF_YEAR);	  Tag    m    =    end.get(Calendar.DAY_OF_YEAR);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
112	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));	  Integer    d    =    tokens.get(Calendar.YEAR,    start.get(Calendar.YEAR));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
113	[BUG]  [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  start.get(Calendar.YEAR,  tokens.get(Calendar.YEAR));	  Integer    d    =    tokens.get(Calendar.YEAR,    start.get(Calendar.YEAR));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
114	[BUG]  [BUGGY]  Integer  d  =  tokens.get(Calendar.YEAR,  end.get(Calendar.YEAR));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  tokens.get(Calendar.YEAR,  end.get(Calendar.YEAR));  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  tokens.get(Calendar.YEAR,  end.get(Calendar.YEAR));	  Integer    d    =    tokens.get(Calendar.YEAR,    start.get(Calendar.YEAR));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
115	[BUG]  [BUGGY]  Hours  +=  24  *  days  +  1;  [CE]  cannot  find  symbol  Hours  [FE]              ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Hours  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Hours  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    Hours    +=    24    *    days    +    1;    	non-compiled	[CE]  cannot  find  symbol  Hours	62	None	replace
116	[BUG]  [BUGGY]  Hours  +=  24  *  Days  +  1;  [CE]  cannot  find  symbol  Hours  [FE]                ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Hours  +=  24  *  Days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Hours  +=  24  *  Days  +  1;	  hours    +=    24    *    days    +    1;    Hours    +=    24    *    days    +    1;    	non-compiled	[CE]  cannot  find  symbol  Hours	62	None	replace
117	[BUG]  [BUGGY]  Days  +=  24  *  days  +  1;  [CE]  cannot  find  symbol  Days  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Days  +=  24  *  days  +  1;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Days  +=  24  *  days  +  1;	  hours    +=    24    *    days    +    1;    Hours    +=    24    *    days    +    1;    	non-compiled	[CE]  cannot  find  symbol  Days	62	None	replace
118	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days  +=  24  *  years;	  hours    +=    24    *    years;    days    +=    24    *    years;    	compilable	  [FE]  ComparisonFailure  	81	1	replace
119	[BUG]  [BUGGY]  days  +=  24  *  years;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  24  *  years;	  hours    +=    24    *    years;    days    +=    24    *    years;    	compilable	  [FE]  ComparisonFailure  	81	1	replace
120	[BUG]  [BUGGY]  days  +=  24  *  d;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  d;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  24  *  d;	  hours    +=    24    *    years;    days    +=    24    *    years;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	81	None	replace
121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  365  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days  +=  365  *  years;	  hours    +=    24    *    years;    days    +=    24    *    years;    	compilable	  [FE]  ComparisonFailure  	81	1	replace
122	[BUG]  [BUGGY]  days  +=  365  *  years;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  365  *  years;  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  365  *  years;	  hours    +=    24    *    years;    days    +=    24    *    years;    	compilable	  [FE]  ComparisonFailure  	81	1	replace
123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
124	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
125	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	49	None	add
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
127	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
129	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
131	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        S))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	49	1	add
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  months;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days  +=  24  *  months;	  days    +=    24    *    hours;    	compilable	  [FE]  ComparisonFailure  	7	1	replace
133	[BUG]  [BUGGY]  days  +=  24  *  months;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  24  *  months;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  24  *  months;	  days    +=    24    *    hours;    	compilable	  [FE]  ComparisonFailure  	7	1	replace
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  60  *  hours;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	days  +=  60  *  hours;	  days    +=    24    *    hours;    	compilable	  [FE]  ComparisonFailure  	7	1	replace
135	[BUG]  [BUGGY]  days  +=  60  *  hours;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  days  +=  60  *  hours;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	days  +=  60  *  hours;	  days    +=    24    *    hours;    	compilable	  [FE]  ComparisonFailure  	7	1	replace
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
137	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
138	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
139	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  60  *  days;  months  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
140	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  60  *  days;  months  =  0;  }  [CE]  cannot  find  symbol  L  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  L))  {  days  +=  60  *  days;  months  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  L	115	None	add
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
142	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  60  *  days;  months  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  60  *  days;  months  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  60  *  days;  months  =  0;  }  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,    S))    {    days    +=    60    *    days;    months    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  60  *  days;  months  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	115	2	add
143	[BUG]  [BUGGY]  Integer  d  =  start.get(Calendar.HOUR_OF_DAY)+  1;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  start.get(Calendar.HOUR_OF_DAY)+  1;  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  start.get(Calendar.HOUR_OF_DAY)+  1;	  Integer    d    =    tokens.get(Calendar.HOUR_OF_DAY)+    1;    	non-compiled	[CE]  incompatible  types	71	None	replace
144	[BUG]  [BUGGY]  if(!Token.containsTokenWithValue(tokens,  Y))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  if(!Token.containsTokenWithValue(tokens,  Y))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	if(!Token.containsTokenWithValue(tokens,  Y))  {	          if(!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
145	[BUG]  [BUGGY]  if(!Token.containsTokenWithValue(tokens,  m))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  if(!Token.containsTokenWithValue(tokens,  m))  {  [BUGGY]      days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	if(!Token.containsTokenWithValue(tokens,  m))  {	          if(!Token.containsTokenWithValue(tokens,    d))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
146	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
147	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
149	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
150	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	39	None	add
151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
152	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
153	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
154	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        M))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    H))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	39	1	add
155	[BUG]  [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  tokens);  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  start.get(Calendar.YEAR,  tokens);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  start.get(Calendar.YEAR,  tokens);	  Integer    d    =    tokens.get(Calendar.YEAR,    start);    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	135	None	replace
156	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  start);  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.YEAR,  start);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.YEAR,  start);	  Integer    d    =    tokens.get(Calendar.YEAR,    start);    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	135	None	replace
157	[BUG]  [BUGGY]  Integer  d  =  tokens.get(Calendar.YEAR,  start.get(Calendar.DAY_OF_YEAR));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  tokens.get(Calendar.YEAR,  start.get(Calendar.DAY_OF_YEAR));  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  tokens.get(Calendar.YEAR,  start.get(Calendar.DAY_OF_YEAR));	  Integer    d    =    tokens.get(Calendar.YEAR,    start);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
159	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
161	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  H))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
163	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	add	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
165	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  S))  {  days  +=  24  *  days;  days  =  0;  }	  	compilable	  [FE]  ComparisonFailure  	123	1	add
166	[BUG]  [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [CE]  cannot  find  symbol  D  [FE]            ComparisonFailure    [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]          if(!Token.containsTokenWithValue(tokens,    d))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  M))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	                if(!Token.containsTokenWithValue(tokens,        d))        {        days        +=        24        *        days;        days        =        0;        }        if(!Token.containsTokenWithValue(tokens,    M))    {    days    +=    24    *    days;    days    =    0;    }    if(!Token.containsTokenWithValue(tokens,  d))  {  days  +=  24  *  days;  days  =  0;  }  if(!Token.containsTokenWithValue(tokens,  D))  {  days  +=  24  *  days;  days  =  0;  }	  	non-compiled	[CE]  cannot  find  symbol  D	123	None	add
167	[BUG]  [BUGGY]  Integer  d  =  end.get(Calendar.YEAR)-  tokens.get(Calendar.YEAR);  [timeout]  [FE]                  ComparisonFailure      [CONTEXT]        days  +=  365  *  years;  years  =  0;  }  }  if  (!Token.containsTokenWithValue(tokens,  M))  {  days  +=  end.get(Calendar.DAY_OF_YEAR)  -  start.get(Calendar.DAY_OF_YEAR);  months  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  d))  {      [BUGGY]  Integer  d  =  end.get(Calendar.YEAR)-  tokens.get(Calendar.YEAR);  [BUGGY]      hours  +=  24  *  days;  days  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  H))  {  minutes  +=  60  *  hours;  hours  =  0;  }  if  (!Token.containsTokenWithValue(tokens,  m))  {  seconds  +=  60  *  minutes;  minutes  =  0;  }  [CLASS]  DurationFormatUtils  Token  [METHOD]  formatPeriod  [RETURN_TYPE]  String  long  startMillis  long  endMillis  String  format  boolean  padWithZeros  TimeZone  timezone  [VARIABLES]  TimeZone  timezone  boolean  padWithZeros  Token[]  tokens  Calendar  end  start  Object  H  M  S  d  m  s  value  y  String  ISO_EXTENDED_FORMAT_PATTERN  duration  format  tmp  int  count  days  hours  milliseconds  minutes  months  seconds  years  long  endMillis  millis  startMillis  	projects/Lang63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java	0.7071067811865475	344	344	1	replace	Integer  d  =  end.get(Calendar.YEAR)-  tokens.get(Calendar.YEAR);	  Integer    d    =    tokens.get(Calendar.YEAR)-    start.get(Calendar.YEAR);    	non-compiled	[timeout]	98	None	replace
