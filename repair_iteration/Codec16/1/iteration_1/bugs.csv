bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
15	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
17	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
19	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);		compilable	  [FE]  NullPointerException  	2	1	add
20	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);		compilable	  [FE]  NullPointerException  	2	1	add
21	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  sep  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad.length);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
22	[BUG]  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK;  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK;		non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	2	None	add
23	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  sep  [FE]          IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
24	[BUG]  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]            IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad;  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad;		non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	2	None	add
25	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length);  [CE]  byte  cannot  be  dereferenced  [FE]              IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length);		non-compiled	[CE]  byte  cannot  be  dereferenced	2	None	add
26	[BUG]  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length;  [CE]  byte  cannot  be  dereferenced  [FE]                IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length;  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length;		non-compiled	[CE]  byte  cannot  be  dereferenced	2	None	add
27	[BUG]  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length);  [CE]  byte  cannot  be  dereferenced  [FE]                  IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length);		non-compiled	[CE]  byte  cannot  be  dereferenced	2	None	add
28	[BUG]  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  SCRIPT_SEPARATOR  [FE]                    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);		non-compiled	[CE]  cannot  find  symbol  SCRIPT_SEPARATOR	2	None	add
29	[BUG]  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  SCRIPT_SEPARATOR  [FE]                      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);		non-compiled	[CE]  cannot  find  symbol  SCRIPT_SEPARATOR	2	None	add
30	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
31	[BUG]  [BUGGY]    this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad;  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad;		non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	2	None	add
32	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);		compilable	  [FE]  NullPointerException  	2	1	add
33	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);		compilable	  [FE]  NullPointerException  	2	1	add
34	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  sep  [FE]          IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.decodeSize,  0,  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.decodeSize,  0,  pad);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
35	[BUG]  [BUGGY]    if(useHex)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  }  [CE]  cannot  find  symbol  sep  [FE]            IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    if(useHex)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    if(useHex)  {  System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  }		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
36	[BUG]  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  SCRIPT_SEPARATOR  [FE]              IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);		non-compiled	[CE]  cannot  find  symbol  SCRIPT_SEPARATOR	2	None	add
37	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);		compilable	  [FE]  NullPointerException  	2	1	add
38	[BUG]  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]                IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);		compilable	  [FE]  NullPointerException  	2	1	add
39	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
41	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
43	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
45	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineLength);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
46	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  cannot  find  symbol  sep  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  lineLength  -  pad);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
47	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  sep  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
48	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]          IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
49	[BUG]  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  sep  [FE]            IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]    System.arraycopy(sep,  0,  this.lineSeparator,  1,  pad);  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	    System.arraycopy(sep,  0,  this.lineSeparator,  1,  pad);		non-compiled	[CE]  cannot  find  symbol  sep	2	None	add
50	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
54	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException  [CONTEXT]  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");	throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace ");  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
