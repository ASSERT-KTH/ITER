bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	40	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
6	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
9	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
11	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padding  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
14	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
15	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
17	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
18	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  decodeSeparator  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	38	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  decodeSep  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	38	None	replace
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
21	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
22	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.useHex);  [CE]  cannot  find  symbol  useHex  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.useHex);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.useHex);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  useHex	38	None	replace
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
24	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  <identifier>  expected	3	None	add
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.warning( "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	13	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	13	None	add
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	13	None	add
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	13	None	add
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwAsIOException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwAsIOException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throwAsIOException( "Decode  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	13	None	add
34	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  text  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  text	47	None	replace
35	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
36	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
37	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  separator  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  separator	47	None	replace
38	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
39	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
40	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
41	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  buffer  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  buffer	47	None	replace
43	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
44	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	47	1	replace
45	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
46	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
47	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
48	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineLength);  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
49	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
50	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [FE]  NullPointerException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
51	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  text  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  cannot  find  symbol  text	45	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  buffer  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  cannot  find  symbol  buffer	45	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  separator  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  cannot  find  symbol  separator	45	None	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
55	[BUG]  [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	compilable	  [FE]  NullPointerException  	45	1	replace
56	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	20	1	replace
57	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	20	1	replace
58	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decodeSep  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	20	None	replace
59	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
61	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	55	None	replace
64	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
66	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	55	None	replace
67	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
69	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
70	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
71	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	55	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	2	None	replace
73	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
75	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
77	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	2	1	replace
80	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
81	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
83	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
84	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	14	None	replace
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
88	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
89	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
93	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
94	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
95	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
96	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
97	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
98	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	16	None	replace
99	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
100	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
104	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
107	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
109	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
110	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
111	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
112	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
113	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
114	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	36	1	replace
115	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decodeSeparator  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	36	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  chunk  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  chunk	36	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  Chunk_SEPARATOR  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  Chunk_SEPARATOR	36	None	replace
118	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
119	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
120	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
121	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
122	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);  [CE]  int  cannot  be  dereferenced  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sep.length);  [CE]  cannot  find  symbol  sep  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sep.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.sep.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  sep	27	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.desc.length);  [CE]  cannot  find  symbol  desc  [FE]                              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.desc.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.desc.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  desc	27	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize.length);  [CE]  int  cannot  be  dereferenced  [FE]                                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  text  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  text	48	None	replace
127	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	48	1	replace
128	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	48	1	replace
129	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  separator  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  separator	48	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  buffer  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  buffer	48	None	replace
131	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ",  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	44	None	replace
132	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
133	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
134	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
135	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
136	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: "  +  pad);  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
137	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
138	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Whitespace  must  not  be  in  alphabet  or  blackspace  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  java.lang.IllegalArgumentException:  Whitespace  must  not  be  in  alphabet  or  blackspace  	44	1	replace
139	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");  [FE]  java.lang.IllegalArgumentException:  Whitespace  must  not  be  in  alphabet  or  blackspace  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace, ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  java.lang.IllegalArgumentException:  Whitespace  must  not  be  in  alphabet  or  blackspace  	44	1	replace
140	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace? ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace? ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace? ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace? ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace? ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
142	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  cannot  find  symbol  text  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  cannot  find  symbol  text	46	None	replace
144	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	compilable	  [FE]  NullPointerException  	46	1	replace
145	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  pad);  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	compilable	  [FE]  NullPointerException  	46	1	replace
146	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  1);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
148	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0  -  pad);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
150	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  cannot  find  symbol  separator  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  cannot  find  symbol  separator	46	None	replace
151	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
152	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
153	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	18	None	replace
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
156	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
158	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
159	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	18	None	replace
160	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
161	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace  for  pad: "  +  pad);	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
162	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	11	None	add
163	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	11	None	add
164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	11	None	add
165	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwable( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwable( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throwable( "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    Throwables.warning( "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	add
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	54	None	add
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	54	None	add
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	54	None	add
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	54	None	add
171	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.log( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	add
172	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwable( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throwable( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throwable( "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	54	None	add
173	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_UNENCODED_BLOCK  +  pad;  [CE]  cannot  find  symbol  BITS_PER_UNENCODED_BLOCK  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_UNENCODED_BLOCK  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_UNENCODED_BLOCK  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_UNENCODED_BLOCK	31	None	replace
174	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BYTE  +  pad;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BYTE  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BYTE  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	31	None	replace
175	[BUG]  [BUGGY]  this.decodeSize  =  pad  +  BITS_PER_ENCODED_BLOCK;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  pad  +  BITS_PER_ENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  pad  +  BITS_PER_ENCODED_BLOCK;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
176	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad.length;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad.length;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad.length;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
177	[BUG]  [BUGGY]  this.decodeSize  =  pad  +  BITS_PER_UNENCODED_BLOCK;  [CE]  cannot  find  symbol  BITS_PER_UNENCODED_BLOCK  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  pad  +  BITS_PER_UNENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  pad  +  BITS_PER_UNENCODED_BLOCK;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_UNENCODED_BLOCK	31	None	replace
178	[BUG]  [BUGGY]  this.decodeSize  =  MASK_5BITS  +  pad;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MASK_5BITS  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MASK_5BITS  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	31	None	replace
179	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_UNKNOWN_BYTE  +  pad;  [CE]  cannot  find  symbol  BITS_PER_UNKNOWN_BYTE  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_UNKNOWN_BYTE  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_UNKNOWN_BYTE  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_UNKNOWN_BYTE	31	None	replace
180	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_EENCODED_BYTE  +  pad;  [CE]  cannot  find  symbol  BITS_PER_EENCODED_BYTE  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_EENCODED_BYTE  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_EENCODED_BYTE  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_EENCODED_BYTE	31	None	replace
181	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
182	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  not  a  statement	5	None	add
183	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  <identifier>  expected	5	None	add
184	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
186	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.wrap( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.wrap( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.wrap( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	5	None	add
187	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
189	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
190	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
191	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	8	None	replace
192	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
193	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
194	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
195	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
196	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
197	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
198	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
199	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
200	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
202	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  1;  [CE]  byte  cannot  be  dereferenced  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
203	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  2;  [CE]  byte  cannot  be  dereferenced  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  2;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  2;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
204	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  4;  [CE]  byte  cannot  be  dereferenced  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  4;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  4;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
205	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineSeparator.length;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineSeparator.length;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineSeparator.length;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	26	None	replace
206	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineLength;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineLength;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  lineLength;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	26	None	replace
207	[BUG]  [BUGGY]  this.decodeSize  =  pad  +  BYTES_PER_UNENCODED_BLOCK;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  pad  +  BYTES_PER_UNENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  pad  +  BYTES_PER_UNENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	26	None	replace
208	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad,  MASK_5BITS;  [CE]  ';'  expected  [FE]                                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad,  MASK_5BITS;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad,  MASK_5BITS;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  ';'  expected	26	None	replace
209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
210	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
211	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
212	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  1,  pad);  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
213	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
214	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  1,  pad);  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
215	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
216	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  this.decodeSize);  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
217	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  text  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  text	49	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  separator  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  separator	49	None	replace
219	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
220	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  lineLength);  [FE]  NullPointerException  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	compilable	  [FE]  NullPointerException  	49	1	replace
221	[BUG]  [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  chunk  [FE]                              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunk,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  chunk	49	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  1,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]                                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(sep,  0,  this.lineSeparator,  1,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(sep,  0,  this.lineSeparator,  1,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  sep	49	None	replace
223	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	41	None	add
224	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	41	None	add
225	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	41	None	add
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	41	None	add
227	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.log( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	41	None	add
228	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
229	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  blackspace. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
230	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
231	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  this  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
232	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
233	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
234	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	42	None	replace
235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
236	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
237	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
238	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
239	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
241	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
243	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace! ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
244	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	42	None	replace
245	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	15	None	add
246	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	15	None	add
247	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	15	None	add
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	15	None	add
249	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	29	1	replace
250	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [FE]  NullPointerException  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	29	1	replace
251	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	29	1	replace
252	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [FE]  NullPointerException  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	29	1	replace
253	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  padLength);  [CE]  cannot  find  symbol  padLength  [FE]                              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  padLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  padLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  padLength	29	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  chunk  [FE]                                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunk,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  chunk	29	None	replace
255	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  padLength);  [CE]  cannot  find  symbol  padLength  [FE]                                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  padLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  padLength);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  padLength	29	None	replace
256	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	51	1	replace
257	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace.   ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	51	1	replace
258	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	51	1	replace
259	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Alphabet  must  not  be  in  alphabet  or  whitespace.   ");	  throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	51	1	replace
260	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
261	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  pad);  [FE]  ArrayStoreException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
262	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
263	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad);  [FE]  ArrayStoreException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
264	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  decodeSep  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	34	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  text  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  text	34	None	replace
266	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.encodeSize,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.encodeSize,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
267	[BUG]  [BUGGY]  System.arraycopy(this.encodeSize,  0,  this.decodeSize,  0,  pad);  [FE]  ArrayStoreException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.encodeSize,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.encodeSize,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
268	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  buffer  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  buffer	34	None	replace
269	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  NullPointerException  	34	1	replace
270	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  pad);  [FE]  NullPointerException  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  NullPointerException  	34	1	replace
271	[BUG]  [BUGGY]  System.arraycopy(chunk,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  chunk  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunk,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunk,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  chunk	34	None	replace
272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
273	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: "  +  pad);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
274	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
275	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.   "  +  pad);	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
276	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
277	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Example: ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
278	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
279	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
280	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
281	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
282	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
283	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
284	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decodeSep  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	33	None	replace
285	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	9	None	add
286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	9	None	add
287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	9	None	add
288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	9	None	add
289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    Throwables.log( "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	9	None	add
290	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	50	None	add
291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  not  a  statement	50	None	add
292	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.throw  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  <identifier>  expected	50	None	add
293	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throwable  cause  =  new  IllegalArgumentException( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	50	None	add
294	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.warning( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.warning( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	50	None	add
295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.log( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	50	None	add
296	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.show( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.show( "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.show( "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	50	None	add
297	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
298	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
299	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decodeSeparator  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	19	None	add
300	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
301	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
302	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decodeSep  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  decodeSep	19	None	add
303	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSepator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decodeSepator  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeSepator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeSepator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  decodeSepator	19	None	add
304	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
305	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
306	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  line  [FE]                NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  line	19	None	add
307	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);	  	compilable	  [FE]  NullPointerException  	19	1	add
308	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);	  	compilable	  [FE]  NullPointerException  	19	1	add
309	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  sep  [FE]                    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  sep	19	None	add
310	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  label  [FE]                      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  label	19	None	add
311	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  unreachable  statement	43	None	add
312	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    Throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  not  a  statement	43	None	add
313	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  <identifier>  expected	43	None	add
314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  unreachable  statement	43	None	add
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	43	None	add
316	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
317	[BUG]  [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
318	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
319	[BUG]  [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
320	[BUG]  [BUGGY]  ||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  ||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
321	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	if(useHex)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
322	[BUG]  [BUGGY]  if(useHex)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(useHex)  {  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
323	[BUG]  [BUGGY]  allowSeparator)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [CE]  not  a  statement  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  allowSeparator)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	allowSeparator)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
324	[BUG]  [BUGGY]  nisip)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [CE]  not  a  statement  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  nisip)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	nisip)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
325	[BUG]  [BUGGY]  ||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  ||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	||  useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
326	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
327	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	1	None	add
328	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	1	None	add
329	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    Throwables.showWhitespace( "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	add
331	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  MASK_5BITS;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  MASK_5BITS;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  MASK_5BITS;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
332	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  1;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
333	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  -  1;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  -  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
334	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  2;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  2;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  2;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
335	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  sep;  [CE]  cannot  find  symbol  sep  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  sep;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  sep;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  sep	24	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	52	None	add
337	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  not  a  statement	52	None	add
338	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  <identifier>  expected	52	None	add
339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	52	None	add
340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  Throwables.log( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    Throwables.log( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	52	None	add
341	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  text  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  text	23	None	replace
342	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(pad,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	23	1	replace
343	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  lineLength);  [FE]  NullPointerException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	23	1	replace
344	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
345	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
346	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	10	None	replace
347	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
348	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
349	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
350	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
351	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
352	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
353	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
354	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
355	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
356	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	7	None	add
357	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	7	None	add
358	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    Throwables.log( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	add
359	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    Throwables.warning( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	7	None	add
360	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
361	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
362	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  decodeSeparator  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	37	None	add
363	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
364	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
365	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  1,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  1,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
366	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  1,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  1,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  1,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
367	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
368	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
369	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  sep  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(sep,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  sep	37	None	add
370	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
371	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [FE]  NullPointerException  [FE]                NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  1,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
372	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  line  [FE]                  NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  line	37	None	add
373	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad  -  1);	  	compilable	  [FE]  NullPointerException  	37	1	add
374	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad  -  1);  [FE]  NullPointerException  [FE]                    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad  -  1);	  	compilable	  [FE]  NullPointerException  	37	1	add
375	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	30	1	replace
376	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	30	1	replace
377	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  text  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  text	30	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  separator  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  separator	30	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  text  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(text,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(text,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  text	21	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  separator  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  separator	21	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad.length);  [CE]  byte  cannot  be  dereferenced  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  byte  cannot  be  dereferenced	21	None	replace
382	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  buffer  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  buffer	21	None	replace
383	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
384	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
385	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
386	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
387	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  pad);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,byte)	12	None	replace
388	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
389	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
390	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  pad);  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
391	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
392	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex: "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
393	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex: "  +  pad);  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex: "  +  pad);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
394	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
395	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
396	[BUG]  [BUGGY]  this.decodeSize  =  pad;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  pad;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
397	[BUG]  [BUGGY]  this.decodeSize  =  MASK_5BITS;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MASK_5BITS;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MASK_5BITS;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
398	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BYTE;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BYTE;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BYTE;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
399	[BUG]  [BUGGY]  this.decodeSize  -=  BYTES_PER_UNENCODED_BLOCK;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  -=  BYTES_PER_UNENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  -=  BYTES_PER_UNENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
400	[BUG]  [BUGGY]  this.decodeSize  =  MASK_5BITS  -  BYTES_PER_UNENCODED_BLOCK;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MASK_5BITS  -  BYTES_PER_UNENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MASK_5BITS  -  BYTES_PER_UNENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
401	[BUG]  [BUGGY]  this.decodeSize  =  MASK_5BITS  +  BYTES_PER_UNENCODED_BLOCK;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MASK_5BITS  +  BYTES_PER_UNENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MASK_5BITS  +  BYTES_PER_UNENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
402	[BUG]  [BUGGY]  this.decodeSize  =  MASK_5BITS  -  1;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MASK_5BITS  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MASK_5BITS  -  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
403	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	17	None	add
404	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	17	None	add
405	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	17	None	add
406	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	17	None	add
407	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad.length);  [CE]  byte  cannot  be  dereferenced  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  byte  cannot  be  dereferenced	25	None	replace
408	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length  -  1);  [CE]  byte  cannot  be  dereferenced  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad.length  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  byte  cannot  be  dereferenced	25	None	replace
409	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	25	1	replace
410	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [FE]  NullPointerException  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  -  1);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	25	1	replace
411	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
412	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
413	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
414	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
415	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decodeSeparator  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	32	None	add
416	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decodeSep  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  decodeSep	32	None	add
417	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.encodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  encodeSeparator  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.encodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.encodeSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  encodeSeparator	32	None	add
418	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.desecodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  desecodeSize  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.desecodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.desecodeSize,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  desecodeSize	32	None	add
419	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]                NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.sep,  0,  this.sep,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  sep	32	None	add
420	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  label  [FE]                  NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.label,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  label	32	None	add
421	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  line  [FE]                    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  line	32	None	add
422	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.in,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  in  [FE]                      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.in,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.in,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  in	32	None	add
423	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	39	None	add
424	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	39	None	add
425	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throwables.throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  <identifier>  expected	39	None	add
426	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.log( "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throwables.log( "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	39	None	add
427	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	39	None	add
428	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  Throwables  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwables.warning( "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throwables.warning( "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	39	None	add
429	[BUG]  [BUGGY]  System.arraycopy(HIDE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  HIDE_SEPARATOR  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(HIDE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(HIDE_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  HIDE_SEPARATOR	28	None	replace
430	[BUG]  [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  chunk  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunk,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  chunk	28	None	replace
431	[BUG]  [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  Chunk_SEPARATOR  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Chunk_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  Chunk_SEPARATOR	28	None	replace
432	[BUG]  [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);  [CE]  cannot  find  symbol  SCRIPT_SEPARATOR  [FE]                              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(SCRIPT_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  SCRIPT_SEPARATOR	28	None	replace
433	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  1;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
434	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "UsageHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
435	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad.length);  [CE]  byte  cannot  be  dereferenced  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  pad.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  byte  cannot  be  dereferenced	27	None	replace
436	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
437	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [FE]  NullPointerException  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.encodeSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	compilable	  [FE]  NullPointerException  	27	1	replace
438	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.padding.length);  [CE]  cannot  find  symbol  padding  [FE]                          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.padding.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.padding.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  padding	27	None	replace
439	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length  -  1);  [CE]  byte  cannot  be  dereferenced  [FE]                            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  pad.length  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  byte  cannot  be  dereferenced	27	None	replace
440	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  decodeSeparator  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	49	None	replace
441	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  hex  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  hex	49	None	replace
442	[BUG]  [BUGGY]  System.arraycopy(Hex,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  Hex  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Hex,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Hex,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  Hex	49	None	replace
443	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  3;  [CE]  byte  cannot  be  dereferenced  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  3;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  3;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
444	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  padLength;  [CE]  cannot  find  symbol  padLength  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  padLength;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  padLength;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  cannot  find  symbol  padLength	26	None	replace
445	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  buffer  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  buffer	38	None	replace
446	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
447	[BUG]  [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(pad,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    	compilable	  [FE]  NullPointerException  	38	1	replace
448	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  hex  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  hex	30	None	replace
449	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "Bad  space  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
450	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
451	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
452	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
453	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
454	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace. "  +  pad);	  throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	42	1	replace
455	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  hex  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  hex	48	None	replace
456	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
457	[BUG]  [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	compilable	  [FE]  NullPointerException  	33	1	replace
458	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  hex  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  hex	21	None	replace
459	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  hex  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  hex	23	None	replace
460	[BUG]  [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineLength);  [CE]  cannot  find  symbol  separator  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(separator,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	non-compiled	[CE]  cannot  find  symbol  separator	23	None	replace
461	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
462	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
463	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist: "  +  pad);	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
465	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
467	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
468	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	Throwables.throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
469	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
470	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
471	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  hex  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  hex	47	None	replace
472	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
473	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	18	1	replace
474	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
475	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	20	1	replace
476	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.decodeSize,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	compilable	  [FE]  NullPointerException  	20	1	replace
477	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decodeSeparator  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	20	None	replace
478	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad;  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad;	  	non-compiled	[CE]  ')'  expected	37	None	add
479	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(This.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  This  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(This.lineSeparator,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(This.lineSeparator,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  This	37	None	add
480	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	compilable	  [FE]  NullPointerException  	46	1	replace
481	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  pad);  [FE]  NullPointerException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	compilable	  [FE]  NullPointerException  	46	1	replace
482	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  cannot  find  symbol  hex  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  cannot  find  symbol  hex	46	None	replace
483	[BUG]  [BUGGY]  System.arraycopy(Hex,  0,  this.lineSeparator,  lineLength  -  pad);  [CE]  cannot  find  symbol  Hex  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Hex,  0,  this.lineSeparator,  lineLength  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Hex,  0,  this.lineSeparator,  lineLength  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  cannot  find  symbol  Hex	46	None	replace
484	[BUG]  [BUGGY]  If(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  If(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	If(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
485	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
486	[BUG]  [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  }  [FE]  NullPointerException  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.encodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
487	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	if(useHex)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
488	[BUG]  [BUGGY]  if(useHex)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  }  [FE]  NullPointerException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  if(useHex)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	if(useHex)  {  System.arraycopy(this.decodeSize,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	compilable	  [FE]  NullPointerException  	35	1	replace
489	[BUG]  [BUGGY]  logically(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [CE]  ';'  expected  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  logically(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	logically(useHex)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
490	[BUG]  [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [CE]  not  a  statement  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	safe)  {  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  }	      if(useHex)    {    System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    }    	non-compiled	[CE]  not  a  statement	35	None	replace
491	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	22	None	replace
492	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  -  1;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  -  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	22	None	replace
493	[BUG]  [BUGGY]  this.decodeSize  =  MITS_PER_ENCODED_BLOCK;  [CE]  cannot  find  symbol  MITS_PER_ENCODED_BLOCK  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  MITS_PER_ENCODED_BLOCK;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  MITS_PER_ENCODED_BLOCK;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  cannot  find  symbol  MITS_PER_ENCODED_BLOCK	22	None	replace
494	[BUG]  [BUGGY]  this.decodeSize  =  0;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  0;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  0;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
495	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  if(Decode  must  not  be  in  alphabet  or  whitespace   ")  {  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  if(Decode  must  not  be  in  alphabet  or  whitespace   ")  {  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  }  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    if(Decode  must  not  be  in  alphabet  or  whitespace   ")  {  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace   ");  }	  	non-compiled	[CE]  	13	None	add
496	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
497	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
498	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decoSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decoSeparator  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decoSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decoSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  decoSeparator	32	None	add
499	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  	compilable	  [FE]  NullPointerException  	32	1	add
500	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  -  1);	  	compilable	  [FE]  NullPointerException  	32	1	add
501	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  separator  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.separator,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  separator	32	None	add
502	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  	compilable	  [FE]  NullPointerException  	32	1	add
503	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize  +  1);	  	compilable	  [FE]  NullPointerException  	32	1	add
504	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]              NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  sep	32	None	add
505	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	11	None	add
506	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
507	[BUG]  [BUGGY]  System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  Hex_SEPARATOR  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  Hex_SEPARATOR	28	None	replace
508	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  blackspace ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  blackspace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  blackspace ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
510	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex   ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
511	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex   ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  for  useHex   ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
512	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  +  1);	  	compilable	  [FE]  NullPointerException  	19	1	add
513	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  +  1);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  +  1);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length  +  1);	  	compilable	  [FE]  NullPointerException  	19	1	add
514	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
515	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.lineLength,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
516	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [CE]  cannot  find  symbol  separator  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.separator,  0,  this.separator,  0,  this.separator.length);	  	non-compiled	[CE]  cannot  find  symbol  separator	19	None	add
517	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  hex  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  cannot  find  symbol  hex	45	None	replace
518	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
519	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
520	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
521	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
522	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
523	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  the  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
524	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  unreachable  statement	5	None	add
525	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
526	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  blackspace   ");	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
527	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "Bad  useHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
528	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
529	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwable  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  Throwable  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    Throwable  throw  new  IllegalArgumentException(   "Padding  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  not  a  statement	39	None	add
530	[BUG]  [BUGGY]  this.decodeSize  =  HEX_ENCODE_TABLE  +  pad;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  HEX_ENCODE_TABLE  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  HEX_ENCODE_TABLE  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	31	None	replace
531	[BUG]  [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  decodeSeparator  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSeparator,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSeparator,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSeparator	34	None	replace
532	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.encodeSize);  [CE]  cannot  find  symbol  decodeSep  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.encodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	34	None	replace
533	[BUG]  [BUGGY]  System.arraycopy(hex,  0,  this.decodeSize,  0,  pad);  [CE]  cannot  find  symbol  hex  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(hex,  0,  this.decodeSize,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(hex,  0,  this.decodeSize,  0,  pad);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  hex	34	None	replace
534	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.encodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
535	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.encodeSize);  [FE]  ArrayStoreException  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.encodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
536	[BUG]  [BUGGY]  System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  CHUNK_ENCODED_BLOCK  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  CHUNK_ENCODED_BLOCK	36	None	replace
537	[BUG]  [BUGGY]  System.arraycopy(CHUNK_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  CHUNK_ENCODE_TABLE  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_ENCODE_TABLE,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  CHUNK_ENCODE_TABLE	36	None	replace
538	[BUG]  [BUGGY]  System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  Hex_SEPARATOR  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(Hex_SEPARATOR,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  Hex_SEPARATOR	36	None	replace
539	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "Whitespace  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
540	[BUG]  [BUGGY]  System.arraycopy(padding,  0,  this.lineSeparator,  0,  pad.length);  [CE]  cannot  find  symbol  padding  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(padding,  0,  this.lineSeparator,  0,  pad.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(padding,  0,  this.lineSeparator,  0,  pad.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  padding	25	None	replace
541	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.padding.length);  [CE]  cannot  find  symbol  padding  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.padding.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.padding.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  padding	25	None	replace
542	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
543	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace   ");  Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    Throwable  cause  =  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
544	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
545	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.decodeSize);  [FE]  ArrayStoreException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	compilable	  [FE]  ArrayStoreException  	34	1	replace
546	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.padding);  [CE]  cannot  find  symbol  padding  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.padding);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.padding);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  padding	34	None	replace
547	[BUG]  [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decodeSep  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSep,  0,  this.decodeSize,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decodeSep	34	None	replace
548	[BUG]  [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.pivot);  [CE]  cannot  find  symbol  pivot  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.pivot);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decodeSize,  0,  this.decodeSize,  0,  this.pivot);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  pivot	34	None	replace
549	[BUG]  [BUGGY]  System.arraycopy(this.decode,  0,  this.decodeSize,  0,  this.encodeSize);  [CE]  cannot  find  symbol  decode  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decode,  0,  this.decodeSize,  0,  this.encodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decode,  0,  this.decodeSize,  0,  this.encodeSize);	      System.arraycopy(sep,    0,    this.decodeSize,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  decode	34	None	replace
550	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  line  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad);    	non-compiled	[CE]  cannot  find  symbol  line	30	None	replace
551	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  useHex);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
552	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "UsageHex  must  not  be  in  alphabet  or  whitespace "  +  useHex);	  throw    new    IllegalArgumentException(   "UsageHex    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	55	1	replace
553	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
554	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace  of  type ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Decode  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	14	1	replace
555	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
556	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  of  type ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
557	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  sep);  [CE]  cannot  find  symbol  sep  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  sep);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace ",  sep);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	non-compiled	[CE]  cannot  find  symbol  sep	12	None	replace
558	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  useHex);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
559	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  useHex);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "The  pad  must  not  be  in  alphabet  or  whitespace "  +  useHex);	  throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
560	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decode  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  decode	32	None	add
561	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
562	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
563	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
564	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.decodeSize);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    System.arraycopy(CHUNK_SEPARATOR,  0,  this.decodeSize,  0,  this.decodeSize);	  	compilable	  [FE]  NullPointerException  	32	1	add
565	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Bytes  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  sep	5	None	add
566	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  sep;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  sep;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  sep;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
567	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  -  1;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  -  1;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
568	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  padLength;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  padLength;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  padLength;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
569	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.lineSeparator;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.lineSeparator;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.lineSeparator;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
570	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  +  1;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  +  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  pad  +  1;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
571	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.sep;  [CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.sep;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_ENCODED_BLOCK  +  this.sep;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_ENCODED_BLOCK	31	None	replace
572	[BUG]  [BUGGY]  this.decodeSize  =  BITS_PER_DECODED_BLOCK  +  pad;  [CE]  cannot  find  symbol  BITS_PER_DECODED_BLOCK  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BITS_PER_DECODED_BLOCK  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BITS_PER_DECODED_BLOCK  +  pad;	      this.decodeSize    =    BITS_PER_ENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  BITS_PER_DECODED_BLOCK	31	None	replace
573	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decode  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  decode	19	None	add
574	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
575	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	compilable	  [FE]  NullPointerException  	19	1	add
576	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Decode  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Decode    must    not    be    in    alphabet    or    whitespace   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  sep	13	None	add
577	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	  	non-compiled	[CE]  cannot  find  symbol  sep	50	None	add
578	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace.   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "pad    must    not    be    in    alphabet    or    whitespace.   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  sep	50	None	add
579	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_ENCODED_BLOCK  +  pad;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_ENCODED_BLOCK  +  pad;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_ENCODED_BLOCK  +  pad;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
580	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  -  1;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  -  1;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	22	None	replace
581	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  5;  [CE]  byte  cannot  be  dereferenced  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  5;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  5;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
582	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  6;  [CE]  byte  cannot  be  dereferenced  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  6;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad.length  -  6;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad.length;    	non-compiled	[CE]  byte  cannot  be  dereferenced	26	None	replace
583	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
584	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  of  type ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  space  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Bad    space    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	16	1	replace
585	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  2;  [CE]  variable  decodeSize  might  already  have  been  assigned  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  2;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  pad  +  2;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  variable  decodeSize  might  already  have  been  assigned	24	None	replace
586	[BUG]  [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  this.sep;  [CE]  cannot  find  symbol  sep  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  this.sep;  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	this.decodeSize  =  BYTES_PER_UNENCODED_BLOCK  +  this.sep;	      this.decodeSize    =    BYTES_PER_UNENCODED_BLOCK    +    pad;    	non-compiled	[CE]  cannot  find  symbol  sep	24	None	replace
587	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
588	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
589	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again! ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
590	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again! ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Try  again! ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
591	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
592	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
593	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
594	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bad  useHex  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  pad  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Bad    useHex    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	53	1	replace
595	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  1,  pad);  [CE]  cannot  find  symbol  buffer  [FE]                IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(buffer,  0,  this.lineSeparator,  1,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(buffer,  0,  this.lineSeparator,  1,  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    1,    pad);    	non-compiled	[CE]  cannot  find  symbol  buffer	49	None	replace
596	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  chunkSeparator  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(chunkSeparator,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  chunkSeparator	36	None	replace
597	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
598	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Try  again. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Try  again. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
599	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
600	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace.  Please  check  that  your  useHex  is  null. ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	6	1	replace
601	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace  (The  pad  must  not  be  in  alphabet  or  whitespace   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace   ");  throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace  (The  pad  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "The    pad    must    not    be    in    alphabet    or    whitespace   ");    throw  new  IllegalArgumentException(   "The  pad  must  not  be  in  alphabet  or  whitespace  (The  pad  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  unreachable  statement	11	None	add
602	[BUG]  [BUGGY]  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  decode  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.decodeSize);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.decodeSize);    	non-compiled	[CE]  cannot  find  symbol  decode	33	None	replace
603	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [CE]  cannot  find  symbol  line  [FE]        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    this.lineLength);    	non-compiled	[CE]  cannot  find  symbol  line	45	None	replace
604	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.baseSeparator.length);  [CE]  cannot  find  symbol  baseSeparator  [FE]                  IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.baseSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  baseSeparator	25	None	replace
605	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);  [CE]  cannot  find  symbol  sep  [FE]                    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  this.sep.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  sep	25	None	replace
606	[BUG]  [BUGGY]  System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  CHUNK_ENCODED_BLOCK  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_ENCODED_BLOCK,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(SCRIPT_SEPARATOR,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  CHUNK_ENCODED_BLOCK	28	None	replace
607	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  decodeSep  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeSep,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  decodeSep	37	None	add
608	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  decode  [FE]      NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  decode	37	None	add
609	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
610	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.decodeTable,  0,  this.lineSeparator,  0,  pad);	  	compilable	  [FE]  NullPointerException  	37	1	add
611	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.useHex,  0,  this.lineSeparator,  0,  pad);  [CE]  cannot  find  symbol  useHex  [FE]          NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.useHex,  0,  this.lineSeparator,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.useHex,  0,  this.lineSeparator,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  useHex	37	None	add
612	[BUG]  [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.sep,  0,  this.sep,  0,  pad);  [CE]  cannot  find  symbol  sep  [FE]            NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]      System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  0,  pad);  System.arraycopy(this.sep,  0,  this.sep,  0,  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	        System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    pad);    System.arraycopy(this.sep,  0,  this.sep,  0,  pad);	  	non-compiled	[CE]  cannot  find  symbol  sep	37	None	add
613	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  if(UseHex  <  not  be  in  alphabet  or  whitespace)  {  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  if(UseHex  <  not  be  in  alphabet  or  whitespace)  {  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  }  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    if(UseHex  <  not  be  in  alphabet  or  whitespace)  {  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  }	  	non-compiled	[CE]  	41	None	add
614	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  whitespace.length);  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [CE]  cannot  find  symbol  sep  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "UseHex  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  whitespace.length);  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "UseHex    must    not    be    in    alphabet    or    whitespace   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  whitespace.length);  throw  new  IllegalArgumentException( "UseHex  must  not  be  in  alphabet  or  whitespace   ");	  	non-compiled	[CE]  cannot  find  symbol  sep	41	None	add
615	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  this.decodeSize);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  this.decodeSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  this.decodeSize);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
616	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  this.decodeSize  -  pad);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  this.decodeSize  -  pad);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  this.decodeSize  -  pad);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	46	None	replace
617	[BUG]  [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  base64);  [CE]  cannot  find  symbol  base64  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  base64);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.lineSeparator,  0,  this.lineSeparator,  lineLength  -  base64);	      System.arraycopy(sep,    0,    this.lineSeparator,    lineLength    -    pad);    	non-compiled	[CE]  cannot  find  symbol  base64	46	None	replace
618	[BUG]  [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  line  [FE]          IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.line,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  line	21	None	replace
619	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
620	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace. ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
622	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Padded  space  must  not  be  in  alphabet  or  whitespace ");	  throw    new    IllegalArgumentException(   "Padding    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	40	1	replace
623	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
624	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  whitespace.  Please  check  that  it  does. ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    whitespace.   ");    	compilable	  [FE]  IllegalArgumentException  	4	1	replace
625	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
626	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace  of  type ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
627	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
628	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Bytes  must  not  be  in  alphabet  or  whitespace: ");	  throw    new    IllegalArgumentException(   "Bytes    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	8	1	replace
629	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
630	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace  of  type ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace  of  type ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Sep  must  not  be  in  alphabet  or  whitespace  of  type ");	  throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    	compilable	  [FE]  IllegalArgumentException  	10	1	replace
631	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	23	1	replace
632	[BUG]  [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  lineLength);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(decodeSize,  0,  this.lineSeparator,  0,  lineLength);	      System.arraycopy(sep,    0,    this.lineSeparator,    0,    lineLength);    	compilable	  [FE]  NullPointerException  	23	1	replace
633	[BUG]  [BUGGY]  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [CE]  cannot  find  symbol  decode  [FE]    NullPointerException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(this.decode,  0,  this.lineSeparator,  0,  this.lineSeparator.length);	      System.arraycopy(this.lineSeparator,    0,    this.lineSeparator,    0,    this.lineSeparator.length);    	non-compiled	[CE]  cannot  find  symbol  decode	20	None	replace
634	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
635	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw  new  IllegalArgumentException( "Whitespace  must  not  be  in  alphabet  or  blackspace! ");	  throw    new    IllegalArgumentException(   "Whitespace    must    not    be    in    alphabet    or    blackspace   ");    	compilable	  [FE]  IllegalArgumentException  	44	1	replace
636	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.baseSeparator.length);  [CE]  cannot  find  symbol  baseSeparator  [FE]                      IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.baseSeparator.length);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.baseSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  baseSeparator	27	None	replace
637	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.deletionSize);  [CE]  cannot  find  symbol  deletionSize  [FE]                        IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.deletionSize);  [BUGGY]    throw  new  IllegalArgumentException(   "pad  must  not  be  in  alphabet  or  whitespace   ");  }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  this.lineSeparator,  0,  this.deletionSize);	      System.arraycopy(CHUNK_SEPARATOR,    0,    this.lineSeparator,    0,    pad.length);    	non-compiled	[CE]  cannot  find  symbol  deletionSize	27	None	replace
638	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [CE]  cannot  find  symbol  sep  [FE]    IllegalArgumentException    [CONTEXT]    this.encodeSize  =  BYTES_PER_ENCODED_BLOCK  +  lineSeparator.length;  this.lineSeparator  =  new  byte[lineSeparator.length];  System.arraycopy(lineSeparator,  0,  this.lineSeparator,  0,  lineSeparator.length);  }  else  {  this.encodeSize  =  BYTES_PER_ENCODED_BLOCK;  this.lineSeparator  =  null;  }  this.decodeSize  =  this.encodeSize  -  1;  if  (isInAlphabet(pad)  ||  isWhiteSpace(pad))  {    [BUGGY]  throw  new  IllegalArgumentException(   "Sep  must  not  be  in  alphabet  or  whitespace   ");  System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);  [BUGGY]    }  }  [CLASS]  Base32  [METHOD]  <init>  [RETURN_TYPE]  Base32(int,byte[],boolean,byte)  final  int  lineLength  final  byte[]  lineSeparator  final  boolean  useHex  final  byte  pad  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  ENCODE_TABLE  HEX_DECODE_TABLE  HEX_ENCODE_TABLE  decodeTable  encodeTable  lineSeparator  boolean  useHex  String  sep  int  BITS_PER_ENCODED_BYTE  BYTES_PER_ENCODED_BLOCK  BYTES_PER_UNENCODED_BLOCK  MASK_5BITS  decodeSize  encodeSize  lineLength  byte  pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	throw    new    IllegalArgumentException(   "Sep    must    not    be    in    alphabet    or    whitespace   ");    System.arraycopy(sep,  0,  this.lineSeparator,  0,  this.decodeSize);	  	non-compiled	[CE]  cannot  find  symbol  sep	9	None	add
