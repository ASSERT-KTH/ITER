bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalArgumentException("pad must not be in alphabet or whitespace"); [FE] IllegalArgumentException [CONTEXT] this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } this.decodeSize = this.encodeSize - 1; if (isInAlphabet(pad) || isWhiteSpace(pad)) { [BUGGY] throw new IllegalArgumentException("pad must not be in alphabet or whitespace"); [BUGGY] } } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	replace	
2	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } this.decodeSize = this.encodeSize - 1; if (isInAlphabet(pad) || isWhiteSpace(pad)) { [BUGGY] [BUGGY] throw new IllegalArgumentException("pad must not be in alphabet or whitespace"); } } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	1.0	309	309	1	add	
3	[BUG] [BUGGY] this(0, null, useHex, pad); [FE] IllegalArgumentException [CONTEXT] public Base32(final boolean useHex, final byte pad) { [BUGGY] this(0, null, useHex, pad); [BUGGY] } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(boolean,byte)  final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.7071067811865475	193	193	1	replace	
4	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Base32(final boolean useHex, final byte pad) { [BUGGY] [BUGGY] this(0, null, useHex, pad); } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(boolean,byte)  final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.7071067811865475	193	193	1	add	
5	[BUG] [BUGGY] this.encodeTable = HEX_ENCODE_TABLE; [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { [BUGGY] this.encodeTable = HEX_ENCODE_TABLE; [BUGGY] this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); }  [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.5773502691896258	284	284	1	replace	
6	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { [BUGGY] [BUGGY] this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); }  [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.5773502691896258	284	284	1	add	
7	[BUG] [BUGGY] this.decodeTable = HEX_DECODE_TABLE; [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; [BUGGY] this.decodeTable = HEX_DECODE_TABLE; [BUGGY] } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); }  if (containsAlphabetOrPad(lineSeparator)) { [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.5773502691896258	285	285	1	replace	
8	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; [BUGGY] [BUGGY] this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); }  if (containsAlphabetOrPad(lineSeparator)) { [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.5773502691896258	285	285	1	add	
9	[BUG] [BUGGY] this.encodeSize = BYTES_PER_ENCODED_BLOCK; [FE] IllegalArgumentException [CONTEXT] }  if (containsAlphabetOrPad(lineSeparator)) { final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { [BUGGY] this.encodeSize = BYTES_PER_ENCODED_BLOCK; [BUGGY] this.lineSeparator = null; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3779644730092272	303	303	1	replace	
10	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] }  if (containsAlphabetOrPad(lineSeparator)) { final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { [BUGGY] [BUGGY] this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3779644730092272	303	303	1	add	
11	[BUG] [BUGGY] this.lineSeparator = null; [FE] IllegalArgumentException [CONTEXT]  if (containsAlphabetOrPad(lineSeparator)) { final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; [BUGGY] this.lineSeparator = null; [BUGGY] } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3779644730092272	304	304	1	replace	
12	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT]  if (containsAlphabetOrPad(lineSeparator)) { final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; [BUGGY] [BUGGY] this.lineSeparator = null; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3779644730092272	304	304	1	add	
13	[BUG] [BUGGY] super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { [BUGGY] super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,    lineSeparator == null ? 0 : lineSeparator.length, pad); [BUGGY] lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	281	282	1	replace	
14	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { [BUGGY] [BUGGY] super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,    lineSeparator == null ? 0 : lineSeparator.length, pad); lineSeparator == null ? 0 : lineSeparator.length, pad); if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	281	282	1	add	
15	[BUG] [BUGGY] if (useHex) { [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); [BUGGY] if (useHex) { [BUGGY] this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	283	283	1	replace	
16	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public Base32(final int lineLength, final byte[] lineSeparator, final boolean useHex, final byte pad) { super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == null ? 0 : lineSeparator.length, pad); [BUGGY] [BUGGY] if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } if (lineLength > 0) { if (lineSeparator == null) { throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null"); } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	283	283	1	add	
17	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	290	290	1	replace	
18	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] if (useHex) { this.encodeTable = HEX_ENCODE_TABLE; this.decodeTable = HEX_DECODE_TABLE; } else { this.encodeTable = ENCODE_TABLE; this.decodeTable = DECODE_TABLE; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	290	290	1	add	
19	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	306	306	1	replace	
20	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] final String sep = StringUtils.newStringUtf8(lineSeparator); throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]"); } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	306	306	1	add	
21	[BUG] [BUGGY] if (isInAlphabet(pad) || isWhiteSpace(pad)) { [FE] IllegalArgumentException [CONTEXT] } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } this.decodeSize = this.encodeSize - 1; [BUGGY] if (isInAlphabet(pad) || isWhiteSpace(pad)) { [BUGGY] throw new IllegalArgumentException("pad must not be in alphabet or whitespace"); } } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	308	308	1	replace	
22	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] } this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length); } else { this.encodeSize = BYTES_PER_ENCODED_BLOCK; this.lineSeparator = null; } this.decodeSize = this.encodeSize - 1; [BUGGY] [BUGGY] if (isInAlphabet(pad) || isWhiteSpace(pad)) { throw new IllegalArgumentException("pad must not be in alphabet or whitespace"); } } [CLASS] Base32 [METHOD] <init> [RETURN_TYPE] Base32(int,byte[],boolean,byte)  final int lineLength final byte[] lineSeparator final boolean useHex final byte pad [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE decodeTable encodeTable lineSeparator boolean useHex String sep int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS decodeSize encodeSize lineLength byte pad  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	308	308	1	add	
23	[BUG] [BUGGY] private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [FE] IllegalArgumentException [CONTEXT] [BUGGY] private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [BUGGY]  [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	60	60	1	replace	
24	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'}; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	60	60	1	add	
25	[BUG] [BUGGY] private static final byte[] DECODE_TABLE = { [FE] IllegalArgumentException [CONTEXT] [BUGGY] private static final byte[] DECODE_TABLE = { [BUGGY]  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7 -1,0,1,2,3,4,5,6,7,8,9, 10, 11, 12, 13, 14, // 40-4f A-O 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // 50-5a P-Z }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	67	67	1	replace	
26	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] DECODE_TABLE = {  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, -1, -1, -1, // 30-3f 2-7 -1,0,1,2,3,4,5,6,7,8,9, 10, 11, 12, 13, 14, // 40-4f A-O 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // 50-5a P-Z }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	67	67	1	add	
27	[BUG] [BUGGY] private static final byte[] ENCODE_TABLE = { [FE] IllegalArgumentException [CONTEXT] [BUGGY] private static final byte[] ENCODE_TABLE = { [BUGGY] 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7', }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	81	81	1	replace	
28	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '2', '3', '4', '5', '6', '7', }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	81	81	1	add	
29	[BUG] [BUGGY] private static final byte[] HEX_DECODE_TABLE = { [FE] IllegalArgumentException [CONTEXT] [BUGGY] private static final byte[] HEX_DECODE_TABLE = { [BUGGY]  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f 0,1,2,3,4,5,6,7,8,9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7 -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O 25, 26, 27, 28, 29, 30, 31, 32, }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	92	92	1	replace	
30	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] HEX_DECODE_TABLE = {  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00-0f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10-1f -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 20-2f 0,1,2,3,4,5,6,7,8,9, -1, -1, -1, -1, -1, -1, // 30-3f 2-7 -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, // 40-4f A-O 25, 26, 27, 28, 29, 30, 31, 32, }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	92	92	1	add	
31	[BUG] [BUGGY] private static final byte[] HEX_ENCODE_TABLE = { [FE] IllegalArgumentException [CONTEXT] [BUGGY] private static final byte[] HEX_ENCODE_TABLE = { [BUGGY] '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	106	106	1	replace	
32	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] [BUGGY] [BUGGY] private static final byte[] HEX_ENCODE_TABLE = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', }; [CLASS] Base32  [VARIABLES] 	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	106	106	1	add	
33	[BUG] [BUGGY] return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1; [FE] IllegalArgumentException [CONTEXT] public boolean isInAlphabet(final byte octet) { [BUGGY] return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1; [BUGGY] } [CLASS] Base32 [METHOD] isInAlphabet [RETURN_TYPE] boolean  final byte octet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE buffer decodeTable encodeTable in lineSeparator boolean int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS b decodeSize encodeSize i inAvail inPos lineLength result savedPos byte octet  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	537	537	1	replace	
34	[BUG] [BUGGY] [FE] IllegalArgumentException [CONTEXT] public boolean isInAlphabet(final byte octet) { [BUGGY] [BUGGY] return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1; } [CLASS] Base32 [METHOD] isInAlphabet [RETURN_TYPE] boolean  final byte octet [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE ENCODE_TABLE HEX_DECODE_TABLE HEX_ENCODE_TABLE buffer decodeTable encodeTable in lineSeparator boolean int BITS_PER_ENCODED_BYTE BYTES_PER_ENCODED_BLOCK BYTES_PER_UNENCODED_BLOCK MASK_5BITS b decodeSize encodeSize i inAvail inPos lineLength result savedPos byte octet  	projects/Codec16/src/main/java/org/apache/commons/codec/binary/Base32.java	0.3333333333333333	537	537	1	add	
