bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  iter  =  options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  iter.setPosition(pos  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter.setPosition(pos  +  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.setPosition(pos  +  1);	  iter.setPosition(pos);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
3	[BUG]  [BUGGY]  iter.setPosition(pos  -  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter.setPosition(pos  -  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.setPosition(pos  -  1);	  iter.setPosition(pos);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
4	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  options.keySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options.keySet().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  Option  iter  =  options.getOption(pos);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Option  iter  =  options.getOption(pos);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(pos);	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  Option  iter  =  options.getIterator(pos);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Option  iter  =  options.getIterator(pos);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getIterator(pos);	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  Iterator  iter  =  opt.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  iter  =  opt.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  opt.iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  Option  iter  =  options.getOption(opt);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Option  iter  =  options.getOption(opt);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  iter  =  options.getOption(opt);	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	List  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  arguments.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  arguments.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tokens.add(opt);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(opt);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt.toLowerCase());  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt.toLowerCase());  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments)  {  tokens.add(opt.toLowerCase());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(String  opt  :  arguments)  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(String  opt  :  arguments)  {  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tokens.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tokens.add(token);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }	  processOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processOptionToken(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processOptionToken(token);  }	  processOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }	  processOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(opt);  }	  processOptionToken(opt);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(token);  }	  processOptionToken(opt);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processOptionToken(opt);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(pos);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(opt);  }  else  {  tokens.add(pos);  }	  processOptionToken(opt);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
26	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  gobble(iter);  }	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(iter);  }	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  tryFallThrough(tokens)  {  if(stopAtNonOption)  {  gobble(iter);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tryFallThrough(tokens)  {  if(stopAtNonOption)  {  gobble(iter);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens)  {  if(stopAtNonOption)  {  gobble(iter);  }	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator().next();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  options.iterator().next();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.iterator().next();	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  options.values().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  options.values().iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
32	[BUG]  [BUGGY]  if(options!=  null)  {  Iterator  iter  =  options.iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(options!=  null)  {  Iterator  iter  =  options.iterator();  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(options!=  null)  {  Iterator  iter  =  options.iterator();  }	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  Option>  iter  =  options.iterator();	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(opt);	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  iter  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  stopAtNonOption;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption;	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(pos);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(pos);  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(int  pos  =  0;  pos  <  pos;  pos++)  {  tokens.add(pos);  }	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Option  option  =  options.getOption(pos);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Option  option  =  options.getOption(pos);	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }	  processOptionToken(token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
41	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( " "))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( " "))  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt.equals( " "))  {  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String  opt  =(String)iter.next();  if(opt!=  null)  {  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  if(!stopAtNonOption)  {  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  arguments.iterator();  }  else  {  tokens.add(token);  }	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entities().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  options.entities().iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.entities().iterator();	  if(stopAtNonOption)    {    gobble(iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
49	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  iter  =  options.keySet().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
50	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Ilerator  <  String>  iter  =  options.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  options.entrySet().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(options[pos]);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue());  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue());  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  String[]  arguments  =(String[])iter.next();  for(int  pos  =  0;  pos  <  arguments.length;  pos++)  {  tokens.add(opt.getValue());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  tokens.iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
57	[BUG]  [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  null;  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =(options  ==  null)?  options.iterator()  :  null;	      iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
58	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  this.tokens.iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  gobble(iter):  null;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter  =  stopAtNonOption?  gobble(iter):  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter  =  stopAtNonOption?  gobble(iter):  null;	  if(stopAtNonOption)    {    gobble(iter);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
60	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  processOptionToken(opt);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  else  if(stopAtNonOption)  {  processOptionToken(opt);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	else  if(stopAtNonOption)  {  processOptionToken(opt);  }	  processOptionToken(opt);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  iter.set(pos,  options.size()  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter.set(pos,  options.size()  -  1);  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.size()  -  1);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
65	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter.clear();  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.clear();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  iter.set(pos,  options.indexOf(opt));  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }    [BUGGY]  iter.set(pos,  options.indexOf(opt));  [BUGGY]    gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	iter.set(pos,  options.indexOf(opt));	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
