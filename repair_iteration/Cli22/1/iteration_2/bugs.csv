bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(token,  stopAtNonOption);	  eatTheRest    =    processOptionToken(token);    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(opt,  token);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  processOptionToken(opt,  token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(opt,  token);	  eatTheRest    =    processOptionToken(token);    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(choice,  stopAtNonOption);	  eatTheRest    =    processOptionToken(token);    	non-compiled	[CE]  	14	None	replace
4	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(option,  token);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest  =  processOptionToken(option,  token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(option,  token);	  eatTheRest    =    processOptionToken(token);    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  tokens.add(option);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(option);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(option);	  tokens.add(token);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token,  stopAtNonOption);	  tokens.add(token);    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  arguments.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]      iter.remove();  iter.remove();  [CE]  [FE]    UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  iter.remove();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    iter.remove();	  	non-compiled	[CE]  	9	None	add
11	[BUG]  [BUGGY]      iter.remove();  Iterator  iter  =  options.iterator();  [CE]  [FE]      UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  Iterator  iter  =  options.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    Iterator  iter  =  options.iterator();	  	non-compiled	[CE]  	9	None	add
12	[BUG]  [BUGGY]      iter.remove();  Iterator  <  String>  iter  =  options.iterator();  [CE]  [FE]        UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  Iterator  <  String>  iter  =  options.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    Iterator  <  String>  iter  =  options.iterator();	  	non-compiled	[CE]  	9	None	add
13	[BUG]  [BUGGY]      iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  [CE]  [FE]          UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    Iterator  iter  =  options.iterator();  tokens.add(opt);	  	non-compiled	[CE]  	9	None	add
14	[BUG]  [BUGGY]      iter.remove();  Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);  [CE]  [FE]            UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);	  	non-compiled	[CE]  	9	None	add
15	[BUG]  [BUGGY]  iter.processOptionToken(token,  stopAtNonOption);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(token,  stopAtNonOption);	  iter.processOptionToken(token);    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  iter.processOptionToken(opt);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.processOptionToken(opt);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(opt);	  iter.processOptionToken(token);    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  processOptionToken(opt,  token);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  processOptionToken(opt,  token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(opt,  token);	  processOptionToken(token);    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  processOptionToken(option,  token);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  processOptionToken(option,  token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(option,  token);	  processOptionToken(token);    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  processOptionToken(token,  iter);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  processOptionToken(token,  iter);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(token,  iter);	  processOptionToken(token);    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  arguments.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  bucketToken(token);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  bucketToken(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucketToken(token);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
25	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  catch(Throwable  t)  {  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  catch(Throwable  t)  {  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
26	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  finally  {  iter.remove();  }  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  finally  {  iter.remove();  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  finally  {  iter.remove();  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
27	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(token);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    tokens.add(token);	  	non-compiled	[CE]  ')'  expected	2	None	add
28	[BUG]  [BUGGY]  tokens.add(token);  Iterator  iter  =  options.iterator();  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  Iterator  iter  =  options.iterator();  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    Iterator  iter  =  options.iterator();	  	non-compiled	[CE]  ')'  expected	2	None	add
29	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    tokens.add(token,  stopAtNonOption);	  	non-compiled	[CE]  ')'  expected	2	None	add
30	[BUG]  [BUGGY]  tokens.add(token);  iter.remove();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  iter.remove();  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    iter.remove();	  	non-compiled	[CE]  ')'  expected	2	None	add
31	[BUG]  [BUGGY]  tokens.add(token);  iter.remove();  tokens.add(token);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  iter.remove();  tokens.add(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    iter.remove();  tokens.add(token);	  	non-compiled	[CE]  ')'  expected	2	None	add
32	[BUG]  [BUGGY]  processToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  processToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processToken(token,  stopAtNonOption);	  processToken(token);    	non-compiled	[CE]  ')'  expected	4	None	replace
33	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(option);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(option);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  options.iterator();  tokens.add(option);	      Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	11	None	replace
34	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
35	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  bucketToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucketToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
36	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption)  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(token,  stopAtNonOption)  {  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption)  {	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
37	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  options.entrySet().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  ')'  expected	13	None	replace
38	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
39	[BUG]  [BUGGY]  tryFallback(stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallback(stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(stopAtNonOption)  {  processNonOptionToken(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
40	[BUG]  [BUGGY]  tokens.add(pos);  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(pos);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(pos);	      tokens.add(opt);    	non-compiled	[CE]  ')'  expected	12	None	replace
41	[BUG]  [BUGGY]  tokens.add(stopAtNonOption);  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(stopAtNonOption);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(stopAtNonOption);	      tokens.add(opt);    	non-compiled	[CE]  ')'  expected	12	None	replace
42	[BUG]  [BUGGY]  tokens.add(arguments);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(arguments);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(arguments);	      tokens.add(opt);    	non-compiled	[CE]  ')'  expected	12	None	replace
43	[BUG]  [BUGGY]  tokens.add(arguments[pos]);  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(arguments[pos]);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(arguments[pos]);	      tokens.add(opt);    	non-compiled	[CE]  ')'  expected	12	None	replace
44	[BUG]  [BUGGY]      Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt);	  	non-compiled	[CE]  ')'  expected	5	None	add
45	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Ilerator  iter  =  options.keySet().iterator();	      Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  ')'  expected	13	None	replace
46	[BUG]  [BUGGY]  iter.addToken(token);  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.addToken(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.addToken(token);	  iter.processOptionToken(token);    	non-compiled	[CE]  ')'  expected	15	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }	  processOptionToken(token);    	non-compiled	[CE]  ')'  expected	1	None	replace
48	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }	  processOptionToken(token);    	non-compiled	[CE]  ')'  expected	1	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }	  processOptionToken(token);    	non-compiled	[CE]  ')'  expected	1	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }	  eatTheRest    =    processOptionToken(token);    	non-compiled	[CE]  ')'  expected	14	None	replace
51	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	8	None	replace
52	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(opt);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(opt);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    tokens.add(opt);	  	non-compiled	[CE]  ')'  expected	2	None	add
53	[BUG]  [BUGGY]  tokens.add(token);  tokens.add(getOptionValue(opt));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  tokens.add(getOptionValue(opt));  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    tokens.add(getOptionValue(opt));	  	non-compiled	[CE]  ')'  expected	2	None	add
54	[BUG]  [BUGGY]  tokens.add(chomp);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(chomp);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(chomp);	  tokens.add(token);    	non-compiled	[CE]  ')'  expected	3	None	replace
55	[BUG]  [BUGGY]  pos  =  processToken(token);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  pos  =  processToken(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pos  =  processToken(token);	  processToken(token);    	non-compiled	[CE]  ')'  expected	4	None	replace
56	[BUG]  [BUGGY]  eatTheRest(token);  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  eatTheRest(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest(token);	  processToken(token);    	non-compiled	[CE]  ')'  expected	4	None	replace
57	[BUG]  [BUGGY]  iter  =  options.values().iterator();  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter  =  options.values().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =  options.values().iterator();	      iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	16	None	replace
58	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
59	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
60	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
61	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
62	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
63	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
64	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
65	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
66	[BUG]  [BUGGY]      iter.remove();  Iterator  iter  =  options.keySet().iterator();  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]      iter.remove();  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	        iter.remove();    Iterator  iter  =  options.keySet().iterator();	  	non-compiled	[CE]  ')'  expected	9	None	add
67	[BUG]  [BUGGY]  iter.clear();  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.clear();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.clear();	      iter.remove();    	non-compiled	[CE]  ')'  expected	10	None	replace
68	[BUG]  [BUGGY]  iter.add(opt);  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.add(opt);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(opt);	      iter.remove();    	non-compiled	[CE]  ')'  expected	10	None	replace
69	[BUG]  [BUGGY]  iter.add(options);  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.add(options);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(options);	      iter.remove();    	non-compiled	[CE]  ')'  expected	10	None	replace
70	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  pendSeparator(token,  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
71	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);	      Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	11	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	8	None	replace
73	[BUG]  [BUGGY]  iter.add();  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter.add();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add();	      iter.remove();    	non-compiled	[CE]  ')'  expected	10	None	replace
74	[BUG]  [BUGGY]  tryFallThrough(token)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(token)  {  processNonOptionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token)  {  processNonOptionToken(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
75	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	17	None	replace
76	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	7	None	replace
77	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
78	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
79	[BUG]  [BUGGY]  [Delete]  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  [Delete]  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	[Delete]	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
80	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonLocalToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonLocalToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonLocalToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
81	[BUG]  [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  0;  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  0;  [BUGGY]    processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =(options!=  null)?  options.iterator()  :  0;	      iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	16	None	replace
82	[BUG]  [BUGGY]  tokens.add(token);  iter  =  options.iterator();  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  tokens.add(token);  iter  =  options.iterator();  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);    iter  =  options.iterator();	  	non-compiled	[CE]  ')'  expected	2	None	add
83	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
84	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	19	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  processToken(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token);  }	  processToken(token);    	non-compiled	[CE]  ')'  expected	4	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {    [BUGGY]  if(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]    }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }	  processToken(token);    	non-compiled	[CE]  ')'  expected	4	None	replace
