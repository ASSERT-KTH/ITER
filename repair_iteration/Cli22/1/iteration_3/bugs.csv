bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pendToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendToken(token,  stopAtNonOption);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	70	None	replace
2	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption,  options);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption,  options);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	70	None	replace
3	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption,  iter);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(token,  stopAtNonOption,  iter);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption,  iter);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	70	None	replace
4	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption,  arguments);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption,  arguments);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	70	None	replace
5	[BUG]  [BUGGY]  tokens.add(arguments[pos],  stopAtNonOption);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(arguments[pos],  stopAtNonOption);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(arguments[pos],  stopAtNonOption);	  tokens.add(arguments[pos]);    	non-compiled	[CE]  ')'  expected	43	None	replace
6	[BUG]  [BUGGY]  tokens.add(arguments[pos  +  1]);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(arguments[pos  +  1]);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(arguments[pos  +  1]);	  tokens.add(arguments[pos]);    	non-compiled	[CE]  ')'  expected	43	None	replace
7	[BUG]  [BUGGY]  tokens.add(options[pos]);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(options[pos]);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(options[pos]);	  tokens.add(arguments[pos]);    	non-compiled	[CE]  ')'  expected	43	None	replace
8	[BUG]  [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }	  parent    ==    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  ')'  expected	61	None	replace
9	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);	  parent    ==    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  ')'  expected	61	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }	  eatTheRest    =    processOptionToken(choice,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(choice,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	3	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(choice,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    processOptionToken(choice,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	3	None	replace
13	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  acceptToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	acceptToken(token,  stopAtNonOption);	  processOptionToken(token,    iter);    	non-compiled	[CE]  ')'  expected	19	None	replace
14	[BUG]  [BUGGY]  processOptionToken(token,  iter,  stopAtNonOption);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processOptionToken(token,  iter,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(token,  iter,  stopAtNonOption);	  processOptionToken(token,    iter);    	non-compiled	[CE]  ')'  expected	19	None	replace
15	[BUG]  [BUGGY]  tokens.add(opt);  iter.remove();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(opt);  iter.remove();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(opt);  iter.remove();	  tokens.add(token);    iter.remove();    	non-compiled	[CE]  ')'  expected	30	None	replace
16	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(pos);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(pos);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(pos);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
17	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
18	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  ')'  expected	7	None	replace
19	[BUG]  [BUGGY]  processOptionToken(token,  option);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processOptionToken(token,  option);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(token,  option);	  processOptionToken(option,    token);    	non-compiled	[CE]  ')'  expected	18	None	replace
20	[BUG]  [BUGGY]  iter.processOptionToken(option,  token);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.processOptionToken(option,  token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(option,  token);	  processOptionToken(option,    token);    	non-compiled	[CE]  ')'  expected	18	None	replace
21	[BUG]  [BUGGY]  processToken(token,  option);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processToken(token,  option);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processToken(token,  option);	  processOptionToken(option,    token);    	non-compiled	[CE]  ')'  expected	18	None	replace
22	[BUG]  [BUGGY]  iter  =  options.keySet().iterator();  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter  =  options.keySet().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =  options.keySet().iterator();	  iter    =    options.values().iterator();    	non-compiled	[CE]  ')'  expected	57	None	replace
23	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  finally  {  iter.remove();  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  finally  {  iter.remove();  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  finally  {  iter.remove();  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    finally    {    iter.remove();    }    	non-compiled	[CE]  ')'  expected	26	None	replace
24	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  finally  {  iter.remove();  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  finally  {  iter.remove();  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  finally  {  iter.remove();  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    finally    {    iter.remove();    }    	non-compiled	[CE]  ')'  expected	26	None	replace
25	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  ')'  expected	62	None	replace
26	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  ')'  expected	62	None	replace
27	[BUG]  [BUGGY]  tokens  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);	  parent    ==    null    ||    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	84	None	replace
28	[BUG]  [BUGGY]  tryFallback(stopAtNonOption)  {  processOptionToken(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(stopAtNonOption)  {  processOptionToken(token);  }	  tryFallback(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
29	[BUG]  [BUGGY]  tryFallback(stopAtNonOption)  {  processRawToken(token);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(stopAtNonOption)  {  processRawToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(stopAtNonOption)  {  processRawToken(token);  }	  tryFallback(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
30	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  ')'  expected	76	None	replace
31	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }	  parent!=    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
32	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens!=  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(token);  }	  parent!=    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
33	[BUG]  [BUGGY]  tryFallbackToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallbackToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallbackToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  ')'  expected	49	None	replace
34	[BUG]  [BUGGY]  iter.add(option);  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(option);	  iter.add();    	non-compiled	[CE]  ')'  expected	73	None	replace
35	[BUG]  [BUGGY]  flipToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  flipToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	flipToken(token,  stopAtNonOption);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	35	None	replace
36	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption)+  1;  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  bucketToken(token,  stopAtNonOption)+  1;  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucketToken(token,  stopAtNonOption)+  1;	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	35	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(token);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest(token);  }	  eatTheRest(token);    	non-compiled	[CE]  ')'  expected	56	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(token);    	non-compiled	[CE]  ')'  expected	56	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(token);    	non-compiled	[CE]  ')'  expected	56	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(token);    	non-compiled	[CE]  ')'  expected	56	None	replace
41	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  tokens.add(option);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  arguments.iterator();  tokens.add(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  arguments.iterator();  tokens.add(option);	  Iterator    iter    =    options.iterator();    tokens.add(option);    	non-compiled	[CE]  ')'  expected	33	None	replace
42	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processPositionToken(token);  }	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
43	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processParserToken(token);  }	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	64	None	replace
44	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  ')'  expected	22	None	replace
45	[BUG]  [BUGGY]  Iterator  iter  =  opt.iterator();  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  opt.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  opt.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  ')'  expected	22	None	replace
46	[BUG]  [BUGGY]  tokens.add(t);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(t);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(t);	  tokens.add(option);    	non-compiled	[CE]  ')'  expected	5	None	replace
47	[BUG]  [BUGGY]  List  iter  =  options.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  List  iter  =  options.keySet().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	List  iter  =  options.keySet().iterator();	  Ilerator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
48	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "n ");  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add( "n ");	  tokens.add(arguments);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
49	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption  &&  token.equals( " "))  {  processNonOptionToken(token);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption  &&  token.equals( " "))  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption  &&  token.equals( " "))  {  processNonOptionToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
50	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption  &&  token.equals( "- "))  {  processNonOptionToken(token);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption  &&  token.equals( "- "))  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption  &&  token.equals( "- "))  {  processNonOptionToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
51	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
52	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }  [CE]  illegal  start  of  expression  [FE]              UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }	          iter.remove();    Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          iter.remove();    Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          iter.remove();    Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  iter.remove();  Iterator  iter  =  options.iterator();  tokens.add(option);  }	          iter.remove();    Iterator    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  opt.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
58	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  iter)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  iter)  {  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  iter)  {	  tryFallThrough(token,    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
59	[BUG]  [BUGGY]  tokens.add(op);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(op);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(op);	  tokens.add(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
60	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  options);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  options);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
61	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  iter);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  iter);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  iter);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
62	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  arguments);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
63	[BUG]  [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  0;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  0;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =(options  ==  null)?  options.iterator()  :  0;	  iter    =(options!=    null)?    options.iterator()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
64	[BUG]  [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter  =(options  ==  null)?  options.iterator()  :  1;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =(options  ==  null)?  options.iterator()  :  1;	  iter    =(options!=    null)?    options.iterator()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
65	[BUG]  [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter  =(options!=  null)?  options.iterator()  :  1;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =(options!=  null)?  options.iterator()  :  1;	  iter    =(options!=    null)?    options.iterator()    :    0;    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
66	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(token);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
67	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  else  {  tokens.add(token);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  else  {  tokens.add(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	23	None	replace
68	[BUG]  [BUGGY]  tokens.add(opt,  stopAtNonOption);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(opt,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(opt,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	6	None	replace
69	[BUG]  [BUGGY]  tokens.add(op,  stopAtNonOption);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(op,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(op,  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	6	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	1	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	1	None	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	1	None	replace
73	[BUG]  [BUGGY]  tokens.add(pos  +  1);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(pos  +  1);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(pos  +  1);	  tokens.add(pos);    	non-compiled	[CE]  ')'  expected	40	None	replace
74	[BUG]  [BUGGY]  iter.addToken(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.addToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.addToken(token,  stopAtNonOption);	  iter.addToken(token);    	non-compiled	[CE]  ')'  expected	46	None	replace
75	[BUG]  [BUGGY]  iter.addToken(opt);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.addToken(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.addToken(opt);	  iter.addToken(token);    	non-compiled	[CE]  ')'  expected	46	None	replace
76	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  catch(Throwable  t)  {  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  ')'  expected	25	None	replace
77	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  catch(Throwable  t)  {  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  ')'  expected	25	None	replace
78	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  catch(Throwable  t)  {  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processTokenToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  ')'  expected	25	None	replace
79	[BUG]  [BUGGY]  processPositionToken(token);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processPositionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processPositionToken(token);	  tryFallThrough(stopAtNonOption)    {    processPositionToken(token);    }    	non-compiled	[CE]  ')'  expected	75	None	replace
80	[BUG]  [BUGGY]  accept(stopAtNonOption)  {  processPositionToken(token);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  accept(stopAtNonOption)  {  processPositionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	accept(stopAtNonOption)  {  processPositionToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processPositionToken(token);    }    	non-compiled	[CE]  ')'  expected	75	None	replace
81	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processPositionToken(token);    }    	non-compiled	[CE]  ')'  expected	75	None	replace
82	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }	  parent    ==    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	83	None	replace
83	[BUG]  [BUGGY]  iter.remove();  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  ')'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.remove();  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.remove();  Iterator  <  String>  iter  =  options.values().iterator();	          iter.remove();    Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	12	None	replace
84	[BUG]  [BUGGY]  processOptionToken(token,  opt);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processOptionToken(token,  opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processOptionToken(token,  opt);	  processOptionToken(opt,    token);    	non-compiled	[CE]  ')'  expected	17	None	replace
85	[BUG]  [BUGGY]  iter.processOptionToken(opt,  token);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.processOptionToken(opt,  token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(opt,  token);	  processOptionToken(opt,    token);    	non-compiled	[CE]  ')'  expected	17	None	replace
86	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
87	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
88	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  ';'  expected	9	None	replace
89	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
90	[BUG]  [BUGGY]  tryFallback(iter,  stopAtNonOption);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(iter,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(iter,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	48	None	replace
91	[BUG]  [BUGGY]  tryFallThrough(token)  {  processOptionToken(token);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token)  {  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token)  {  processOptionToken(token);  }	  tryFallThrough(token)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
92	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  opt);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(token,  opt);	  eatTheRest    =    processOptionToken(opt,    token);    	non-compiled	[CE]  ';'  expected	2	None	replace
93	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }	  eatTheRest    =    processOptionToken(opt,    token);    	non-compiled	[CE]  	2	None	replace
94	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(opt,  token);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(opt,    token);    	non-compiled	[CE]  	2	None	replace
95	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	63	None	replace
96	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens!=  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  }	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	63	None	replace
97	[BUG]  [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens  ==  null  &&  stopAtNonOption)  {  processNonOptionToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	63	None	replace
98	[BUG]  [BUGGY]  tokens.add(getOptionValue(pos));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(getOptionValue(pos));  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(getOptionValue(pos));	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  	53	None	replace
99	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  	53	None	replace
100	[BUG]  [BUGGY]  tokens.add(getOptionValue(opt));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(getOptionValue(opt));  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(getOptionValue(opt));	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  	53	None	replace
101	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(option));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(option));  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	else  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(option));  }	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  	53	None	replace
102	[BUG]  [BUGGY]  pos  =  processOptionToken(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pos  =  processOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pos  =  processOptionToken(token);	  pos    =    processToken(token);    	non-compiled	[CE]  	55	None	replace
103	[BUG]  [BUGGY]  pos  =  processToken(token,  stopAtNonOption);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pos  =  processToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pos  =  processToken(token,  stopAtNonOption);	  pos    =    processToken(token);    	non-compiled	[CE]  	55	None	replace
104	[BUG]  [BUGGY]  pos  =  processPositionToken(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pos  =  processPositionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pos  =  processPositionToken(token);	  pos    =    processToken(token);    	non-compiled	[CE]  	55	None	replace
105	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	While(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
106	[BUG]  [BUGGY]  try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  ==  stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
107	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	While(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
108	[BUG]  [BUGGY]  try  ==  true)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  true)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  ==  true)  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
109	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption,  burstToken(token))  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
110	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonPositionToken(token);  }  else  {  tokens.add(option);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processNonPositionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processNonPositionToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  ';'  expected	78	None	replace
111	[BUG]  [BUGGY]  iter.remove();  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  [CE]  ')'  expected  [FE]                UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.remove();  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.remove();  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);	          iter.remove();    Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	14	None	replace
112	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  [CE]  ')'  expected  [FE]                  UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.iterator();  tokens.add(option);	          iter.remove();    Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	14	None	replace
113	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  tokens.add(opt,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  arguments.iterator();  tokens.add(opt,  stopAtNonOption);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  arguments.iterator();  tokens.add(opt,  stopAtNonOption);	  Iterator    iter    =    options.iterator();    tokens.add(opt,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	71	None	replace
114	[BUG]  [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	86	None	replace
115	[BUG]  [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
116	[BUG]  [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(op);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(op);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(iter,  stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(op);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
117	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  not  a  statement	60	None	replace
118	[BUG]  [BUGGY]  tokens  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens  ==  null  &&  stopAtNonOption  {  processNonOptionToken(token);  }  else  {  tokens.add(option);  }	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  not  a  statement	60	None	replace
119	[BUG]  [BUGGY]  tryFallThrough(token);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token);	  if(stopAtNonOption)    {    processToken(token);    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
120	[BUG]  [BUGGY]  tokens.add(opt);  Iterator  iter  =  options.iterator();  [CE]  cannot  find  symbol  opt  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(opt);  Iterator  iter  =  options.iterator();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(opt);  Iterator  iter  =  options.iterator();	  tokens.add(token);    Iterator    iter    =    options.iterator();    	non-compiled	[CE]  cannot  find  symbol  opt	28	None	replace
121	[BUG]  [BUGGY]  tokens.add(option);  Iterator  iter  =  options.iterator();  [CE]  cannot  find  symbol  option  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(option);  Iterator  iter  =  options.iterator();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(option);  Iterator  iter  =  options.iterator();	  tokens.add(token);    Iterator    iter    =    options.iterator();    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
122	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processParserToken(token);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processParserToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processParserToken(token);	  parent    ==    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  not  a  statement	59	None	replace
123	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(opt);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  arguments.iterator();  tokens.add(opt);	          Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  	44	None	replace
124	[BUG]  [BUGGY]  iter.add(options,  stopAtNonOption);  [CE]  class  or  interface  expected  [FE]            UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add(options,  stopAtNonOption);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(options,  stopAtNonOption);	  iter.add(options);    	non-compiled	[CE]  class  or  interface  expected	69	None	replace
125	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(token,  option);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  processOptionToken(token,  option);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(token,  option);	  eatTheRest    =    processOptionToken(option,    token);    	non-compiled	[CE]  ';'  expected	4	None	replace
126	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }  [CE]  class  or  interface  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }	  eatTheRest    =    processOptionToken(option,    token);    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
127	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(option,  token);  }  else  {  tokens.add(token);  }	  eatTheRest    =    processOptionToken(option,    token);    	non-compiled	[CE]  ')'  expected	4	None	replace
128	[BUG]  [BUGGY]  iter.remove();  tokens.add(token);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.remove();  tokens.add(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.remove();  tokens.add(token);	  tokens.add(token);    iter.remove();    tokens.add(token);    	non-compiled	[CE]  ')'  expected	31	None	replace
129	[BUG]  [BUGGY]  iter.processOptionToken(token,  stopAtNonOption,  options);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(token,  stopAtNonOption,  options);	  iter.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	15	None	replace
130	[BUG]  [BUGGY]  iter.processOptionToken(opt,  stopAtNonOption);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.processOptionToken(opt,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(opt,  stopAtNonOption);	  iter.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	15	None	replace
131	[BUG]  [BUGGY]  iter.processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.processOptionToken(token,  stopAtNonOption,  arguments);	  iter.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	15	None	replace
132	[BUG]  [BUGGY]  processToken(token,  stopAtNonOption,  options);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  processToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	processToken(token,  stopAtNonOption,  options);	  processToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	32	None	replace
133	[BUG]  [BUGGY]  iter.add(pos);  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add(pos);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(pos);	  iter.add(opt);    	non-compiled	[CE]  ')'  expected	68	None	replace
134	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  ')'  expected	20	None	replace
135	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonLocalToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
136	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonLocalToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
137	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonLocalToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
138	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonLocalToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	80	None	replace
139	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    <    String>    iter    =    this.options.iterator();    	non-compiled	[CE]  ')'  expected	72	None	replace
140	[BUG]  [BUGGY]  tokens.add(opt);  iter  =  options.iterator();  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(opt);  iter  =  options.iterator();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(opt);  iter  =  options.iterator();	  tokens.add(token);    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
141	[BUG]  [BUGGY]  tokens.add(token);  iter  =  arguments.iterator();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(token);  iter  =  arguments.iterator();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(token);  iter  =  arguments.iterator();	  tokens.add(token);    iter    =    options.iterator();    	non-compiled	[CE]  ')'  expected	82	None	replace
142	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }	  processToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	32	None	replace
143	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }	  processToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	32	None	replace
144	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	32	None	replace
145	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption  &&  stopAtNonOption)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
146	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption  &&  token!=  null)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption  &&  token!=  null)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption  &&  token!=  null)  {  processNonOptionToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	77	None	replace
147	[BUG]  [BUGGY]  acceptToken(token,  opt);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  acceptToken(token,  opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	acceptToken(token,  opt);	  processOptionToken(opt,    token);    	non-compiled	[CE]  ')'  expected	17	None	replace
148	[BUG]  [BUGGY]  acceptToken(token);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  acceptToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	acceptToken(token);	  eatTheRest(token);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
149	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  tokens.add(token);    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	29	None	replace
150	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  tokens.add(token);    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	29	None	replace
151	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token,  stopAtNonOption);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token,  stopAtNonOption);  }	  tokens.add(token);    tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	29	None	replace
152	[BUG]  [BUGGY]  try  ==  false)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  false)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  ==  false)  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
153	[BUG]  [BUGGY]  aughtExceptionHandler(token,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  aughtExceptionHandler(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	aughtExceptionHandler(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
154	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	aughtExceptionHandler.handleMoreGuaranteed(token,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
155	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	aughtExceptionHandler.handleMoreGuaranteed(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
156	[BUG]  [BUGGY]  pendSeparator(opt,  stopAtNonOption);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(opt,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(opt,  stopAtNonOption);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  	70	None	replace
157	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(token,  stopAtNonOption  +  1);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption  +  1);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  	70	None	replace
158	[BUG]  [BUGGY]  pendSeparator(token,  stopAtNonOption,  pos);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pendSeparator(token,  stopAtNonOption,  pos);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pendSeparator(token,  stopAtNonOption,  pos);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  	70	None	replace
159	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  tokens.add(option);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Ilerator  iter  =  options.iterator();  tokens.add(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Ilerator  iter  =  options.iterator();  tokens.add(option);	  Iterator    iter    =    options.iterator();    tokens.add(option);    	non-compiled	[CE]  not  a  statement	33	None	replace
160	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption,  options);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  bucketToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucketToken(token,  stopAtNonOption,  options);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	35	None	replace
161	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption  +  1);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  bucketToken(token,  stopAtNonOption  +  1);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucketToken(token,  stopAtNonOption  +  1);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	35	None	replace
162	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
163	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Option  option  =  options.getOption(opt);	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
164	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  not  a  statement	48	None	replace
165	[BUG]  [BUGGY]  try  ==  false)  {  processOptionToken(token);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  false)  {  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  ==  false)  {  processOptionToken(token);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  	47	None	replace
166	[BUG]  [BUGGY]  dealToken(token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  dealToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	dealToken(token);	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  	47	None	replace
167	[BUG]  [BUGGY]  pend(options.get(opt));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pend(options.get(opt));  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pend(options.get(opt));	  if(stopAtNonOption)    {    processOptionToken(token);    }    	non-compiled	[CE]  	47	None	replace
168	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(option,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =  options.iterator();  tokens.add(option,  stopAtNonOption);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =  options.iterator();  tokens.add(option,  stopAtNonOption);	  Iterator    iter    =    options.iterator();    tokens.add(opt,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	71	None	replace
169	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.iterator();  tokens.add(opt,  stopAtNonOption);	  Iterator    iter    =    options.iterator();    tokens.add(opt,    stopAtNonOption);    	non-compiled	[CE]  ')'  expected	71	None	replace
170	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  ')'  expected	21	None	replace
171	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  ||  stopAtNonOption)  {  processNonOptionToken(token);  }	  parent    ==    null    ||    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	84	None	replace
172	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processPositionToken(token);    }    	non-compiled	[CE]  ')'  expected	75	None	replace
173	[BUG]  [BUGGY]  eatTheRest  =  processOptionToken(option,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  eatTheRest  =  processOptionToken(option,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	eatTheRest  =  processOptionToken(option,  stopAtNonOption);	  eatTheRest    =    processOptionToken(option,    token);    	non-compiled	[CE]  ')'  expected	4	None	replace
174	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(option);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  ')'  expected	78	None	replace
175	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Option  options  =  options.getOption(opt);	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
176	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Ilerator  iter  =  options.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  ';'  expected	20	None	replace
177	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processParentToken(token);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  processParentToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption)  {  processParentToken(token);	  parent    ==    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  ';'  expected	59	None	replace
178	[BUG]  [BUGGY]  iter.remove(options);  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.remove(options);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.remove(options);	  iter.add(options);    	non-compiled	[CE]  ';'  expected	69	None	replace
179	[BUG]  [BUGGY]  tokens.add(opt[pos]);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(opt[pos]);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(opt[pos]);	  tokens.add(arguments[pos]);    	non-compiled	[CE]  ')'  expected	43	None	replace
180	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add(arguments[0]);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add(arguments[0]);	  tokens.add(arguments[pos]);    	non-compiled	[CE]  ';'  expected	43	None	replace
181	[BUG]  [BUGGY]  try  ==  false)  {  processOptionToken(token,  stopAtNonOption);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  ==  false)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  ==  false)  {  processOptionToken(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
182	[BUG]  [BUGGY]  dealToken(token,  stopAtNonOption);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  dealToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	dealToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
183	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }	  eatTheRest    =    processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	1	None	replace
184	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  catch(Throwable  t)  {  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  ';'  expected	25	None	replace
185	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  catch(Throwable  t)  {  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  ';'  expected	25	None	replace
186	[BUG]  [BUGGY]  acceptToken(token,  option);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  acceptToken(token,  option);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	acceptToken(token,  option);	  processOptionToken(option,    token);    	non-compiled	[CE]  ';'  expected	18	None	replace
187	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  pos);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  pos);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  pos);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	34	None	replace
188	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption  +  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption  +  1);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption  +  1);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  ';'  expected	34	None	replace
189	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption),  pos)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption),  pos)  {  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption),  pos)  {	  tryFallThrough(token,    stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
190	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  options)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  options)  {  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  options)  {	  tryFallThrough(token,    stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
191	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption,  pos)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption,  pos)  {  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption,  pos)  {	  tryFallThrough(token,    stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
192	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  ';'  expected	53	None	replace
193	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(getOptionValue(opt));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  ';'  expected	53	None	replace
194	[BUG]  [BUGGY]  pos  =  startOptionToken(token);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  pos  =  startOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	pos  =  startOptionToken(token);	  pos    =    processToken(token);    	non-compiled	[CE]  ';'  expected	55	None	replace
195	[BUG]  [BUGGY]  Iterator  iter  =(options  ==  null)?  options.iterator()  :  0;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  iter  =(options  ==  null)?  options.iterator()  :  0;  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  iter  =(options  ==  null)?  options.iterator()  :  0;	  iter    =(options!=    null)?    options.iterator()    :    0;    	non-compiled	[CE]  ';'  expected	81	None	replace
196	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(arguments[pos]);  [CE]  ';'  expected  [FE]        MissingArgumentException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  tokens.add(arguments[pos]);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  options.iterator();  tokens.add(arguments[pos]);	          Iterator    <    String>    iter    =    options.iterator();    tokens.add(opt);    	non-compiled	[CE]  ';'  expected	44	None	replace
197	[BUG]  [BUGGY]  tryFallThrough(token)  {  processHorizontalToken(token);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token)  {  processHorizontalToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token)  {  processHorizontalToken(token);  }	  tryFallThrough(token)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
198	[BUG]  [BUGGY]  iter.add( "n ");  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add( "n ");  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add( "n ");	  iter.clear();    	non-compiled	[CE]  ')'  expected	67	None	replace
199	[BUG]  [BUGGY]  tokens.clear();  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.clear();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.clear();	  iter.clear();    	non-compiled	[CE]  ')'  expected	67	None	replace
200	[BUG]  [BUGGY]  iter.add(token);  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add(token);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(token);	  iter.add(opt);    	non-compiled	[CE]  ')'  expected	68	None	replace
201	[BUG]  [BUGGY]  iter.remove(option);  [CE]  ')'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.remove(option);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.remove(option);	  iter.add(opt);    	non-compiled	[CE]  ')'  expected	68	None	replace
202	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	52	None	replace
203	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	52	None	replace
204	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  options.add(option);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  options.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(opt);  }  else  {  options.add(option);  }	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  ')'  expected	52	None	replace
205	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }	  tokens.add(token);    iter.remove();    tokens.add(token);    	non-compiled	[CE]  ')'  expected	31	None	replace
206	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    iter.remove();    tokens.add(token);    	non-compiled	[CE]  ')'  expected	31	None	replace
207	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  options.add(opt);  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  options.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  iter.remove();  tokens.add(token);  }  else  {  options.add(opt);  }	  tokens.add(token);    iter.remove();    tokens.add(token);    	non-compiled	[CE]  ')'  expected	31	None	replace
208	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  ')'  expected	7	None	replace
209	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processHorizontalToken(token);  }  else  {  tokens.add(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
210	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
211	[BUG]  [BUGGY]  bucket(token,  stopAtNonOption);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  bucket(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	bucket(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processToken(token);    }    	non-compiled	[CE]  ')'  expected	85	None	replace
212	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption  ==  processNonOptionToken(token);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  &&  stopAtNonOption  ==  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  &&  stopAtNonOption  ==  processNonOptionToken(token);	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	60	None	replace
213	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(token);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(token);	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	60	None	replace
214	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption  {  processNonOptionToken(token);  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  ||  stopAtNonOption  {  processNonOptionToken(token);  }	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  ')'  expected	60	None	replace
215	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	27	None	replace
216	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	27	None	replace
217	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  options.add(opt);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  options.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens.add(token);  }  else  {  options.add(opt);  }	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	27	None	replace
218	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  iter);  }	  processOptionToken(token,    iter);    	non-compiled	[CE]  ')'  expected	19	None	replace
219	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  tokens.add(opt);  }	  processOptionToken(token,    iter);    	non-compiled	[CE]  ')'  expected	19	None	replace
220	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processOptionToken(token,    iter);    	non-compiled	[CE]  ')'  expected	19	None	replace
221	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(parent);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(parent);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption  ==  processNonOptionToken(parent);	  parent!=    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ')'  expected	65	None	replace
222	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processLocalToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  	38	None	replace
223	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRoleToken(token);  }  catch(Throwable  t)  {  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRoleToken(token);  }  catch(Throwable  t)  {  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processRoleToken(token);  }  catch(Throwable  t)  {  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    catch(Throwable    t)    {    }    	non-compiled	[CE]  	25	None	replace
224	[BUG]  [BUGGY]  tryFallThrough(token)  {  processToken(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token)  {  processToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token)  {  processToken(token);  }	  if(stopAtNonOption)    {    processToken(token);    }    	non-compiled	[CE]  	85	None	replace
225	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tokens.add( "- ");	  tokens.add(option);    	non-compiled	[CE]  	5	None	replace
226	[BUG]  [BUGGY]  acceptTokens(token,  stopAtNonOption);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  acceptTokens(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	acceptTokens(token,  stopAtNonOption);	  pendSeparator(token,    stopAtNonOption);    	non-compiled	[CE]  	70	None	replace
227	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens  [CE]  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  	27	None	replace
228	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens.  [CE]  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens.  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(tokens.	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  	27	None	replace
229	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accesorii();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accesorii();  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accesorii();	  tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  	27	None	replace
230	[BUG]  [BUGGY]  process(opt,  token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(opt,  token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	process(opt,  token);	  processOptionToken(opt,    token);    	non-compiled	[CE]  	17	None	replace
231	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processStringToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    finally    {    iter.remove();    }    	non-compiled	[CE]  	26	None	replace
232	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Tokens.add(tokens  [CE]  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Tokens.add(tokens  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Tokens.add(tokens	  tokens.add(token);    tokens.add(getOptionValue(opt));    	non-compiled	[CE]  	53	None	replace
233	[BUG]  [BUGGY]  akToken(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  akToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	akToken(token);	  eatTheRest(token);    	non-compiled	[CE]  	56	None	replace
234	[BUG]  [BUGGY]  tryFallThrough(token,  stopAtNonOption  &&  tokens.contains(opt))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(token,  stopAtNonOption  &&  tokens.contains(opt))  {  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(token,  stopAtNonOption  &&  tokens.contains(opt))  {	  tryFallThrough(token,    stopAtNonOption)    {    	non-compiled	[CE]  	36	None	replace
235	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);  }	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  	64	None	replace
236	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);  }	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  	64	None	replace
237	[BUG]  [BUGGY]  iter.add( "- ");  [CE]  [FE]        UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add( "- ");  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add( "- ");	  iter.add();    	non-compiled	[CE]  	73	None	replace
238	[BUG]  [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  akTokens  =  processOptionToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	akTokens  =  processOptionToken(token,  stopAtNonOption);	  eatTheRest    =    processOptionToken(choice,    stopAtNonOption);    	non-compiled	[CE]  	3	None	replace
239	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  else  {  tokens.add(token);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processRawToken(token);  }  else  {  tokens.add(token);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	23	None	replace
240	[BUG]  [BUGGY]  process(stopAtNonOption)  {  processPositionToken(token);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  process(stopAtNonOption)  {  processPositionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	process(stopAtNonOption)  {  processPositionToken(token);  }	  tryFallThrough(stopAtNonOption)    {    processPositionToken(token);    }    	non-compiled	[CE]  	75	None	replace
241	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processMutatorToken(token);  }  else  {  tokens.add(opt);  }	  tryFallThrough(stopAtNonOption)    {    processNonLocalToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	80	None	replace
242	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	48	None	replace
243	[BUG]  [BUGGY]  alege(token,  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  alege(token,  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	alege(token,  stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	48	None	replace
244	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(option);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token);  }  else  {  tokens.add(option);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	48	None	replace
245	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	48	None	replace
246	[BUG]  [BUGGY]  transform(token)  {  processNonOptionToken(token);  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  transform(token)  {  processNonOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	transform(token)  {  processNonOptionToken(token);  }	  tryFallThrough(token)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  	74	None	replace
247	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  	51	None	replace
248	[BUG]  [BUGGY]  iter.add(options[pos]);  [CE]  [FE]            UnsupportedOperationException      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter.add(options[pos]);  [BUGGY]      processNonOptionToken(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter.add(options[pos]);	  iter.add(options);    	non-compiled	[CE]  	69	None	replace
249	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(option);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processPositionToken(token);  }  else  {  tokens.add(option);  }	  tryFallThrough(stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(option);    }    	non-compiled	[CE]  	78	None	replace
250	[BUG]  [BUGGY]  try  {  eatTheRest  =  processOptionToken(token);  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  try  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	try  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
251	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  eatTheRest  =  processOptionToken(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
252	[BUG]  [BUGGY]  aughtExceptionHandler(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  aughtExceptionHandler(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	aughtExceptionHandler(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
253	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    processOptionToken(token);    }    	non-compiled	[CE]  	50	None	replace
254	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(opt);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(opt);	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  	52	None	replace
255	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tokens.add(options);	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  	52	None	replace
256	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(opt);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(opt);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(options.add(opt);	  tokens.add(token);    tokens.add(opt);    	non-compiled	[CE]  	52	None	replace
257	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processParentToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  	63	None	replace
258	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	if(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  processToken(token,    stopAtNonOption);    	non-compiled	[CE]  	32	None	replace
259	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processPrimitiveToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  	62	None	replace
260	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent!=  null  &&  stopAtNonOption)  {  processOptionToken(token);	  parent!=    null    &&    stopAtNonOption)    {    processNonOptionToken(token);    	non-compiled	[CE]  	62	None	replace
261	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	86	None	replace
262	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processToken(token);  }  else  {  tokens.add(option);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	86	None	replace
263	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallThrough(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallThrough(stopAtNonOption)  {  processToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }	  if(stopAtNonOption)    {    processToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	86	None	replace
264	[BUG]  [BUGGY]  iter  =  tryFallThrough(token,  stopAtNonOption);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  iter  =  tryFallThrough(token,  stopAtNonOption);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	iter  =  tryFallThrough(token,  stopAtNonOption);	  tryFallThrough(token,    stopAtNonOption);    	non-compiled	[CE]  	34	None	replace
265	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption  ==  processNonOptionToken(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  parent  ==  null  ||  stopAtNonOption  ==  processNonOptionToken(token);  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	parent  ==  null  ||  stopAtNonOption  ==  processNonOptionToken(token);	  parent    ==    null    &&    stopAtNonOption    {    processNonOptionToken(token);    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  	60	None	replace
266	[BUG]  [BUGGY]  tryFallback(stopAtNonOption)  {  processHorizontalToken(token);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {      [BUGGY]  tryFallback(stopAtNonOption)  {  processHorizontalToken(token);  }  [BUGGY]      }  else  {  tokens.add(token);  }  gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	tryFallback(stopAtNonOption)  {  processHorizontalToken(token);  }	  tryFallback(stopAtNonOption)    {    processNonOptionToken(token);    }    	non-compiled	[CE]  	39	None	replace
