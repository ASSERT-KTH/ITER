bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(options.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(options.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  LinkedList  <  OptionFailure>(options.size());	  tokens    =    new    LinkedList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
2	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(options);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  LinkedList  <  OptionFailure>(options);	  tokens    =    new    LinkedList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
3	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(!eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }	  tokens.add(   "--   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
4	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }	  tokens.add(   "--   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
5	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options.add( "-- ");  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options.add( "-- ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options.add( "-- ");  }	  tokens.add(   "--   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
6	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  Lists.newLinkedList();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	Tokens  tokens  =  Lists.newLinkedList();	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
7	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	Tokens  tokens  =  Lists.newArrayList(size());	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
8	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(size()  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(size()  -  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	Tokens  tokens  =  Lists.newArrayList(size()  -  1);	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
9	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens!=  null)  {  eatTheRest  =  false;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
12	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  String>();  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
13	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this),  false);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this),  false);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this),  false);	  tokens.addAll(Arrays.asList(this),    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
14	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this),  true);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this),  true);	  tokens.addAll(Arrays.asList(this),    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
15	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options)+  1),  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options)+  1),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(options)+  1),  eatTheRest);	  tokens.addAll(Arrays.asList(options),    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options)/  eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options)/  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(options)/  eatTheRest);	  tokens.addAll(Arrays.asList(options),    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  tokens.add( "#0000 ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "#0000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "#0000 ");	  tokens.add(   "#000   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  tokens.add( "#00 ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "#00 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "#00 ");	  tokens.add(   "#000   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  tokens.add( "#0 ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "#0 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "#0 ");	  tokens.add(   "#000   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
22	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(options.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(options.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  OptionFailure>(options.size());	  tokens    =    new    ArrayList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
23	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(options);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  OptionFailure>(options);	  tokens    =    new    ArrayList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
24	[BUG]  [BUGGY]  tokens.add( "%00 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "%00 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "%00 ");	  tokens.add(   "%000   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
25	[BUG]  [BUGGY]  tokens.add( "%0000 ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "%0000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "%0000 ");	  tokens.add(   "%000   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
26	[BUG]  [BUGGY]  tokens.add( "%1000 ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "%1000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "%1000 ");	  tokens.add(   "%000   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
27	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  options),  eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  options),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  options),  eatTheRest);	  tokens.addAll(Arrays.asList(this,    options));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
28	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  options),  true);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  options),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  options),  true);	  tokens.addAll(Arrays.asList(this,    options));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  tokens.add( "00000 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "00000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "00000 ");	  tokens.add(   "-00000   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
30	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  true);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.tokens),  true);	  tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
31	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this.tokens));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this.tokens));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this.tokens));	  tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
32	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  false);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  false);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.tokens),  false);	  tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
33	[BUG]  [BUGGY]  tokens.add(Arrays.asList(options),  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(options),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(options),  eatTheRest);	  tokens.add(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
34	[BUG]  [BUGGY]  tokens.add(Arrays.asList(options,  eatTheRest));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(options,  eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(options,  eatTheRest));	  tokens.add(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
35	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens  ==  null)  {  eatTheRest  =  false;  }	  if(tokens!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  tokens.addAll(Lists.newArrayList());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Lists.newArrayList());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Lists.newArrayList());	  if(tokens!=    null)    {    tokens.addAll(Lists.newArrayList());    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  All(Lists.newArrayList());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  All(Lists.newArrayList());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	All(Lists.newArrayList());	  if(tokens!=    null)    {    tokens.addAll(Lists.newArrayList());    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
38	[BUG]  [BUGGY]  tokens.add( "$00 ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$00 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "$00 ");	  tokens.add(   "$000   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
39	[BUG]  [BUGGY]  tokens.add( "$0000 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$0000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "$0000 ");	  tokens.add(   "$000   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
40	[BUG]  [BUGGY]  tokens.add( "$0 ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "$0 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "$0 ");	  tokens.add(   "$000   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
41	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this.options));	  tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
42	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options),  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.options),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.options),  true);	  tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
43	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options),  eatTheRest);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.options),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.options),  eatTheRest);	  tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
44	[BUG]  [BUGGY]  tokens.add( "- ".equals(this.options));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "- ".equals(this.options));	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  tokens.remove( "- ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.remove( "- ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-n ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  this));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  this));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  this));	  tokens.addAll(Arrays.asList(this,    eatTheRest));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
48	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest),  true);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  eatTheRest),  true);	  tokens.addAll(Arrays.asList(this,    eatTheRest));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
49	[BUG]  [BUGGY]  tokens.add( "-00 ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-00 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-00 ");	  tokens.add(   "-000   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
50	[BUG]  [BUGGY]  tokens.add( "-0000 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-0000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-0000 ");	  tokens.add(   "-000   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
51	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	||!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  tokens.addAll(this.options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(this.options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(this.options);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
53	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(tokens));	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
54	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  +  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  Option>(options.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(options.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  LinkedList  <  Option>(options.size());	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
56	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size()  -  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  Option>(options.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(options.size());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
57	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this.eatTheRest));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this.eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this.eatTheRest));	  tokens.add(Arrays.asList(eatTheRest));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
58	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this.posixParser));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this.posixParser));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this.posixParser));	  tokens.add(Arrays.asList(eatTheRest));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
59	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  this.options);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-- "  +  this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
60	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ").equals(this.options));  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-- ").equals(this.options));	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
61	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ").equals(this.options);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-- ").equals(this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	48	None	replace
62	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  +  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  Option>(tokens.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  LinkedList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size()  -  1);	  tokens    =    new    ArrayList    <    Option>(tokens.size());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  false);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options),  false);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(options),  false);	  tokens.addAll(Arrays.asList(options),    true);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
66	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options)+  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options)+  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(options)+  1);	  tokens.addAll(Arrays.asList(options),    true);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
67	[BUG]  [BUGGY]  tokens.add( "null ");  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "null ");  eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "null ");  eatTheRest  =  true;	  tokens.add(   "n   ");    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
68	[BUG]  [BUGGY]  tokens.add( "n ");  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "n ");  eatTheRest  =  false;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "n ");  eatTheRest  =  false;	  tokens.add(   "n   ");    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
69	[BUG]  [BUGGY]  tokens.add( "-- ");  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ");  eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-- ");  eatTheRest  =  true;	  tokens.add(   "n   ");    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
70	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Lists.newLinkedList();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Lists.newLinkedList();	  tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(0);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Lists.newArrayList(0);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Lists.newArrayList(0);	  tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Lists.newArrayList(size()  -  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Lists.newArrayList(size()  -  1);	  tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  TreeSet  <  Option>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  TreeSet  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
74	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
75	[BUG]  [BUGGY]  tokens.add( "[null] ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "[null] ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "[null] ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
76	[BUG]  [BUGGY]  tokens.remove( "null ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.remove( "null ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this,  options));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this,  options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this,  options));	  tokens.add(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
78	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this,  eatTheRest));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this,  eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this,  eatTheRest));	  tokens.add(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
79	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(tokens!=  null)  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(tokens!=  null)  {  tokens.clear();  }	  if(eatTheRest!=    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
80	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1;  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1;	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
81	[BUG]  [BUGGY]  tokens.add( "[none] ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "[none] ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "[none] ");	  tokens.add(   "none   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
82	[BUG]  [BUGGY]  tokens.add( "this ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "this ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "this ");	  tokens.add(   "none   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
83	[BUG]  [BUGGY]  tokens.add( "msg.js.utf8 ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "msg.js.utf8 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "msg.js.utf8 ");	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
84	[BUG]  [BUGGY]  tokens.remove( "msg.js.utf-8 ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove( "msg.js.utf-8 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.remove( "msg.js.utf-8 ");	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
85	[BUG]  [BUGGY]  tokens.add( ",msg.js.utf-8 ");  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( ",msg.js.utf-8 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( ",msg.js.utf-8 ");	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
86	[BUG]  [BUGGY]  tokens.add( "000 ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "000 ");	  tokens.add(   "0000   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
87	[BUG]  [BUGGY]  tokens.add( "0 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "0 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "0 ");	  tokens.add(   "0000   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
88	[BUG]  [BUGGY]  tokens.add( "00 ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "00 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "00 ");	  tokens.add(   "0000   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
89	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.eatTheRest),  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.eatTheRest),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.eatTheRest),  true);	  tokens.addAll(Arrays.asList(this.eatTheRest));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
90	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.remove(0);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.remove(0);	  tokens.remove(   "--   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
91	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
92	[BUG]  [BUGGY]  tokens.add( "-000000 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-000000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-000000 ");	  tokens.add(   "-00000   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
93	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest!=  null)  {  eatTheRest  =  false;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
94	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.eatTheRest),  this.options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.eatTheRest),  this.options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.eatTheRest),  this.options);	  tokens.addAll(Arrays.asList(this.eatTheRest));    	non-compiled	[CE]  <identifier>  expected	33	None	replace
95	[BUG]  [BUGGY]  tokens.add(Arrays.asList(this),  eatTheRest);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Arrays.asList(this),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Arrays.asList(this),  eatTheRest);	  tokens.add(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	18	None	replace
96	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);	  tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
97	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.tags));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.tags));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.tags));	  tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
98	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	Tokens  tokens  =  Lists.newArrayList(tokens);	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
99	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  Lists.newArrayList(tokens.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	Tokens  tokens  =  Lists.newArrayList(tokens.size());	  Tokens    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
100	[BUG]  [BUGGY]  tokens.add( "### ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "### ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "### ");	  tokens.add(   "#000   ");    	non-compiled	[CE]  <identifier>  expected	22	None	replace
101	[BUG]  [BUGGY]  tokens.addAll(this.tokens);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(this.tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(this.tokens);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
102	[BUG]  [BUGGY]  tokens.add(Lists.newArrayList());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add(Lists.newArrayList());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add(Lists.newArrayList());	  if(tokens!=    null)    {    tokens.addAll(Lists.newArrayList());    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  tokens.add( "one ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "one ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "one ");	  tokens.add(   "none   ");    	non-compiled	[CE]  <identifier>  expected	41	None	replace
104	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest),  options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest),  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  eatTheRest),  options);	  tokens.addAll(Arrays.asList(this,    eatTheRest));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
105	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  java.util.ArrayList  <  Option>();	  tokens    =    new    LinkedList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
106	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  OptionFailure>();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  java.util.ArrayList  <  OptionFailure>();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  java.util.ArrayList  <  OptionFailure>();	  tokens    =    new    LinkedList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
107	[BUG]  [BUGGY]  tokens.add( "0000000 ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "0000000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "0000000 ");	  tokens.add(   "0000   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
108	[BUG]  [BUGGY]  tokens.add( "msg.js.utf-8 ",  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "msg.js.utf-8 ",  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "msg.js.utf-8 ",  eatTheRest);	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
109	[BUG]  [BUGGY]  tokens.add( "msg.js.utf-9 ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "msg.js.utf-9 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "msg.js.utf-9 ");	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
110	[BUG]  [BUGGY]  tokens.add( "null ",  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "null ",  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "null ",  eatTheRest);	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
111	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options  =  Lists.newArrayList();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options  =  Lists.newArrayList();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest)  {  tokens.add( "-- ");  tokens.add( "-- ");  }  else  {  options  =  Lists.newArrayList();  }	  tokens.add(   "--   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
112	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Lists.newArrayList(size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Lists.newArrayList(size());	  tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
113	[BUG]  [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
114	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
115	[BUG]  [BUGGY]  tokens.addAll(size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(size());	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
116	[BUG]  [BUGGY]  tokens.addAll(options);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(options);	  tokens.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
117	[BUG]  [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(size()  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Lists.newArrayListWithCapacity(size()  -  1);  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Lists.newArrayListWithCapacity(size()  -  1);	  tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
118	[BUG]  [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest  ==  true)  {  eatTheRest  =  false;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
119	[BUG]  [BUGGY]  while(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  while(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	while(eatTheRest!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
120	[BUG]  [BUGGY]  tokens  =  Collections.emptyList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  Collections.emptyList();  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  Collections.emptyList();	  if(tokens!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
121	[BUG]  [BUGGY]  tokens.add( "- ".equals(this.eatTheRest));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(this.eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "- ".equals(this.eatTheRest));	  tokens.add(   "--   ");    tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	24	None	replace
122	[BUG]  [BUGGY]  tokens.add( "msg.js.until.eatTheRest ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "msg.js.until.eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "msg.js.until.eatTheRest ");	  tokens.add(   "msg.js.utf-8   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
123	[BUG]  [BUGGY]  tokens.add( "%2000 ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "%2000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "%2000 ");	  tokens.add(   "%000   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
124	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  OptionFailure>(size());	  tokens    =    new    ArrayList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
125	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(tokens.size());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  ArrayList  <  OptionFailure>(tokens.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  ArrayList  <  OptionFailure>(tokens.size());	  tokens    =    new    ArrayList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
126	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  null));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  null));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  null));	  tokens.addAll(Arrays.asList(this,    eatTheRest));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
127	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  list));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this,  list));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this,  list));	  tokens.addAll(Arrays.asList(this,    eatTheRest));    	non-compiled	[CE]  <identifier>  expected	17	None	replace
128	[BUG]  [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
129	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(tokens.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens  =  new  LinkedList  <  OptionFailure>(tokens.size());  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens  =  new  LinkedList  <  OptionFailure>(tokens.size());	  tokens    =    new    LinkedList    <    OptionFailure>();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
130	[BUG]  [BUGGY]  tokens.add( "-0.000 ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.add( "-0.000 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.add( "-0.000 ");	  tokens.add(   "-000   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
131	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options),  this.eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(this.options),  this.eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(this.options),  this.eatTheRest);	  tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
132	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  this);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(options),  this);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(options),  this);	  tokens.addAll(Arrays.asList(options),    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
133	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest),  true);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	tokens.addAll(Arrays.asList(eatTheRest),  true);	  tokens.addAll(Arrays.asList(options),    true);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
134	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
