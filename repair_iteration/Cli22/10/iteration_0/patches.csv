bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.add(token);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    tokens.add(token);  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    tokens.add(token);		non-compiled	[CE]  <identifier>  expected	20	None	add
2	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
3	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.put(token,  stopAtNonOption);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
4	[BUG]  [BUGGY]    tokens.add(token);  eatTheRest  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    tokens.add(token);  eatTheRest  =  stopAtNonOption;  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    tokens.add(token);  eatTheRest  =  stopAtNonOption;		non-compiled	[CE]  <identifier>  expected	20	None	add
5	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.add(token);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  options.add(token);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
6	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token,  stopAtNonOption);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
7	[BUG]  [BUGGY]  tokens.add(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token)&&  stopAtNonOption;  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token)&&  stopAtNonOption;	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
8	[BUG]  [BUGGY]  tokens.add(token  + ", "  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(token  + ", "  +  stopAtNonOption);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(token  + ", "  +  stopAtNonOption);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
9	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  for(String  token  :  tokens)  {  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
10	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(token);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  for(String  token  :  tokens)  {  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
11	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }  [BUGGY]  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  tokens.add(token);  }		non-compiled	[CE]  <identifier>  expected	20	None	add
12	[BUG]  [BUGGY]  tokens.add(stopAtNonOption);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(stopAtNonOption);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(stopAtNonOption);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(stopAtNonOption?  token  :  stopAtNonOption);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(stopAtNonOption?  token  :  stopAtNonOption);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
14	[BUG]  [BUGGY]  tokens.add(Token.EMPTY);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(Token.EMPTY);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.EMPTY);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
15	[BUG]  [BUGGY]  tokens.add(Token.NAME);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }    [BUGGY]  tokens.add(Token.NAME);  [BUGGY]  }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	tokens.add(Token.NAME);	tokens.add(token);  	non-compiled	[CE]  <identifier>  expected	19	None	replace
