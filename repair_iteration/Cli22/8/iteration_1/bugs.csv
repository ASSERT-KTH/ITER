bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  processStringToken(token,  stopAtNonOption);  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
2	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options);  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  stopAtNonOption,  options);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
3	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  acceptToken(token,  stopAtNonOption);  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
4	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  stopAtNonOption,  arguments);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
5	[BUG]  [BUGGY]    [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	  	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
6	[BUG]  [BUGGY]    PosixParser  parser  =(PosixParser)iter.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    PosixParser  parser  =(PosixParser)iter.next();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    PosixParser  parser  =(PosixParser)iter.next();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
7	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
8	[BUG]  [BUGGY]    PosixParser  parser  =(PosixParser)options.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    PosixParser  parser  =(PosixParser)options.clone();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    PosixParser  parser  =(PosixParser)options.clone();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
9	[BUG]  [BUGGY]    PosixParser  parser  =(PosixParser)options.get(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    PosixParser  parser  =(PosixParser)options.get(pos);  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    PosixParser  parser  =(PosixParser)options.get(pos);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
10	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  arguments.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  <  String>  iter  =  arguments.iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
11	[BUG]  [BUGGY]  testOptionToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  testOptionToken(token,  stopAtNonOption);  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  stopAtNonOption);	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
12	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.getOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  <  String>  iter  =  options.getOptions().iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  <  String>  iter  =  options.getOptions().iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
13	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.entities().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  <  String>  iter  =  options.entities().iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  <  String>  iter  =  options.entities().iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
14	[BUG]  [BUGGY]    Option  option  =  options.getOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Option  option  =  options.getOption(opt);  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Option  option  =  options.getOption(opt);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
15	[BUG]  [BUGGY]    PosixParser  <  String>  iter  =  options.getOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    PosixParser  <  String>  iter  =  options.getOption(opt);  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    PosixParser  <  String>  iter  =  options.getOption(opt);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
16	[BUG]  [BUGGY]    Iterator  iter  =  tokens.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  iter  =  tokens.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  iter  =  tokens.iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
17	[BUG]  [BUGGY]    Iterator  iter  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  iter  =  options.iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  iter  =  options.iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
18	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]    Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	    Iterator  <  String>  iter  =  options.entrySet().iterator();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	add
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]    ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]      ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure  [CONTEXT]  else  if  (token.startsWith( "- "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]  if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processOptionToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	processOptionToken(token,  stopAtNonOption);  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
