bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
2	[BUG]  [BUGGY]  processStringToken(token,  options.hasOption(opt));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.hasOption(opt));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.hasOption(opt));	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
3	[BUG]  [BUGGY]  parseStringToken(token,  options.hasOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseStringToken(token,  options.hasOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  options.hasOption(token));	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
4	[BUG]  [BUGGY]  processStringToken(token,  options.hasOption(option));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.hasOption(option));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.hasOption(option));	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
5	[BUG]  [BUGGY]  processStringToken(token,  options.hasOption(options));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.hasOption(options));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.hasOption(options));	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
6	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  -  2  -  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
7	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  +  2);	  PosixParser    parser    =(PosixParser)options.get(pos    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
8	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  -  2  +  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
9	[BUG]  [BUGGY]  Option  optionToken  =  options.getOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  optionToken  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  optionToken  =  options.getOption(token,  stopAtNonOption);	  Option    optionToken    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
10	[BUG]  [BUGGY]  Option  optionToken  =  options.getOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  optionToken  =  options.getOption(opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  optionToken  =  options.getOption(opt);	  Option    optionToken    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
11	[BUG]  [BUGGY]  Option  optionToken  =  options.getOption(token)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  optionToken  =  options.getOption(token)+  1;  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  optionToken  =  options.getOption(token)+  1;	  Option    optionToken    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
12	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add(token,  stopAtNonOption);	  tokens.add(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
13	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add( "- ");	  tokens.add(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
14	[BUG]  [BUGGY]  parseStringToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseStringToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  stopAtNonOption,  options);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
15	[BUG]  [BUGGY]  processStringToken(token,  option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  option,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  option,  stopAtNonOption);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
16	[BUG]  [BUGGY]  acceptStringToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptStringToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptStringToken(token,  stopAtNonOption,  options);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
17	[BUG]  [BUGGY]  processOptionToken(token,  option,  options,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  option,  options,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  options,  stopAtNonOption);	  processOptionToken(token,    option,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
18	[BUG]  [BUGGY]  processOptionToken(token,  options,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  stopAtNonOption);	  processOptionToken(token,    option,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(options).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(options).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOption(options).iterator();	  Iterator    <    String>    iter    =    options.getOption(token).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(opt).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(opt).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOption(opt).iterator();	  Iterator    <    String>    iter    =    options.getOption(token).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(pos).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(pos).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOption(pos).iterator();	  Iterator    <    String>    iter    =    options.getOption(token).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
22	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  arguments,  stopAtNonOption);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
23	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  pos);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
24	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  arguments,  pos);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
25	[BUG]  [BUGGY]  processOptionToken(token,  options.hasOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.hasOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.hasOption(token));	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
26	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(token);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
27	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(pos  +  1);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
28	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(pos  -  1);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
29	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(0);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(0);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
30	[BUG]  [BUGGY]  testOptionToken(token,  option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  option,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  option,  stopAtNonOption);	  testOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(token,  pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(token,  pos);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(options,  token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(options,  token);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
34	[BUG]  [BUGGY]  acceptToken(token,  option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  option,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  option,  stopAtNonOption);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "opt ",  token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "opt ",  token);	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
36	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt "  +  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "opt "  +  token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "opt "  +  token);	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
37	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter1.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter1.next();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter1.next();	  PosixParser    parser    =(PosixParser)iter2.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
38	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter3.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter3.next();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter3.next();	  PosixParser    parser    =(PosixParser)iter2.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
39	[BUG]  [BUGGY]  processOptionToken(token,  option,  options.hasOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  option,  options.hasOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  options.hasOption(token));	  processOptionToken(token,    option,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
40	[BUG]  [BUGGY]  processOptionToken(token,  option,  options.stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  option,  options.stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  options.stopAtNonOption);	  processOptionToken(token,    option,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(pos  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(pos  +  1);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos,  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(pos,  token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(pos,  token);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
43	[BUG]  [BUGGY]  processOptionToken(token,  opt,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  opt,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  opt,  arguments,  pos);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
44	[BUG]  [BUGGY]  processOptionToken(token,  options,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  stopAtNonOption,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
45	[BUG]  [BUGGY]  processOptionToken(token,  option,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  option,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  arguments,  pos);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
46	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  stopAtNonOption,  options,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  stopAtNonOption,  options,  pos);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
47	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)&&  options.hasOption(opt);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
48	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)&&  options.hasOption(option);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
49	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)&&  options.hasOption(options);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
50	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasArg(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasArg(token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)&&  options.hasArg(token);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
51	[BUG]  [BUGGY]  parseOptionToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseOptionToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseOptionToken(token,  stopAtNonOption);	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
52	[BUG]  [BUGGY]  cearcToFrontToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcToFrontToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcToFrontToken(token,  stopAtNonOption,  arguments);	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
53	[BUG]  [BUGGY]  cearcToFrontToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcToFrontToken(token,  stopAtNonOption,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcToFrontToken(token,  stopAtNonOption,  options);	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
54	[BUG]  [BUGGY]  cearcToFrontToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcToFrontToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcToFrontToken(token,  stopAtNonOption);	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
55	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
56	[BUG]  [BUGGY]  List  <  String>  iter  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  List  <  String>  iter  =  options.iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	List  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
57	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().keySet().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
58	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().entrySet().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(option,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(option,  stopAtNonOption);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
60	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
61	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(option);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
62	[BUG]  [BUGGY]  parseStringToken(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseStringToken(token,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  pos);	  parseStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
63	[BUG]  [BUGGY]  parseStringToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseStringToken(token,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  options);	  parseStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
64	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.peek()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter.peek()  -  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.peek()  -  1;	  PosixParser    parser    =(PosixParser)iter.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption( "- "  +  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "- "  +  token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "- "  +  token);	  Option    option    =    options.getOption(   "-   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption( "- ",  token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "- ",  token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "- ",  token);	  Option    option    =    options.getOption(   "-   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
67	[BUG]  [BUGGY]  Options  option  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  option  =  options.getOption(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(token);	  Options    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
68	[BUG]  [BUGGY]  Options  option  =  options.getOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(token,  stopAtNonOption);	  Options    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
69	[BUG]  [BUGGY]  Options  option  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  option  =  options.getOption(option);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(option);	  Options    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
70	[BUG]  [BUGGY]  acceptToken(token,  options,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  options,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  options,  stopAtNonOption);	  acceptToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
71	[BUG]  [BUGGY]  acceptToken(token,  option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  option);	  acceptToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
72	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processStringToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterables().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterables().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getAllIterables().iterator();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
74	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables(pos).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getIterables(pos).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getIterables(pos).iterator();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
75	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(token);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.get(token);	  PosixParser    parser    =(PosixParser)options.get(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
76	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(p);	  PosixParser    parser    =(PosixParser)options.get(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
77	[BUG]  [BUGGY]  hopToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  hopToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	hopToken(token,  stopAtNonOption);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
78	[BUG]  [BUGGY]  flipToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  flipToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	flipToken(token,  stopAtNonOption);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
79	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptIterator().iterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOpt().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOpt().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOpt().iterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  pos);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  pos);  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  pos);  }	  processStringToken(token,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processStringToken(token,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
83	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption,  pos);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
84	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption,  arguments,  pos);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
85	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption,  opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption,  opt);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
86	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.get(pos);	  PosixParser    parser    =(PosixParser)this.options.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
87	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)this.options.get(0);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.get(0);	  PosixParser    parser    =(PosixParser)this.options.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
88	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  +  1);	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
89	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  arguments[pos]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  arguments[pos]);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  arguments[pos]);	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
90	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos],  stopAtNonOption);	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
91	[BUG]  [BUGGY]  testOptionToken(token,  pos,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  pos,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  pos,  stopAtNonOption);	  testOptionToken(token,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
92	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(token,  stopAtNonOption);	  PosixParser    <    String>    iter    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
93	[BUG]  [BUGGY]  tokens.add(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  tokens.add(pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add(pos);	  tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
94	[BUG]  [BUGGY]  testOptionToken(token,  option,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  option,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  option,  arguments);	  testOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
95	[BUG]  [BUGGY]  testOptionToken(token,  stopAtNonOption,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  stopAtNonOption,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  stopAtNonOption,  arguments,  pos);	  testOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
96	[BUG]  [BUGGY]  testOptionToken(token,  options.stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  options.stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  options.stopAtNonOption,  arguments);	  testOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
97	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(0);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(0);	  PosixParser    parser    =(PosixParser)options.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
98	[BUG]  [BUGGY]  processStringToken(token,  options,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options,  stopAtNonOption);	  processStringToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
99	[BUG]  [BUGGY]  processStringToken(token,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  arguments);	  processStringToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
100	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getIterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getIterator();	  Iterator    <    String>    iter    =    options.getOptionIterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
101	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptionIterator(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptionIterator(pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptionIterator(pos);	  Iterator    <    String>    iter    =    options.getOptionIterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
102	[BUG]  [BUGGY]  akToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  akToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	akToken(token,  stopAtNonOption);	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
103	[BUG]  [BUGGY]  ruptToken(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  ruptToken(token,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	ruptToken(token,  pos);	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
104	[BUG]  [BUGGY]  parseToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseToken(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseToken(token,  stopAtNonOption);	  dealToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
105	[BUG]  [BUGGY]  Option  options  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOption(pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(pos);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
106	[BUG]  [BUGGY]  Options  options  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  options  =  options.getOption(pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  options  =  options.getOption(pos);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
107	[BUG]  [BUGGY]  parseOptionToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseOptionToken(token,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseOptionToken(token,  options);	  parseOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
108	[BUG]  [BUGGY]  parseOptionToken(token,  option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseOptionToken(token,  option,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseOptionToken(token,  option,  stopAtNonOption);	  parseOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
109	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
110	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(pos  +  1);	  PosixParser    <    String>    iter    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
111	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.nextToken();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.nextToken();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.nextToken();	  PosixParser    parser    =(PosixParser)iter.nextToken();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
112	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken()  -  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.nextToken()  -  1;	  PosixParser    parser    =(PosixParser)iter.nextToken();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
113	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.nextToken();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)this.options.nextToken();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.nextToken();	  PosixParser    parser    =(PosixParser)iter.nextToken();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
114	[BUG]  [BUGGY]  processOptionToken(token,  option,  arguments,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  option,  arguments,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  arguments,  stopAtNonOption);	  processOptionToken(token,    option,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
115	[BUG]  [BUGGY]  processStringToken(token,  opt,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  opt,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  opt,  arguments);	  processOptionToken(token,    opt,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
116	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOptions(opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOptions(opt);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
117	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOptions(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOptions(token,  stopAtNonOption);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
118	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOptions(option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOptions(option);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
119	[BUG]  [BUGGY]  testOptionToken(token,  options,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  options,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  options,  stopAtNonOption);	  testOptionToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
120	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option,  arguments);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(option,  arguments);	  PosixParser    <    String>    iter    =    options.getOption(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
121	[BUG]  [BUGGY]  Iterator  iter  =  tokens.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  iter  =  tokens.keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  tokens.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
122	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(options);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(options);	  PosixParser    <    String>    iter    =    options.getOption(arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
123	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(options,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(options,  arguments);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(options,  arguments);	  PosixParser    <    String>    iter    =    options.getOption(arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
124	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  1  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  1  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  +  1  -  1);	  PosixParser    parser    =(PosixParser)options.get(pos    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
125	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterators().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getAllIterators().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getAllIterators().iterator();	  Iterator    <    String>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
126	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(token);	  Iterator    <    String>    iter    =    options.getOptions().iterator();    tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
127	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(option);	  Iterator    <    String>    iter    =    options.getOptions().iterator();    tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
128	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add( "- ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add( "- ");  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add( "- ");	  Iterator    <    String>    iter    =    options.getOptions().iterator();    tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
129	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  1  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  1  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  -  1  +  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
130	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(0,  pos  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(0,  pos  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(0,  pos  -  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
131	[BUG]  [BUGGY]  processStringToken(token,  options.stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.stopAtNonOption,  arguments);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
132	[BUG]  [BUGGY]  processStringToken(token,  option,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  option,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  option,  arguments);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
133	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.peek()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.peek()  -  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.peek()  -  1;	  PosixParser    parser    =(PosixParser)options.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
134	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.peek()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.peek()  +  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.peek()  +  1;	  PosixParser    parser    =(PosixParser)options.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
135	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.peek(1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.peek(1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.peek(1);	  PosixParser    parser    =(PosixParser)options.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
136	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.getParser();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.getParser();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.getParser();	  PosixParser    parser    =(PosixParser)iter.getParser();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
137	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)tokens.peek();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)tokens.peek();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)tokens.peek();	  PosixParser    parser    =(PosixParser)iter.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
138	[BUG]  [BUGGY]  processOptionToken(token,  options.eatTheRest,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.eatTheRest,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.eatTheRest,  arguments);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
139	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  options.eatTheRest);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  options.eatTheRest);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  options.eatTheRest);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
140	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
141	[BUG]  [BUGGY]  testOptionToken(token,  null);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  null);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  null);	  testOptionToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
142	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token.length  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token.length  -  2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(token.length  -  2);	  PosixParser    parser    =(PosixParser)options.get(pos    -    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
143	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
144	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token.length  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token.length  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(token.length  -  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
145	[BUG]  [BUGGY]  Option  optionToken  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  optionToken  =  options.getOption(option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  optionToken  =  options.getOption(option);	  Option    optionToken    =    options.getOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
146	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getAllOptions().values().iterator();	  Iterator    <    String>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
147	[BUG]  [BUGGY]  acceptToken(token,  option,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  option,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  option,  options);	  acceptToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	35	None	replace
148	[BUG]  [BUGGY]  akToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  akToken(token,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	akToken(token,  options);	  acceptToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
149	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(option);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(option);	  PosixParser    parser    =(PosixParser)options.get(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
150	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(opt);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(opt);	  PosixParser    parser    =(PosixParser)options.get(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
151	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos]  -  1);	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
152	[BUG]  [BUGGY]  processOptionToken(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token);	  dealToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
153	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
154	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  bucketToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	bucketToken(token,  stopAtNonOption,  arguments);	  bucketToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
155	[BUG]  [BUGGY]  Option  option  =  options.getOption( "- "+pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "- "+pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "- "+pos);	  Option    option    =    options.getOption(   "-   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
156	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(option,  stopAtNonOption);	  PosixParser    <    String>    iter    =    options.getOption(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
157	[BUG]  [BUGGY]  tokens.add( "- "  +  opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  tokens.add( "- "  +  opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add( "- "  +  opt);	  tokens.add(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
158	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ",  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption( "opt ",  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "opt ",  pos);	  Option    option    =    options.getOption(   "opt   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
159	[BUG]  [BUGGY]  processStringToken(token,  null);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  null);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  null);	  processStringToken(token,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
160	[BUG]  [BUGGY]  processStringToken(token,  options.getOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.getOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.getOption(token));	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
161	[BUG]  [BUGGY]  cearcToFrontToken(token,  stopAtNonOption)+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcToFrontToken(token,  stopAtNonOption)+  1;  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcToFrontToken(token,  stopAtNonOption)+  1;	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
162	[BUG]  [BUGGY]  List  <  String>  iter  =  options.getOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  List  <  String>  iter  =  options.getOptions().values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	List  <  String>  iter  =  options.getOptions().values().iterator();	  Iterator    <    String>    iter    =    options.getOptions().values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
163	[BUG]  [BUGGY]  parseOptionToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseOptionToken(token,  stopAtNonOption,  arguments);	  parseOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
164	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)||  options.hasOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  stopAtNonOption)||  options.hasOption(token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)||  options.hasOption(token);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
165	[BUG]  [BUGGY]  ProcessOptionToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  ProcessOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	ProcessOptionToken(token,  stopAtNonOption,  arguments);	  processOptionToken(token,    opt,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
166	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(option).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOption(option).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOption(option).iterator();	  Iterator    <    String>    iter    =    options.getOption(token).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
167	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)opt.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)opt.clone();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)opt.clone();	  PosixParser    parser    =(PosixParser)pos.clone();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
168	[BUG]  [BUGGY]  testOptionToken(token,  opt,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  opt,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  opt,  arguments);	  testOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
169	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(options.indexOf( "- "));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(options.indexOf( "- "));  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(options.indexOf( "- "));	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
170	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
171	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(options,  pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(options,  pos);	  Option    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
172	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken(2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken(2);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.nextToken(2);	  PosixParser    parser    =(PosixParser)iter.nextToken();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
173	[BUG]  [BUGGY]  Options  option  =  options.getOption(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  option  =  options.getOption(options);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(options);	  Options    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
174	[BUG]  [BUGGY]  processStringToken(token,  options.getOption( "- "),  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.getOption( "- "),  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.getOption( "- "),  arguments);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
175	[BUG]  [BUGGY]  processStringToken(token,  option,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  option,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  option,  options);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
176	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().values().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getIterables().values().iterator();	  Iterator    <    String>    iter    =    options.getIterables().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
177	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)tokens.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)tokens.clone();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)tokens.clone();	  PosixParser    parser    =(PosixParser)iter.clone();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
178	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos,  stopAtNonOption);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(pos,  stopAtNonOption);	  PosixParser    <    String>    iter    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
179	[BUG]  [BUGGY]  Option  options  =  options.getOption(options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOption(options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(options);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
180	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptionsIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptionsIterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptionsIterator();	  Iterator    <    String>    iter    =    options.getOptionIterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
181	[BUG]  [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
182	[BUG]  [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
183	[BUG]  [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  options.addOptionToken(token);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  options.addOptionToken(token);  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  options.addOptionToken(token);  }	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
184	[BUG]  [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  ruptToken(token,  stopAtNonOption);  }  else  {  tokens.add(opt);  }	  ruptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
185	[BUG]  [BUGGY]  Options  option  =  options.getOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Options  option  =  options.getOption(opt);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(opt);	  Options    option    =    options.getOption(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
186	[BUG]  [BUGGY]  Option  options  =  iter.getOptions(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  iter.getOptions(token);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  iter.getOptions(token);	  Option    options    =    options.getOptions(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
187	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptIterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptIterator();	  Iterator    <    String>    iter    =    options.getOptOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
188	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(opt);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(opt);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
189	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(optional);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.get(optional);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(optional);	  PosixParser    <    String>    iter    =    options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
190	[BUG]  [BUGGY]  processStringToken(token,  arguments,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  arguments,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  arguments,  stopAtNonOption);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
191	[BUG]  [BUGGY]  processStringToken(token,  opt,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  opt,  options);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  opt,  options);	  processStringToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
192	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p  +  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(p  +  1);	  PosixParser    parser    =(PosixParser)options.get(pos    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
193	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
194	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  burstToken(token,  stopAtNonOption);  }	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
195	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  options.hasOption(token));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processStringToken(token,    options.hasOption(token));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
196	[BUG]  [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  accept(token,  stopAtNonOption)&&  options.hasOption(opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	accept(token,  stopAtNonOption)&&  options.hasOption(opt);	  acceptToken(token,    stopAtNonOption)&&    options.hasOption(token);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
197	[BUG]  [BUGGY]  Option  options  =  iter.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  iter.next();  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  iter.next();	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
198	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.list().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
199	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getValues().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getValues().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getValues().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
200	[BUG]  [BUGGY]  cearcToFrontToken(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcToFrontToken(token,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcToFrontToken(token,  pos);	  cearcăToFrontToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
201	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  option  =  options.getOption(option,  pos);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(option,  pos);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
202	[BUG]  [BUGGY]  processOptionToken(token,  options,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  arguments);	  processOptionToken(token,    option,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
203	[BUG]  [BUGGY]  processOptionToken(token,  options,  arguments,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  arguments,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  arguments,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
204	[BUG]  [BUGGY]  processOptionToken(token,  options,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  arguments,  pos);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  arguments,  pos);	  processOptionToken(token,    stopAtNonOption,    arguments,    pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
205	[BUG]  [BUGGY]  Iterator  iter  =  options.getOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  iter  =  options.getOptions().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  options.getOptions().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
206	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    processStringToken(token,    stopAtNonOption);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
207	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.remove();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter.remove();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.remove();	  PosixParser    parser    =(PosixParser)iter.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
208	[BUG]  [BUGGY]  pos  =  processOptionToken(token,  opt,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  pos  =  processOptionToken(token,  opt,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	pos  =  processOptionToken(token,  opt,  arguments);	  processOptionToken(token,    opt,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
209	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOtherOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOtherOptions().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOtherOptions().iterator();	  Iterator    <    String>    iter    =    options.getAllOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
210	[BUG]  [BUGGY]  [Delete]  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  [Delete]  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	[Delete]	  if(stopAtNonOption)    {    processStringToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
211	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  opt);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  opt);	  processOptionToken(token,    options.stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
212	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.peek();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)this.options.peek();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.peek();	  PosixParser    parser    =(PosixParser)options.peek();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	57	None	replace
213	[BUG]  [BUGGY]  cearcăToString(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  cearcăToString(token,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcăToString(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processStringToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
214	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken2();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken2();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.nextToken2();	  PosixParser    parser    =(PosixParser)iter.nextToken();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
215	[BUG]  [BUGGY]  acceptToken(token,  opt,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  opt,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  opt,  arguments);	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
216	[BUG]  [BUGGY]  acceptToken(token,  options.getOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  acceptToken(token,  options.getOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  options.getOption(token));	  acceptToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
217	[BUG]  [BUGGY]  processOptionToken(token,  options,  option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  options,  option);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options,  option);	  processOptionToken(token,    option,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
218	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  parser  =(PosixParser)options.get(p  -  1);  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(p  -  1);	  PosixParser    parser    =(PosixParser)options.get(pos    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
219	[BUG]  [BUGGY]  processOptionToken(token,  opt,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processOptionToken(token,  opt,  stopAtNonOption);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  opt,  stopAtNonOption);	  processOptionToken(token,    option,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	41	None	replace
220	[BUG]  [BUGGY]  parseStringToken(token,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  parseStringToken(token,  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  arguments);	  parseStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
221	[BUG]  [BUGGY]  testOptionToken(token,  options.hasOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  testOptionToken(token,  options.hasOption(token));  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  options.hasOption(token));	  testOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
222	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions(token).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions(token).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions(token).iterator();	  Iterator    <    String>    iter    =    options.getOption(token).iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
223	[BUG]  [BUGGY]  processStringToken(token,  options.nextToken(),  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  processStringToken(token,  options.nextToken(),  arguments);  [BUGGY]      }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.nextToken(),  arguments);	  processStringToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
224	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos])+  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos])+  1;  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos])+  1;	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
225	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]).iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos]).iterator();	  PosixParser    <    String>    iter    =    options.getOption(arguments[pos]);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
226	[BUG]  [BUGGY]  Iterator  iter  =  options.list().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      else  if  (token.startsWith(     "-     "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {      [BUGGY]  Iterator  iter  =  options.list().iterator();  [BUGGY]      processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  options.list().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
