bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iter  =  arguments.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  iter  =  arguments.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  arguments.iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
2	[BUG]  [BUGGY]  Iterator  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  iter  =  options.values().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  options.values().iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
3	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  bucketToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	bucketToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
5	[BUG]  [BUGGY]  bucketToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  bucketToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	bucketToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
6	[BUG]  [BUGGY]  parseStringToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  parseStringToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseStringToken(token,  stopAtNonOption);	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
7	[BUG]  [BUGGY]  processStringToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processStringToken(token,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options);	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
8	[BUG]  [BUGGY]  processStringToken(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processStringToken(token,  pos);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  pos);	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
9	[BUG]  [BUGGY]  processStringToken(token,  options.hasOption(token));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processStringToken(token,  options.hasOption(token));  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  options.hasOption(token));	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
10	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(pos);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(pos);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
11	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(token);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
12	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.get(pos);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.get(pos);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
13	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(option);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(option);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
14	[BUG]  [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  options.stopAtNonOption,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options.stopAtNonOption,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
15	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  stopAtNonOption,  arguments,  pos);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  stopAtNonOption,  arguments,  pos);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
16	[BUG]  [BUGGY]  processOptionToken(token,  option,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  option,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
19	[BUG]  [BUGGY]  testOptionToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  testOptionToken(token,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  options);	  testOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
20	[BUG]  [BUGGY]  testOptionToken(token,  pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  testOptionToken(token,  pos);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  pos);	  testOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
21	[BUG]  [BUGGY]  testOptionToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  testOptionToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  stopAtNonOption,  arguments);	  testOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
22	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  1);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  -  1);	      PosixParser    parser    =(PosixParser)options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
23	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.get(token);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(token);	      PosixParser    parser    =(PosixParser)options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
24	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  +  1);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  +  1);	      PosixParser    parser    =(PosixParser)options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption(pos);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(pos);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(option);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
27	[BUG]  [BUGGY]  Options  option  =  options.getOption(pos);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Options  option  =  options.getOption(pos);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Options  option  =  options.getOption(pos);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
28	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.next();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.next();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
29	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)this.options.next();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.next();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
30	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)iter.nextToken();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.nextToken();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
31	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
32	[BUG]  [BUGGY]  Option  option  =  options.getOption( "opt ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption( "opt ");  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "opt ");	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
33	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
34	[BUG]  [BUGGY]  ruptToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  ruptToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	ruptToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
35	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption,  options);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
36	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  acceptToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption,  arguments);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
37	[BUG]  [BUGGY]  acceptToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  acceptToken(token,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  options);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
38	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)this.options.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)this.options.clone();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)this.options.clone();	      PosixParser    parser    =(PosixParser)options.clone();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
39	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)pos.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)pos.clone();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)pos.clone();	      PosixParser    parser    =(PosixParser)options.clone();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
40	[BUG]  [BUGGY]  processOptionToken(token,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  options);	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
41	[BUG]  [BUGGY]  processOptionToken(token,  option,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  option,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  stopAtNonOption);	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
42	[BUG]  [BUGGY]  parseOptionToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  parseOptionToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	parseOptionToken(token,  stopAtNonOption,  options);	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
43	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getIterables().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getIterables().iterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
44	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOption(token).iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOption(token).iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOption(token).iterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
45	[BUG]  [BUGGY]  tokens.add(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  tokens.add(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add(token);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
46	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  acceptToken(token,  stopAtNonOption)&&  options.hasOption(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	acceptToken(token,  stopAtNonOption)&&  options.hasOption(token);	  acceptToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
47	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
48	[BUG]  [BUGGY]  testOptionToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  testOptionToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	testOptionToken(token,  stopAtNonOption,  options);	  testOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
49	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(opt);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();  tokens.add(opt);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
50	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Ilerator  <  String>  iter  =  options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
51	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processStringToken(token,  stopAtNonOption,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  stopAtNonOption,  options);	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
52	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processStringToken(token,  stopAtNonOption,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processStringToken(token,  stopAtNonOption,  arguments);	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
53	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.get(pos  -  2);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.get(pos  -  2);	      PosixParser    parser    =(PosixParser)options.get(pos);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
54	[BUG]  [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  iter  =  options.keySet().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  iter  =  options.keySet().iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
55	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter2.next();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)iter2.next();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter2.next();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
56	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.getParser();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)iter.getParser();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.getParser();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
57	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)options.peek();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)options.peek();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)options.peek();	      PosixParser    parser    =(PosixParser)options.clone();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
58	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().values().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().values().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptions().values().iterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOptOptions().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptOptions().iterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
60	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptionIterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOptionIterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getOptionIterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
61	[BUG]  [BUGGY]  processOptionToken(token,  option,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  option,  options);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  option,  options);	  processOptionToken(token,    stopAtNonOption,    options);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption( "- ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption( "- ");  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption( "- ");	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
63	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOption(opt);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
64	[BUG]  [BUGGY]  dealToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  dealToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	dealToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
65	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().iterator();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getAllOptions().iterator();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Iterator  <  String>  iter  =  options.getAllOptions().iterator();	      Iterator    <    String>    iter    =    options.getOptions().iterator();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
67	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  tokens.add(opt);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	tokens.add(opt);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
68	[BUG]  [BUGGY]  processOptionToken(token,  opt,  arguments);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  processOptionToken(token,  opt,  arguments);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	processOptionToken(token,  opt,  arguments);	  processOptionToken(token,    stopAtNonOption,    arguments);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
69	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	if(stopAtNonOption)  {  processStringToken(token,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  processStringToken(token,    stopAtNonOption);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
72	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  options  =  options.getOptions(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  options  =  options.getOptions(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
73	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.clone();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)iter.clone();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.clone();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
74	[BUG]  [BUGGY]  PosixParser  parser  =(PosixParser)iter.peek();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  parser  =(PosixParser)iter.peek();  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  parser  =(PosixParser)iter.peek();	      PosixParser    parser    =(PosixParser)iter.next();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
75	[BUG]  [BUGGY]  cearcăToFrontToken(token,  stopAtNonOption);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  cearcăToFrontToken(token,  stopAtNonOption);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	cearcăToFrontToken(token,  stopAtNonOption);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
76	[BUG]  [BUGGY]  Option  optionToken  =  options.getOption(token);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  Option  optionToken  =  options.getOption(token);  [BUGGY]    }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	Option  optionToken  =  options.getOption(token);	  if(stopAtNonOption)    {    processOptionToken(token,    stopAtNonOption);    }    else    {    burstToken(token,    stopAtNonOption);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
77	[BUG]  [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    else  if  (token.startsWith(   "-   "))  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {    [BUGGY]  PosixParser  <  String>  iter  =  options.getOption(arguments[pos]);  [BUGGY]    processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  processNonOptionToken(token);  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	PosixParser  <  String>  iter  =  options.getOption(arguments[pos]);	      PosixParser    <    String>    iter    =    options.getOption(opt);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
