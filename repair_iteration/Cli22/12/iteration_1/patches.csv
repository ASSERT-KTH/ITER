bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add( "- "  +  token);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	List  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  if  (token.length()  ==  0  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()  ==  0  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()  ==  0  &&  options.hasOption(token))  {	  if    (token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  if  (token.length()  ==  1  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()  ==  1  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()  ==  1  &&  options.hasOption(token))  {	  if    (token.length()    ==    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  if  (token.length()!=  0  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()!=  0  ||  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()!=  0  ||  options.hasOption(token))  {	  if    (token.length()    >=    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  if  (token.length()  >=  2  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()  >=  2  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()  >=  2  &&  options.hasOption(token))  {	  if    (token.length()!=    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  if  (token.length()!=  0  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()!=  0  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()!=  0  &&  options.hasOption(token))  {	  if    (token.length()!=    2    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  null  :  token;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  null  :  token;  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	token  =(token.startsWith( "- ")||  token.startsWith( "- "))?  null  :  token;	      token    =(token.startsWith(   "-   ")||    token.startsWith(   "-   "))?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  opt.iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  opt.iterator();	      Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
13	[BUG]  [BUGGY]  if(options.hasOption(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(options.hasOption(token)||  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(options.hasOption(token)||  options.hasOption(token))  {	  if    (options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  if(!options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(!options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(!options.hasOption(token))  {	  if    (options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "-n ");  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add( "-n ");	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  tokens.add( "- "  +  pos);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "- "  +  pos);  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add( "- "  +  pos);	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  if  (token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (token.length()  ==  1)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if  (token.length()  ==  1)  {	  if    (token.length()    ==    1    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  token  =(token.startsWith( "-+ ")||  token.startsWith( "-- "))?  token  :  null;  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(token.startsWith( "-+ ")||  token.startsWith( "-- "))?  token  :  null;  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	token  =(token.startsWith( "-+ ")||  token.startsWith( "-- "))?  token  :  null;	      token    =(token.startsWith(   "-   ")||    token.startsWith(   "-   "))?    token    :    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add(opt);  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add(opt);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  tokens.add(chope);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add(chope);  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add(chope);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "-- ");  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add( "-- ");	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  if(options.hasOption(token)||  options.hasOption(opt))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(options.hasOption(token)||  options.hasOption(opt))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(options.hasOption(token)||  options.hasOption(opt))  {	  if    (options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
25	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(options.hasOption(opt))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(options.hasOption(opt))  {	  if    (options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
26	[BUG]  [BUGGY]  if(token.length()!=  1  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(token.length()!=  1  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(token.length()!=  1  &&  options.hasOption(token))  {	  if    (token.length()    ==    1    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  if(token.length()  ==  0  ||  options.hasOption(opt))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(token.length()  ==  0  ||  options.hasOption(opt))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(token.length()  ==  0  ||  options.hasOption(opt))  {	  if    (token.length()    ==    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
29	[BUG]  [BUGGY]  if(token.length()  ==  0  ||  options.hasOption(option))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(token.length()  ==  0  ||  options.hasOption(option))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(token.length()  ==  0  ||  options.hasOption(option))  {	  if    (token.length()    ==    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
30	[BUG]  [BUGGY]  if(token.length()  ==  0  ||  options.contains(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(token.length()  ==  0  ||  options.contains(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(token.length()  ==  0  ||  options.contains(token))  {	  if    (token.length()    ==    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(!stopAtNonOption  &&  options.hasOption(token))  {	  if    (options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  if(token.length()  >  0  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(token.length()  >  0  ||  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	if(token.length()  >  0  ||  options.hasOption(token))  {	  if    (token.length()    >=    0    ||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	Iterator  <  String>  iter  =  options.list().iterator();	      Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- ".equals(token));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "- ".equals(token));  [BUGGY]    if  (token.length()  ==  2  ||  options.hasOption(token))    {  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	tokens.add( "- ".equals(token));	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
