bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  if(options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
3	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.put(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  stopAtNonOption  &&  stopAtNonOption);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.put(token,  stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  stopAtNonOption)&&!options.hasOption(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption  &&  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption?  null  :  stopAtNonOption);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  parent.processOptionToken(token,  stopAtNonOption);  }  else  {  tokens.add(token);  }	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
12	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(stopAtNonOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  option  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(token)&&  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
14	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;	  TokenBuffer    tokens    =    new    TokenBuffer(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
15	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;	  TokenBuffer    tokens    =    new    TokenBuffer(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;  }	  TokenBuffer    tokens    =    new    TokenBuffer(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
17	[BUG]  [BUGGY]  tokens  =  new  ArrayList(tokens);  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens  =  new  ArrayList(tokens);  stopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens  =  new  ArrayList(tokens);  stopAtNonOption  =  true;	  TokenBuffer    tokens    =    new    TokenBuffer(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }	  tokens.add(token);    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  tokens.add(token);  stopAtNonOption  =  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token);  stopAtNonOption  =  StopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  stopAtNonOption  =  StopAtNonOption;	  tokens.add(token);    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	&&  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }	  ||    stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
21	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }	  ||    stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }	  ||    stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
23	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
24	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
25	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  2);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  2);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
26	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  *  2);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
27	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  +  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length()  -  1,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  token,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	&&  stopAtNonOption)  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ||  stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption  &&  tokens.contains(token))  {  tokens.add(token);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
35	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption,  eatTheRest);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
36	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption  &&  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
37	[BUG]  [BUGGY]  tokens.add(stopAtNonOption  &&  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption  &&  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption  &&  stopAtNonOption);	  tokens.add(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  tokens.add(stopAtNonOption)&&!options.hasOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption)&&!options.hasOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption)&&!options.hasOption(token);	  tokens.add(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption?  token  :  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption?  token  :  stopAtNonOption);	  tokens.add(stopAtNonOption?    token    :    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  tokens.add(token?  stopAtNonOption  :  token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token?  stopAtNonOption  :  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token?  stopAtNonOption  :  token);	  tokens.add(stopAtNonOption?    token    :    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  null);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption?  token  :  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption?  token  :  null);	  tokens.add(stopAtNonOption?    token    :    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  tokens.add( ": ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add( ": ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( ": ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  options.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.add(token,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.add(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
48	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  StopAtNonOption;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token);  eatTheRest  =  StopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  eatTheRest  =  StopAtNonOption;	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.get(token)+  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.get(token)+  stopAtNonOption;	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  options.add(token);  }	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
52	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOption(stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
53	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.getOption(token)&&  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOption(token)&&  stopAtNonOption;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
54	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
55	[BUG]  [BUGGY]  options.addOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.addOption(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.addOption(token,  stopAtNonOption);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
56	[BUG]  [BUGGY]  options.addOption(token);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.addOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.addOption(token);	  options.add(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  Options  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Options  options  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Options  options  =  options.getOption(token);	  options.put(token,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
58	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  ||    stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
59	[BUG]  [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.get(token,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.get(token,  stopAtNonOption);	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.getOptions(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOptions(token);	  Option    options    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(token)+  stopAtNonOption;	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
62	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.put(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  stopAtNonOption)&&!stopAtNonOption;	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
64	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( "eatTheRest ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
65	[BUG]  [BUGGY]  tokens.add(token,  StopAtNonOption);  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  StopAtNonOption);  stopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  StopAtNonOption);  stopAtNonOption  =  true;	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  options.add(token);  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.add(token);  stopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.add(token);  stopAtNonOption  =  true;	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  false;  }	  TokenBuffer    tokens    =    new    TokenBuffer(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(token.length(),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  tokens.add(token);  this.eatTheRest  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token);  this.eatTheRest  =  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  this.eatTheRest  =  stopAtNonOption;	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
71	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  Token.EMPTY);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption?  token  :  Token.EMPTY);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption?  token  :  Token.EMPTY);	  tokens.add(stopAtNonOption?    token    :    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
72	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  StopAtNonOption.EMPTY);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(stopAtNonOption?  token  :  StopAtNonOption.EMPTY);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption?  token  :  StopAtNonOption.EMPTY);	  tokens.add(stopAtNonOption?    token    :    token);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
73	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.trim());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.trim());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.trim());	  TokenBuffer    tokens    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
74	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption)&&!stopAtNonOption;	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
75	[BUG]  [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  options  =  options.getOption(token)+  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOption(token)+  stopAtNonOption;	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
76	[BUG]  [BUGGY]  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token);    stopAtNonOption    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
78	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token);	  TokenBuffer    tokens    =    new    TokenBuffer(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
79	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption?  Boolean.TRUE  :  Boolean.FALSE);	  tokens.add(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
80	[BUG]  [BUGGY]  tokens.add(token);  StopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  tokens.add(token);  StopAtNonOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  StopAtNonOption  =  true;	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
81	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.put(token,  stopAtNonOption)&&  tokens.contains(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  stopAtNonOption)&&  tokens.contains(token);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  ters.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  ters.add(token,  stopAtNonOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	ters.add(token,  stopAtNonOption);	  if(stopAtNonOption)    {    tokens.add(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(token)||  stopAtNonOption  &&  tokens.contains(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
84	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption    ||    stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
85	[BUG]  [BUGGY]  options.put(token,  StopAtNonOption.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  options.put(token,  StopAtNonOption.EXPR_RESULT);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  StopAtNonOption.EXPR_RESULT);	  options.put(token,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
86	[BUG]  [BUGGY]  parent.processOptionToken(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  parent.processOptionToken(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	parent.processOptionToken(token,  stopAtNonOption,  eatTheRest);	  parent.processOptionToken(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
87	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  StopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    eatTheRest    =    stopAtNonOption;    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
88	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(stopAtNonOption);	  if(stopAtNonOption    &&    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
