bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  ||  stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  eatTheRest  =  stopAtNonOption;  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length(),  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  options.add(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  tokens.add(stopAtNonOption);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add(stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  tokens.add(stopAtNonOption?  token  :  token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add(stopAtNonOption?  token  :  token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(stopAtNonOption?  token  :  token);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  options.put(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  options.put(token,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  options.put(token,  StopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	options.put(token,  StopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
13	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	||  stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  true;  }	  if(stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add(token);  stopAtNonOption  =  stopAtNonOption;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  stopAtNonOption  =  stopAtNonOption;	      tokens.add(token);    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add( "n ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add( "n ");	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  Option  options  =  options.get(token);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  Option  options  =  options.get(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.get(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  option  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.put(token,    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }  else  {  options.put(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }  else  {  options.put(token,  stopAtNonOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token);  stopAtNonOption  =  false;  }  else  {  options.put(token,  stopAtNonOption);  }	      tokens.add(token);    stopAtNonOption    =    false;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption  &&  options.hasOption(token))  {  tokens.add(token);  stopAtNonOption  =  true;  }	  if(stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  stopAtNonOption  =  true;  }	  if(stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	Option  options  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	if(stopAtNonOption)  {  tokens.add(token,  stopAtNonOption);  }	  if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  tokens.add(token);  stopAtNonOption  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  tokens.add(token);  stopAtNonOption  =  true;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	tokens.add(token);  stopAtNonOption  =  true;  }	  if(stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token);  stopAtNonOption  =  true;	  if(stopAtNonOption)    {    tokens.add(token);    stopAtNonOption    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length());  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(token.length());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(token.length());	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  processOptionToken(String  token,  boolean  stopAtNonOption)  {  if  (stopAtNonOption  &&  !options.hasOption(token))  {  eatTheRest  =  true;  }  tokens.add(token);    [BUGGY]  parent.processOptionToken(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  processOptionToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  stopAtNonOption  String  token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	parent.processOptionToken(token,  stopAtNonOption);	      if(stopAtNonOption)    {    tokens.add(token);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
