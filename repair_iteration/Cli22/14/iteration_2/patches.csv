bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  options.add( "- ");  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.add( "- ");  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	options.add( "- ");	  if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
2	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
3	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token)||  token.startsWith( "- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
4	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
5	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(option,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(option,  stopAtNonOption);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  Options  options  =  options.getOption(pos  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Options  options  =  options.getOption(pos  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Options  options  =  options.getOption(pos  +  1);	  Option    options    =    options.getOption(opt    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
7	[BUG]  [BUGGY]  options  =  options.getOption(pos  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options  =  options.getOption(pos  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	options  =  options.getOption(pos  +  1);	  Option    options    =    options.getOption(opt    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
8	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
9	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg(token)||  options.hasOption(token))  {  tokens.add(opt);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
10	[BUG]  [BUGGY]  else  if(opt.startsWith( "- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- ")&&  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
11	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {	  else    if(options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
14	[BUG]  [BUGGY]  else  if(options.hasValue(token)||   "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||   "- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)||   "- ".equals(token))  {	  else    if(options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
15	[BUG]  [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)&&  options.hasOption(token))  {	  else    if(options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
16	[BUG]  [BUGGY]  else  if( "- ".equals(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token)||  options.hasOption(token))  {	  else    if(   "-   ".equals(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
17	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  arguments.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  arguments.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  arguments.hasOption(token))  {	  else    if(options.hasOption(token)||    arguments.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
18	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  arguments.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||  arguments.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)||  arguments.hasOption(token))  {	  else    if(options.hasOption(token)||    arguments.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
19	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(token.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
20	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(token.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
21	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(token.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
22	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
23	[BUG]  [BUGGY]  Option  options  =  options.getOption(pos  +  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(pos  +  2);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(pos  +  2);	  Option    options    =    options.getOption(pos    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
25	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  iter  =  tokens.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
26	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
27	[BUG]  [BUGGY]  tokens.add(option.substring(pos  +  1));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(pos  +  1));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(pos  +  1));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  ters.add(option.substring(pos  +  1));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  ters.add(option.substring(pos  +  1));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	ters.add(option.substring(pos  +  1));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  option  =  options.getOption(token);	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(token,  stopAtNonOption);	  Option    options    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  else  if( "- ".equals(token)&&   "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token)&&   "- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token)&&   "- ".equals(token))  {	  else    if(   "-   ".equals(token)||       "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
32	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(pos  +  1));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "+token.substring(pos  +  1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "+token.substring(pos  +  1));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
33	[BUG]  [BUGGY]  tokens.add( "- ").equals(token));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- ").equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- ").equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(1));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "+token.substring(1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "+token.substring(1));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
35	[BUG]  [BUGGY]  else  if(opt.startsWith( "- ")&&  opt.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- ")&&  opt.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- ")&&  opt.startsWith( "-- "))  {	  else    if(opt.startsWith(   "-   ")||    opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
36	[BUG]  [BUGGY]  else  if(option.startsWith( "- ")||  opt.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(option.startsWith( "- ")||  opt.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(option.startsWith( "- ")||  opt.startsWith( "-- "))  {	  else    if(opt.startsWith(   "-   ")||    opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
37	[BUG]  [BUGGY]  else  if(opt.startsWith( "- ")||  opt.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- ")||  opt.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- ")||  opt.startsWith( "- "))  {	  else    if(opt.startsWith(   "-   ")||    opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
38	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(1));  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(1));  }	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
39	[BUG]  [BUGGY]  else  if( "-   ".equals(token)&&  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)&&  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-   ".equals(token)&&  token.length()  ==  2)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
40	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-   ".equals(token)||  token.length()  ==  0)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
41	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  arguments.contains( "-   "))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  arguments.contains( "-   "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  arguments.contains( "-   "))  {	  else    if(options.hasOption(token)||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
42	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  arguments.contains( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  arguments.contains( "-- "))  {	  else    if(options.hasOption(token)||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
43	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  opt.equals( "- "))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  opt.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption  &&  opt.equals( "- "))  {	  else    if(opt.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
44	[BUG]  [BUGGY]  tokens.add(option.substring(0,  pos  +  1));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(0,  pos  +  1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(0,  pos  +  1));	  tokens.add(opt.substring(0,    pos    +    1));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
45	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(opt);  }	  else    if(options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
46	[BUG]  [BUGGY]  else  if(options.hasOption(token)&& "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&& "- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&& "- ".equals(token))  {	  else    if(options.hasOption(token)||       "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasArg(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasArg(token))  {	  else    if(options.hasOption(token)||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
48	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasArg(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg(token)||  options.hasArg(token))  {	  else    if(options.hasOption(token)||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
49	[BUG]  [BUGGY]  else  if(options.hasArg()  ||  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg()  ||  options.hasArg(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg()  ||  options.hasArg(token))  {	  else    if(options.hasOption(token)||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
50	[BUG]  [BUGGY]  tokens.add( "-- "  +  pos);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- "  +  pos);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "-- "  +  pos);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
51	[BUG]  [BUGGY]  tokens.add( "-- ",  pos);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- ",  pos);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "-- ",  pos);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
52	[BUG]  [BUGGY]  else  if(pos.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(pos.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(pos.startsWith( "-- "))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
53	[BUG]  [BUGGY]  else  if(opt.startsWith( "-- ")||  opt.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "-- ")||  opt.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "-- ")||  opt.startsWith( "--))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
54	[BUG]  [BUGGY]  else  if(opt.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- "))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
55	[BUG]  [BUGGY]  else  if(opt.startsWith( "-- ")||  opt.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "-- ")||  opt.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "-- ")||  opt.startsWith( "-- "))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
56	[BUG]  [BUGGY]  else  if( "--.equals(token)||   "--.equals(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||   "--.equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||   "--.equals(token))  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
57	[BUG]  [BUGGY]  else  if( "--.equals(token)||  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||  token.length()  ==  2)  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
58	[BUG]  [BUGGY]  else  if( "--.equals(token)||  token.charAt(pos  +  1)  ==  '-')  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  token.charAt(pos  +  1)  ==  '-')  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||  token.charAt(pos  +  1)  ==  '-')  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
59	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "--   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
60	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  ||  options.hasOption(token))  {	  else    if(!stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  tokens.add( "- "  +  getPosition(1));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  getPosition(1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "  +  getPosition(1));	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
62	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  &&  arguments.contains( "- "))  {	  else    if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
63	[BUG]  [BUGGY]  tokens.add(token.substring(0,  pos  +  1)+  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(0,  pos  +  1)+  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(0,  pos  +  1)+  1);	  tokens.add(token.substring(0,    pos)+    1);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
64	[BUG]  [BUGGY]  tokens.add(token.substring(0,  pos)+  2);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(0,  pos)+  2);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(0,  pos)+  2);	  tokens.add(token.substring(0,    pos)+    1);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
65	[BUG]  [BUGGY]  else  if(options.hasArg(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg(token)&&  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
66	[BUG]  [BUGGY]  tokens.add( "- "  +  pos  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  pos  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "  +  pos  +  1);	  tokens.add(   "-   "    +    pos);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
67	[BUG]  [BUGGY]  else  if( "- ".equals(token.substring(2)))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.substring(2)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.substring(2)))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
68	[BUG]  [BUGGY]  else  if( "- ".equals(token.substring(pos  +  1)))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.substring(pos  +  1)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.substring(pos  +  1)))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
69	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	List  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
70	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
71	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  ||  token.equals( "- "))  {	  else    if(stopAtNonOption    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
72	[BUG]  [BUGGY]  else  if( "- ".equals(token.trim())||  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.trim())||  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.trim())||  token.length()  ==  2)  {	  else    if(   "-   ".equals(token.trim()))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
73	[BUG]  [BUGGY]  else  if(pos  ==  1)  {  tokens.add(token.substring(1));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(pos  ==  1)  {  tokens.add(token.substring(1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(pos  ==  1)  {  tokens.add(token.substring(1));  }	  tokens.add(token.substring(1));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
74	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
75	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
76	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains( "- "))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
77	[BUG]  [BUGGY]  tokens.add(option.substring(1));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(1));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(1));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
78	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt.substring(1));  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt.substring(1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt.substring(1));  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
79	[BUG]  [BUGGY]  tokens.add( "- "  +  arguments);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  arguments);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "  +  arguments);	  tokens.add(   "-   "    +    opt);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
80	[BUG]  [BUGGY]  tokens.add( "- "  +  opt  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  opt  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "  +  opt  +  1);	  tokens.add(   "-   "    +    opt);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
81	[BUG]  [BUGGY]  tokens.add(token.substring(pos  +  2));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(pos  +  2));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(pos  +  2));	  tokens.add(token.substring(2));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
82	[BUG]  [BUGGY]  tokens.add(token.substring(pos));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(pos));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(pos));	  tokens.add(token.substring(2));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
83	[BUG]  [BUGGY]  tokens.add(token.substring(0,  pos)+  2));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(0,  pos)+  2));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(0,  pos)+  2));	  tokens.add(token.substring(0,    pos)+    1));    	non-compiled	[CE]  <identifier>  expected	42	None	replace
84	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
85	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
86	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
88	[BUG]  [BUGGY]  ArrayList  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  ArrayList  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	ArrayList  <  String>  iter  =  options.iterator();	  List    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
89	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
90	[BUG]  [BUGGY]  else  if(opt.startsWith( "- ")||  opt.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- ")||  opt.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- ")||  opt.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
91	[BUG]  [BUGGY]  Option  options  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(options,  stopAtNonOption);	  Option    options    =    options.getOption(options);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
92	[BUG]  [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
93	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)||  token.length()  ==  2)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
94	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
95	[BUG]  [BUGGY]  tokens.add( "-?   ",  pos);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-?   ",  pos);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "-?   ",  pos);	  tokens.add(   "-?   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
96	[BUG]  [BUGGY]  tokens.add( "-- ".equals(token));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- ".equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "-- ".equals(token));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
97	[BUG]  [BUGGY]  Option  options  =  options.getOption(option  +  1);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(option  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(option  +  1);	  Option    options    =    options.getOption(option);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  tokens.add(opt.substring(0,  pos));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(opt.substring(0,  pos));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(opt.substring(0,  pos));	  tokens.add(opt.substring(0,    pos    +    1));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
99	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
100	[BUG]  [BUGGY]  Option  options  =  options.getOption(options[pos  +  1]);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(options[pos  +  1]);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(options[pos  +  1]);	  Option    options    =    options.getOption(opt    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
101	[BUG]  [BUGGY]  tokens.add(token.substring(0,  pos),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(0,  pos),  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(0,  pos),  stopAtNonOption);	  tokens.add(token.substring(0,    pos    +    2));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
102	[BUG]  [BUGGY]  else  if(opt.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "-   "))  {  tokens.add(opt.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
103	[BUG]  [BUGGY]  else  if(token.length()  ==  2  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.length()  ==  2  ||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.length()  ==  2  ||  options.hasOption(token))  {	  else    if(   "-   ".equals(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
104	[BUG]  [BUGGY]  else  if(options.hasValue(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)&&  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasValue(token)&&  stopAtNonOption)  {	  else    if(options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
105	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption)  {	  else    if(!stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
106	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.getOptions().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  <  String>  iter  =  options.getOptions().iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
107	[BUG]  [BUGGY]  else  if(options.hasArg(token)&&  options.hasArg(token))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)&&  options.hasArg(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasArg(token)&&  options.hasArg(token))  {	  else    if(options.hasOption(token)||    options.hasArg(token))    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
108	[BUG]  [BUGGY]  tokens.add( "--? ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "--? ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "--? ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
109	[BUG]  [BUGGY]  else  if(eatTheRest  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(eatTheRest  &&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(eatTheRest  &&  options.hasOption(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
110	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
111	[BUG]  [BUGGY]  else  if( "-- ".equals(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)&&  options.hasOption(token))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
112	[BUG]  [BUGGY]  else  if( "-- ".equals(token)&&!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)&&!stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)&&!stopAtNonOption)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
113	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||!stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)||!stopAtNonOption)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
114	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt  +  1);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt  +  1);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt  +  1);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
115	[BUG]  [BUGGY]  tokens.add( "-?   "  +  pos);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-?   "  +  pos);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "-?   "  +  pos);	  tokens.add(   "-?   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
116	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  1)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-   ".equals(token)||  token.length()  ==  1)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
117	[BUG]  [BUGGY]  tokens.add(option.substring(pos,  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(pos,  stopAtNonOption));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(pos,  stopAtNonOption));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
118	[BUG]  [BUGGY]  tokens.add(option.substring(pos));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(pos));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(pos));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.keySet();  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.keySet();  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  option  =  options.keySet();	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
120	[BUG]  [BUGGY]  else  if( "-- ".equals(token.trim()))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token.trim()))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token.trim()))  {	  else    if(   "-   ".equals(token.trim()))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
121	[BUG]  [BUGGY]  else  if( "-- ".equals(token.substring(1)))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token.substring(1)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token.substring(1)))  {	  else    if(   "-   ".equals(token.trim()))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
122	[BUG]  [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(opt)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
123	[BUG]  [BUGGY]  else  if(options.hasOption(opt)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(opt)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(opt)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
124	[BUG]  [BUGGY]  tokens.add(opt.substring(pos  +  2));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(opt.substring(pos  +  2));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(opt.substring(pos  +  2));	  tokens.add(opt.substring(2));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
125	[BUG]  [BUGGY]  tokens.add( "- "  +  option);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  option);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- "  +  option);	  tokens.add(   "-   "    +    opt);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
126	[BUG]  [BUGGY]  Option  options  =  options.keySet();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.keySet();  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.keySet();	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
127	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
128	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
129	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
130	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token)||  stopAtNonOption)  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
131	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
132	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
133	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
134	[BUG]  [BUGGY]  else  if( "--.equals(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
135	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
136	[BUG]  [BUGGY]  else  if( "--.equals(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||  stopAtNonOption)  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
137	[BUG]  [BUGGY]  else  if( "--.equals(token)&&  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)&&  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)&&  stopAtNonOption)  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
138	[BUG]  [BUGGY]  else  if( "--.equals(token)||!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||!stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||!stopAtNonOption)  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
139	[BUG]  [BUGGY]  else  if( "-- ".equals(token.substring(2)))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token.substring(2)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token.substring(2)))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
140	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  option  =  options.getOption(opt);	  if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
141	[BUG]  [BUGGY]  else  if(opt.startsWith( "- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(opt.startsWith( "- ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(opt.startsWith( "- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
142	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(opt);  }	  else    if(options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
143	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  option.startsWith( "-   "))  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  option.startsWith( "-   "))  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  option.startsWith( "-   "))  {  tokens.add(opt);  }	  else    if(options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
144	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(stopAtNonOption  ||  token.startsWith( "-- "))  {	  else    if(stopAtNonOption    ||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
145	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  arguments.contains( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  arguments.contains( "-- "))  {	  else    if(options.hasOption(token)||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
146	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
147	[BUG]  [BUGGY]  else  if( "- ".equals(token.substring(pos)))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.substring(pos)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.substring(pos)))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
148	[BUG]  [BUGGY]  else  if( "- ".equals(token.substring(pos  +  1))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.substring(pos  +  1))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.substring(pos  +  1))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
149	[BUG]  [BUGGY]  else  if( "- ".equals(token.substring(0,  pos)))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.substring(0,  pos)))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.substring(0,  pos)))  {	  else    if(   "-   ".equals(token.substring(1)))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
150	[BUG]  [BUGGY]  else  if(option.startsWith( "- ")&&  opt.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(option.startsWith( "- ")&&  opt.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(option.startsWith( "- ")&&  opt.startsWith( "-- "))  {	  else    if(opt.startsWith(   "-   ")||    opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
151	[BUG]  [BUGGY]  else  if( "--.equals(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)&&  options.hasOption(token))  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
152	[BUG]  [BUGGY]  else  if( "--.equals(token)||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  token.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "--.equals(token)||  token.length()  ==  0)  {	  else    if(   "--.equals(token))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
153	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  opt.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  opt.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption  &&  opt.startsWith( "-- "))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
154	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  opt.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  opt.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption  &&  opt.startsWith( "- "))  {	  else    if(opt.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
155	[BUG]  [BUGGY]  Iterator  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.list().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  iter  =  options.list().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
156	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasValue(token))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasValue(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption  &&  options.hasValue(token))  {	  else    if(options.hasValue(token))    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
157	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(0,  pos  +  1));  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(0,  pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(opt.substring(0,  pos  +  1));  }	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    tokens.add(opt.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
158	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
159	[BUG]  [BUGGY]  tokens.add( "- ".equals(opt));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- ".equals(opt));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add( "- ".equals(opt));	  tokens.add(   "-   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
160	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  token.equals( "- "))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  token.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption  &&  token.equals( "- "))  {	  else    if(opt.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
161	[BUG]  [BUGGY]  else  if( "- ".equals(token))  {  tokens.add(token.substring(pos,  pos  +  1));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token))  {  tokens.add(token.substring(pos,  pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token))  {  tokens.add(token.substring(pos,  pos  +  1));  }	  tokens.add(token.substring(pos,    pos    +    1));    	non-compiled	[CE]  <identifier>  expected	72	None	replace
162	[BUG]  [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(opt)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
163	[BUG]  [BUGGY]  iter.setIndex(pos);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  iter.setIndex(pos);  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	iter.setIndex(pos);	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
164	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt,  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt,  stopAtNonOption);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(opt,  stopAtNonOption);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
165	[BUG]  [BUGGY]  else  if( "- ".equals(token.trim())&&!stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "- ".equals(token.trim())&&!stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "- ".equals(token.trim())&&!stopAtNonOption)  {	  else    if(   "-   ".equals(token.trim()))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
166	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(opt);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(opt);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption)  {  tokens.add(opt);  }	  else    if(options.hasOption(token))    {    tokens.add(opt);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
167	[BUG]  [BUGGY]  tokens.add(token.substring(pos,  pos));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(token.substring(pos,  pos));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(token.substring(pos,  pos));	  tokens.add(token.substring(2));    	non-compiled	[CE]  <identifier>  expected	60	None	replace
168	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)||  token.length()  ==  0)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
169	[BUG]  [BUGGY]  else  if( "-- ".equals(token)&&  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)&&  token.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if( "-- ".equals(token)&&  token.length()  ==  0)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
170	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(options.hasOption(token)&&  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)&&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
171	[BUG]  [BUGGY]  tokens.add(option.substring(0,  pos));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(0,  pos));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(0,  pos));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
172	[BUG]  [BUGGY]  tokens.add(option.substring(pos,  pos  +  1));  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add(option.substring(pos,  pos  +  1));  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tokens.add(option.substring(pos,  pos  +  1));	  if(options.hasOption(token))    {    for(String    option    :    options.keySet())    {    tokens.add(option.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
173	[BUG]  [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "-   "))  {  tokens.add(token.substring(pos  +  1));  }	  else    if(options.hasOption(token))    {    tokens.add(token.substring(pos    +    1));    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
174	[BUG]  [BUGGY]  Option  options  =  options.getOption(options,  pos);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(options,  pos);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Option  options  =  options.getOption(options,  pos);	  Option    options    =    options.getOption(options);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
175	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(!stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
176	[BUG]  [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	else  if(token.startsWith( "-   "))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
177	[BUG]  [BUGGY]  tors.add( "- ");  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tors.add( "- ");  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	tors.add( "- ");	  if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
178	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      tokens.add(token.substring(pos  +  1));  }  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.list().iterator();  [BUGGY]      {  if  (token.length()  ==  2  ||  options.hasOption(token))  {  processOptionToken(token,  stopAtNonOption);  }  else  {  burstToken(token,  stopAtNonOption);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	Iterator  <  String>  iter  =  options.list().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
