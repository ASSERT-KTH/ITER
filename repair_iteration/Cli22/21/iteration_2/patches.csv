bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =(ArrayList  <  String>)iter.next();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =(ArrayList  <  String>)iter.next();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =(ArrayList  <  String>)iter.next();	  List    <    String>    tokens    =(List    <    String>)iter.next();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  Set  <  String>  tokens  =(Set  <  String>)iter.next();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Set  <  String>  tokens  =(Set  <  String>)iter.next();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Set  <  String>  tokens  =(Set  <  String>)iter.next();	  List    <    String>    tokens    =(List    <    String>)iter.next();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
3	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newLinkedList();	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList();	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  Collection  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Collection  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Collection  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size()    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  Arrays.asList(arguments).iterator()  :  null;  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  iter  =(this.options!=  null)?  Arrays.asList(arguments).iterator()  :  null;  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =(this.options!=  null)?  Arrays.asList(arguments).iterator()  :  null;	  Iterator    iter    =    Arrays.asList(this.options).iterator();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  iter  =(this.options!=  null)?  this.options.iterator()  :  null;	  Iterator    iter    =    Arrays.asList(this.options).iterator();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  -  1]);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  -  1]);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[args.size()  -  1]);	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
9	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(args).toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(args).toArray(new  String[args.size()  ]);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(args).toArray(new  String[args.size()  ]);	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
10	[BUG]  [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while  (iter.hasNext()  &&  iter.next().equals( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().equals( " "))  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().equals( " "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  &&  iter.next().equals( " "))  {	  while(iter.hasNext()    &&    iter.next())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
12	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(options).iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(options).iterator();	  List    <    String>    tokens    =    Lists.newArrayList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  iter);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  iter);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  iter);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  Set  <  String>  tokens  =  new  HashSet  <  String>(arguments.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Set  <  String>  tokens  =  new  HashSet  <  String>(arguments.size());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Set  <  String>  tokens  =  new  HashSet  <  String>(arguments.size());	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  },  options);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  },  options);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  },  options);	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  }  );	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  0  }  );  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  0  }  );  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  String[]  {  0  }  );	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList().iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList().iterator();	  ArrayList    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "-- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  ||  iter.next().startsWith( "-- "))  {	  while(iter.hasNext()    &&    iter.next().startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
23	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption);	  ArrayList    <    String>    tokens    =    Lists.newArrayList(arguments);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  Ilerator  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Ilerator  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Ilerator  iter  =  Arrays.asList(arguments).iterator();	  Iterator    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  -  1);	  ArrayList    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size()  +  1);	  ArrayList    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  String[]  arguments  =(String[])iter.remove();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  String[]  arguments  =(String[])iter.remove();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	String[]  arguments  =(String[])iter.remove();	  String[]    arguments    =(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
28	[BUG]  [BUGGY]  String[]  arguments  =(String[])iter.getValue();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  String[]  arguments  =(String[])iter.getValue();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	String[]  arguments  =(String[])iter.getValue();	  String[]    arguments    =(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(this.options).iterator();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(this.options).iterator();  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(this.options).iterator();  }	  Iterator    iter    =    Arrays.asList(this.options).iterator();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
30	[BUG]  [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.get();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.get();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =(List  <  String>)iter.get();	  List    <    String>    tokens    =(List    <    String>)iter.next();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().equals( "-- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().equals( "-- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  &&  iter.next().equals( "-- "))  {	  while(iter.hasNext()    &&    iter.next().startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
32	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next())  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next())  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  ||  iter.next())  {	  while(iter.hasNext()    &&    iter.next())    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
33	[BUG]  [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( "/ ")||  iter.hasNext().startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  &&  iter.next().startsWith( "/ ")||  iter.hasNext().startsWith( "/ "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  &&  iter.next().startsWith( "/ ")||  iter.hasNext().startsWith( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList().toArray(new  String[]  {  }  );  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList().toArray(new  String[]  {  }  );  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayList().toArray(new  String[]  {  }  );	  List    <    String>    tokens    =    Lists.newArrayList(arguments).toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	22	None	replace
35	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).values().iterator();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).values().iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).values().iterator();	  ArrayList    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
36	[BUG]  [BUGGY]  Set  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Set  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Set  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.size()    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(arguments).iterator();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(arguments).iterator();  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(arguments).iterator();  }	  Iterator    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(options).iterator();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(options).iterator();  }  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	if(stopAtNonOption)  {  Iterator  iter  =  Arrays.asList(options).iterator();  }	  Iterator    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
39	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList(options).iterator();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList(options).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newLinkedList(options).iterator();	  List    <    String>    tokens    =    Lists.newArrayList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
40	[BUG]  [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.clone();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =(List  <  String>)iter.clone();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =(List  <  String>)iter.clone();	  List    <    String>    tokens    =(List    <    String>)iter.next();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
41	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  iter.clear();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	iter.clear();	  iter.remove();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    iter    =    Arrays.asList(this.options).iterator();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
43	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next().equals( "- "))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next().equals( "- "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  ||  iter.next().equals( "- "))  {	  while    (iter.hasNext()    &&    iter.next().equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  String[]  arguments  =(String[])iter.clone();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  String[]  arguments  =(String[])iter.clone();  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	String[]  arguments  =(String[])iter.clone();	  String[]    arguments    =(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
45	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList  <  String>());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList  <  String>());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList  <  String>());	  ArrayList    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList());  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	ArrayList  <  String>  tokens  =  Lists.newArrayList(arguments).toArray(new  ArrayList());	  ArrayList    <    String>    tokens    =    Lists.newArrayList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  while(iter.hasNext()  ||  iter.next().startsWith( "/ "))  {  [BUGGY]      {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	while(iter.hasNext()  ||  iter.next().startsWith( "/ "))  {	  while    (iter.hasNext()    &&    iter.next().startsWith(   "/   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
48	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();        [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);  [BUGGY]      while  (iter.hasNext())  {  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {  int  pos  =  token.indexOf('=');  String  opt  =  pos  ==  -1  ?  token  :  token.substring(0,  pos);  //  --foo  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  String[]  arguments  String  opt  token  int  pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
