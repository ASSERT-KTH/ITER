bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] processNonOptionToken(token); [FE] ComparisonFailure [CONTEXT] processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { [BUGGY] processNonOptionToken(token); [BUGGY] } else { tokens.add(token); } gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { [BUGGY] [BUGGY] processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.5773502691896258	148	148	2	add	
3	[BUG] [BUGGY] eatTheRest = true; [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { [BUGGY] eatTheRest = true; [BUGGY] tokens.add("--"); tokens.add(value); } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	186	186	2	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { [BUGGY] [BUGGY] eatTheRest = true; tokens.add("--"); tokens.add(value); } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	186	186	2	add	
5	[BUG] [BUGGY] tokens.add("--"); [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; [BUGGY] tokens.add("--"); [BUGGY]  tokens.add(value); } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	187	187	2	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; [BUGGY] [BUGGY] tokens.add("--"); tokens.add(value); } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	187	187	2	add	
7	[BUG] [BUGGY] tokens.add(value); [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; tokens.add("--"); [BUGGY] tokens.add(value); [BUGGY] } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	189	189	2	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; tokens.add("--"); [BUGGY] [BUGGY] tokens.add(value); } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	189	189	2	add	
9	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; tokens.add("--"); tokens.add(value); [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	190	190	2	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processNonOptionToken(String value) { eatTheRest = true; tokens.add("--"); tokens.add(value); [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] processNonOptionToken [RETURN_TYPE] void  String value [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String value  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.47140452079103173	190	190	2	add	
11	[BUG] [BUGGY] while (iter.hasNext()) { [FE] ComparisonFailure [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] while (iter.hasNext())   { [BUGGY] { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens boolean eatTheRest stopAtNonOption  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	2	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void gobble(Iterator iter) { if (eatTheRest) { [BUGGY] [BUGGY] while (iter.hasNext())   { { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens boolean eatTheRest stopAtNonOption  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	170	171	2	add	
13	[BUG] [BUGGY] else if (stopAtNonOption) { [FE] ComparisonFailure [CONTEXT] if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } [BUGGY] else if (stopAtNonOption)   { [BUGGY] { processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } [BUGGY] [BUGGY] else if (stopAtNonOption)   { { processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3922322702763681	146	147	2	add	
15	[BUG] [BUGGY] processOptionToken(token, stopAtNonOption); [FE] ComparisonFailure [CONTEXT] else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { [BUGGY] processOptionToken(token, stopAtNonOption); [BUGGY] }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { processNonOptionToken(token); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { [BUGGY] [BUGGY] processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { processNonOptionToken(token); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	138	138	2	add	
17	[BUG] [BUGGY] if (stopAtNonOption && !options.hasOption(token)) { [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { [BUGGY] if (stopAtNonOption && !options.hasOption(token))  { [BUGGY] { eatTheRest = true; }  tokens.add(token); } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { [BUGGY] [BUGGY] if (stopAtNonOption && !options.hasOption(token))  { { eatTheRest = true; }  tokens.add(token); } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	206	207	2	add	
19	[BUG] [BUGGY] tokens.add(token); [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (stopAtNonOption && !options.hasOption(token)) { eatTheRest = true; }  [BUGGY] tokens.add(token); [BUGGY] } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (stopAtNonOption && !options.hasOption(token)) { eatTheRest = true; }  [BUGGY] [BUGGY] tokens.add(token); } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	212	212	2	add	
21	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (stopAtNonOption && !options.hasOption(token)) { eatTheRest = true; }  tokens.add(token); [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void processOptionToken(String token, boolean stopAtNonOption) { if (stopAtNonOption && !options.hasOption(token)) { eatTheRest = true; }  tokens.add(token); [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] processOptionToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens boolean eatTheRest stopAtNonOption String token  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	213	213	2	add	
23	[BUG] [BUGGY] if (token.length() == 2 || options.hasOption(token)) { [FE] ComparisonFailure [CONTEXT] } }  else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { [BUGGY] if (token.length() == 2 || options.hasOption(token))    { [BUGGY] { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } }  else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { [BUGGY] [BUGGY] if (token.length() == 2 || options.hasOption(token))    { { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3244428422615251	136	137	2	add	
25	[BUG] [BUGGY] else if ("-".equals(token)) { [FE] ComparisonFailure [CONTEXT] tokens.add(opt); if (pos != -1) { tokens.add(token.substring(pos + 1)); } } }  [BUGGY] else if ("-".equals(token))   { [BUGGY] { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	130	131	2	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] tokens.add(opt); if (pos != -1) { tokens.add(token.substring(pos + 1)); } } }  [BUGGY] [BUGGY] else if ("-".equals(token))   { { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	130	131	2	add	
27	[BUG] [BUGGY] else if (token.startsWith("-")) { [FE] ComparisonFailure [CONTEXT] tokens.add(token.substring(pos + 1)); } } }  else if ("-".equals(token)) { tokens.add(token); } [BUGGY] else if (token.startsWith("-"))   { [BUGGY] { if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] tokens.add(token.substring(pos + 1)); } } }  else if ("-".equals(token)) { tokens.add(token); } [BUGGY] [BUGGY] else if (token.startsWith("-"))   { { if (token.length() == 2 || options.hasOption(token)) { processOptionToken(token, stopAtNonOption); }  else { burstToken(token, stopAtNonOption); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.3086066999241838	134	135	2	add	
29	[BUG] [BUGGY] eatTheRest = false; [FE] ComparisonFailure [CONTEXT] private void init() { [BUGGY] eatTheRest = false; [BUGGY] tokens.clear(); } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void init() { [BUGGY] [BUGGY] eatTheRest = false; tokens.clear(); } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	add	
31	[BUG] [BUGGY] tokens.clear(); [FE] ComparisonFailure [CONTEXT] private void init() { eatTheRest = false; [BUGGY] tokens.clear(); [BUGGY] } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void init() { eatTheRest = false; [BUGGY] [BUGGY] tokens.clear(); } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	53	53	2	add	
33	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void init() { eatTheRest = false; tokens.clear(); [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] init [RETURN_TYPE] void  [VARIABLES] Options options List tokens boolean eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	add	
35	[BUG] [BUGGY] init(); [FE] ComparisonFailure [CONTEXT] { [BUGGY] init(); [BUGGY] this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next(); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	96	96	2	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { [BUGGY] [BUGGY] init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next(); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	96	96	2	add	
37	[BUG] [BUGGY] this.options = options; [FE] ComparisonFailure [CONTEXT] { init(); [BUGGY] this.options = options; [BUGGY]   Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	97	97	2	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { init(); [BUGGY] [BUGGY] this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	97	97	2	add	
39	[BUG] [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [FE] ComparisonFailure [CONTEXT] { init(); this.options = options;  [BUGGY] Iterator iter = Arrays.asList(arguments).iterator(); [BUGGY]   while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	100	100	2	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { init(); this.options = options;  [BUGGY] [BUGGY] Iterator iter = Arrays.asList(arguments).iterator();  while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	100	100	2	add	
41	[BUG] [BUGGY] while (iter.hasNext()) { [FE] ComparisonFailure [CONTEXT] { init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  [BUGGY] while (iter.hasNext())  { [BUGGY] {  String token = (String) iter.next();  if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { init(); this.options = options;  Iterator iter = Arrays.asList(arguments).iterator();  [BUGGY] [BUGGY] while (iter.hasNext())  { {  String token = (String) iter.next();  if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	103	104	2	add	
43	[BUG] [BUGGY] String token = (String) iter.next(); [FE] ComparisonFailure [CONTEXT] while (iter.hasNext()) {  [BUGGY] String token = (String) iter.next(); [BUGGY]   if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo if (!options.hasOption(opt)) { processNonOptionToken(token); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	106	106	2	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] while (iter.hasNext()) {  [BUGGY] [BUGGY] String token = (String) iter.next();  if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo if (!options.hasOption(opt)) { processNonOptionToken(token); [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	106	106	2	add	
45	[BUG] [BUGGY] if (token.startsWith("--")) { [FE] ComparisonFailure [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  [BUGGY] if (token.startsWith("--"))   { [BUGGY] { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo if (!options.hasOption(opt)) { processNonOptionToken(token); } else { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	109	110	2	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  [BUGGY] [BUGGY] if (token.startsWith("--"))   { { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); // --foo if (!options.hasOption(opt)) { processNonOptionToken(token); } else { [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	109	110	2	add	
47	[BUG] [BUGGY] gobble(iter); [FE] ComparisonFailure [CONTEXT] } else if (stopAtNonOption) { processNonOptionToken(token); } else { tokens.add(token); } [BUGGY] gobble(iter); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else if (stopAtNonOption) { processNonOptionToken(token); } else { tokens.add(token); } [BUGGY] [BUGGY] gobble(iter); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	155	155	2	add	
49	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] else if (stopAtNonOption) { processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); [BUGGY] } [BUGGY]  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	156	156	2	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] else if (stopAtNonOption) { processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); [BUGGY] [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	156	156	2	add	
51	[BUG] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [FE] ComparisonFailure [CONTEXT] processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); } [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [BUGGY] } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	158	158	2	replace	
52	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] processNonOptionToken(token); } else { tokens.add(token); } gobble(iter); } [BUGGY] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens String[] arguments String opt token int pos  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	158	158	2	add	
53	[BUG] [BUGGY] if (eatTheRest) { [FE] ComparisonFailure [CONTEXT] private void gobble(Iterator iter) { [BUGGY] if (eatTheRest)  { [BUGGY] { while (iter.hasNext()) { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens boolean eatTheRest stopAtNonOption  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	168	169	2	replace	
54	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private void gobble(Iterator iter) { [BUGGY] [BUGGY] if (eatTheRest)  { { while (iter.hasNext()) { tokens.add(iter.next()); } } } [CLASS] PosixParser [METHOD] gobble [RETURN_TYPE] void  Iterator iter [VARIABLES] Iterator iter Options options List tokens boolean eatTheRest stopAtNonOption  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	168	169	2	add	
57	[BUG] [BUGGY] private List tokens = new ArrayList(); [FE] ComparisonFailure [CONTEXT] [BUGGY] private List tokens = new ArrayList(); [BUGGY]  [CLASS] PosixParser  [VARIABLES] 	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.2721655269759087	35	35	2	replace	
58	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] [BUGGY] [BUGGY] private List tokens = new ArrayList(); [CLASS] PosixParser  [VARIABLES] 	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.2721655269759087	35	35	2	add	
