bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  ArrayList();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList();	      if(tokens!=    null)    {    tokens    =    new    ArrayList();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  ArrayList();  }	      if(tokens!=    null)    {    tokens    =    new    ArrayList();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  LinkedList();  }	      if(tokens!=    null)    {    tokens    =    new    ArrayList();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  LinkedList  <  Option>();	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(options.size());	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
6	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size());	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
7	[BUG]  [BUGGY]  tokens  =  Collections.EMPTY_LIST;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Collections.EMPTY_LIST;  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.EMPTY_LIST;	      if(tokens!=    null)    {    tokens    =    Collections.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
8	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.EMPTY_LIST;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.EMPTY_LIST;  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  tokens  =  Lists.EMPTY_LIST;  }	      if(tokens!=    null)    {    tokens    =    Collections.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
9	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  String>();  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  tokens  =  new  ArrayList  <  String>();  }	      if(tokens!=    null)    {    tokens    =    Collections.EMPTY_LIST;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
10	[BUG]  [BUGGY]  EATTheRest  =  false;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  EATTheRest  =  false;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATTheRest  =  false;	  EATTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
11	[BUG]  [BUGGY]  EATtheRest  =  false;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  EATtheRest  =  false;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATtheRest  =  false;	  EATTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
12	[BUG]  [BUGGY]  eattheRest  =  false;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eattheRest  =  false;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eattheRest  =  false;	  eattheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.addAll(Arrays.asList(this));  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(this));	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.addAll(Arrays.asList(options));  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.addAll(Arrays.asList(options));	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
15	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens.add( "n ");  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens.add( "n ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
16	[BUG]  [BUGGY]  eatTheRest  =  Collections.emptyList();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  Collections.emptyList();  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.emptyList();	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  eatTheRest  =  new  ArrayList  <  String>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  new  ArrayList  <  String>();  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  ArrayList  <  String>();	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  eatTheRest  =  this;  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  this;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  this;	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  Tokens  tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  Tokens  tokens  =  Lists.newArrayList();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	Tokens  tokens  =  Lists.newArrayList();	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  tokens  =  Collections.emptyList();  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Collections.emptyList();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Collections.emptyList();	      if(tokens!=    null)    {    tokens    =    Collections.emptyList();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
22	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Collections.emptyList();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Collections.emptyList();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  Collections.emptyList();  }	      if(tokens!=    null)    {    tokens    =    Collections.emptyList();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(0);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Lists.newArrayList(0);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(0);	      tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
24	[BUG]  [BUGGY]  tokens  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Lists.newLinkedList();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newLinkedList();	      tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
25	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(this.options);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Lists.newArrayList(this.options);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(this.options);	      tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
26	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }	      if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }	      if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!tokens.isEmpty())  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  eatTheRest  =  false;  tokens.clear();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  false;  tokens.clear();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  false;  tokens.clear();	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(this.options!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(this.options!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }	  eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  true;  }	  eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  this.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  this.eatTheRest  =  true;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	this.eatTheRest  =  true;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  This.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  This.eatTheRest  =  true;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	This.eatTheRest  =  true;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  java.util.ArrayList  <  Option>();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  java.util.ArrayList  <  Option>();	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  }	      if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  eatTheRest  =  new  HashMap  <  String,Object>();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  new  HashMap  <  String,Object>();  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  new  HashMap  <  String,Object>();	  eatTheRest    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
40	[BUG]  [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  eatTheRest  =  Collections.EMPTY_LIST;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	eatTheRest  =  Collections.EMPTY_LIST;	  eatTheRest    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
41	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  ArrayList  <  String>();  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  String>();	      tokens.clear();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
42	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Collections.EMPTY_LIST;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Collections.EMPTY_LIST;  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(tokens  ==  null)  {  tokens  =  Collections.EMPTY_LIST;  }	      if(tokens!=    null)    {    tokens    =    Collections.EMPTY_LIST;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  EATTheRest  =  null;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  EATTheRest  =  null;  [BUGGY]    tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	EATTheRest  =  null;	  EATTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(tokens);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Lists.newArrayList(tokens);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(tokens);	      tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(size());  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  Lists.newArrayList(size());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  Lists.newArrayList(size());	      tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	      eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());	      if(tokens!=    null)    {    tokens    =    Collections.emptyList();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  tokens  =  new  ArrayList  <  Option>(options);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	tokens  =  new  ArrayList  <  Option>(options);	      tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
49	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO);  [BUGGY]    eatTheRest  =  false;  tokens.clear();  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	52	52	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.ZERO);	      if(tokens!=    null)    {    tokens    =    new    ArrayList();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
