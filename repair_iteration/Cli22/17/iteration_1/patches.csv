bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  ArrayList  <  Option>();	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  options.addAll(tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.addAll(tokens);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.addAll(tokens);	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  options.add(tokens);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.add(tokens);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add(tokens);	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  this.tokens.addAll(Arrays.asList(this.options));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.options));	      this.tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.tokens));	      this.tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size()  +  1);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size()  +  1);	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "null ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "null ");	      tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "- ");	      tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  tokens.add( "[ ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "[ ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "[ ");	      tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this));  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.addAll(Arrays.asList(this));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(this));	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.addAll(Arrays.asList(options));  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(options));	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  tokens.remove( "-- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove( "-- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "-- ");	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "--n ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "--n ");	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
29	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
30	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  eatTheRest  =  false;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	eatTheRest  =  false;	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
32	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
33	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
34	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
36	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
37	[BUG]  [BUGGY]  options.add( "-- ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  options.add( "-- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add( "-- ");	      options.clear();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens.addAll(Arrays.asList(options));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(tokens!=  null)  {  tokens.addAll(Arrays.asList(options));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens.addAll(Arrays.asList(options));  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  tokens.set( "-- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.set( "-- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.set( "-- ");	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  Options  options  =  new  Options(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Options  options  =  new  Options(tokens.size()  -  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  options  =  new  Options(tokens.size()  -  1);	      options.clear();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  Option  tokens  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  tokens  =  new  Option(tokens.size());  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(tokens.size());	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  Option  tokens  =  new  Option(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  tokens  =  new  Option(tokens.size()  -  1);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(tokens.size()  -  1);	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
45	[BUG]  [BUGGY]  Option  tokens  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  tokens  =  new  Option(tokens);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(tokens);	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
46	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  tokens.remove( "n ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.remove( "n ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "n ");	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
55	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
58	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
59	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
60	[BUG]  [BUGGY]  this.tokens.remove(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  this.tokens.remove(tokens.size()  -  1);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.remove(tokens.size()  -  1);	      this.tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  this.tokens.add(Token.EXPR_RESULT);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT);	      this.tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
62	[BUG]  [BUGGY]  tokens.addAll(this);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.addAll(this);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(this);	      tokens.clear();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
63	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
64	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
65	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
68	[BUG]  [BUGGY]  Option  tokens  =  options.get( "eatTheRest ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  Option  tokens  =  options.get( "eatTheRest ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  options.get( "eatTheRest ");	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    }    else    {    options.add(tokens);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
71	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }	  if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  tokens.addAll( "-- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.addAll( "-- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll( "-- ");	      tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  tokens.add( "eatTheRest ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  tokens.add( "eatTheRest ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "eatTheRest ");	      tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
76	[BUG]  [BUGGY]  this.tokens.add( "n ");  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  this.tokens.add( "n ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "n ");	      this.tokens.clear();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
78	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();    [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	      if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
