bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
2	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
3	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  1;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  1;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  1;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
4	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
5	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
6	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
7	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());	  tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size()    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  tokens  =  new  TreeSet  <  Option>();  tokens.add(tokens.size());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  TreeSet  <  Option>();  tokens.add(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  TreeSet  <  Option>();  tokens.add(tokens.size());	  tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size()    +    1);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
9	[BUG]  [BUGGY]  tokens.add( "--? ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "--? ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "--? ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
10	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
11	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
12	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
13	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
14	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
15	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
16	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
17	[BUG]  [BUGGY]  options  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options  =  new  Option(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options  =  new  Option(tokens.size());	  Option    tokens    =    new    Option(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
18	[BUG]  [BUGGY]  Options  tokens  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  tokens  =  new  Option(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  tokens  =  new  Option(tokens.size());	  Option    tokens    =    new    Option(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
19	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest!=  null)  {  eatTheRest  =  false;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
20	[BUG]  [BUGGY]  tokens.add( "[null] ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "[null] ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "[null] ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
21	[BUG]  [BUGGY]  tokens.remove( "null ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "null ");	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
22	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
23	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
24	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
25	[BUG]  [BUGGY]  tokens.remove( "eatTheRest ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "eatTheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
26	[BUG]  [BUGGY]  tokens.remove( "- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "- ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
27	[BUG]  [BUGGY]  tokens.removeAll( "-- ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.removeAll( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.removeAll( "-- ");	  tokens.addAll(   "--   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
28	[BUG]  [BUGGY]  tokens.addAll( "-- ",  true);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll( "-- ",  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll( "-- ",  true);	  tokens.addAll(   "--   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
29	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
30	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options[i]);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options[i]);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
31	[BUG]  [BUGGY]  options.add(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(tokens.size()  -  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add(tokens.size()  -  1);	  options.add(tokens);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
33	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
34	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
35	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
36	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
37	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
38	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.remove(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.remove(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.remove(tokens.size());	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
39	[BUG]  [BUGGY]  ||  eatTheRest  ==  null;  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  eatTheRest  ==  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	||  eatTheRest  ==  null;	  if(eatTheRest    ==    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
40	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
42	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
43	[BUG]  [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	||  eatTheRest)  {  eatTheRest  =  true;  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
44	[BUG]  [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	||  eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
45	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
46	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
47	[BUG]  [BUGGY]  if(tokens  ==  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens  ==  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
48	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
49	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
50	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
51	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
52	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	70	None	replace
53	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	70	None	replace
54	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	70	None	replace
55	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
56	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
57	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
58	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
59	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(0));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
60	[BUG]  [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest  ==  false)  {  eatTheRest  =  false;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
61	[BUG]  [BUGGY]  tokens.add(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add(tokens.size());	  if(eatTheRest)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
62	[BUG]  [BUGGY]  Options  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
63	[BUG]  [BUGGY]  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
64	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(!eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
65	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens.size()  >  0)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens.size()  >  0)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens.size()  >  0)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
66	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
67	[BUG]  [BUGGY]  if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
68	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  if(options!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  if(options!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  if(options!=  null)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
69	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(options),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(options),  eatTheRest);	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
70	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(options),  true);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(options),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(options),  true);	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
71	[BUG]  [BUGGY]  tokens.add(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add(Arrays.asList(options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add(Arrays.asList(options));	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
72	[BUG]  [BUGGY]  tokens.add( "[] ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "[] ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "[] ");	  tokens.add(   "[   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
73	[BUG]  [BUGGY]  tokens.remove( "[ ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "[ ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "[ ");	  tokens.add(   "[   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
74	[BUG]  [BUGGY]  tokens.add( "] ");  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "] ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "] ");	  tokens.add(   "[   ");    	non-compiled	[CE]  <identifier>  expected	21	None	replace
75	[BUG]  [BUGGY]  Option  tokens  =  new  Option(options);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  Option(options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(options);	  Option    tokens    =    new    Option(tokens);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
76	[BUG]  [BUGGY]  Option  tokens  =  new  Option(tokens,  options);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  Option(tokens,  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(tokens,  options);	  Option    tokens    =    new    Option(tokens);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
77	[BUG]  [BUGGY]  Option  tokens  =  new  Option(this.options);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  Option(this.options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(this.options);	  Option    tokens    =    new    Option(tokens);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
78	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens),  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.tokens),  true);	  this.tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
79	[BUG]  [BUGGY]  this.tokens.add(Arrays.asList(this.tokens));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Arrays.asList(this.tokens));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Arrays.asList(this.tokens));	  this.tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  options.remove( "-- ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.remove( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.remove( "-- ");	  options.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
81	[BUG]  [BUGGY]  options.add( "-- "  +  tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add( "-- "  +  tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add( "-- "  +  tokens.size());	  options.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
82	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "-n ");	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  Option  tokens  =  new  LinkedList  <  Option>();  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  LinkedList  <  Option>();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  LinkedList  <  Option>();	  Option    tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
84	[BUG]  [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>(options.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  ArrayList  <  Option>(options.size());	  Option    tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
85	[BUG]  [BUGGY]  Options  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  tokens  =  new  ArrayList  <  Option>();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  tokens  =  new  ArrayList  <  Option>();	  Option    tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
86	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(eatTheRest));	  tokens.addAll(this);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
87	[BUG]  [BUGGY]  tokens.add(this);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add(this);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add(this);	  tokens.addAll(this);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
88	[BUG]  [BUGGY]  options.addAll(this.tokens);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(this.tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.addAll(this.tokens);	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  options.addAll(tokens.values());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(tokens.values());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.addAll(tokens.values());	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
91	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	||!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
92	[BUG]  [BUGGY]  this.tokens.add(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Arrays.asList(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Arrays.asList(this.options));	  this.tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
93	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.options),  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.addAll(Arrays.asList(this.options),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.options),  true);	  this.tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
94	[BUG]  [BUGGY]  Option  tokens  =  options.get( "this.eatTheRest ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  options.get( "this.eatTheRest ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  options.get( "this.eatTheRest ");	  Option    tokens    =    options.get(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
95	[BUG]  [BUGGY]  Option  tokens  =  options.get( "eattheRest ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  options.get( "eattheRest ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  options.get( "eattheRest ");	  Option    tokens    =    options.get(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
96	[BUG]  [BUGGY]  Option  tokens  =  options.get( "_eatTheRest ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  options.get( "_eatTheRest ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  options.get( "_eatTheRest ");	  Option    tokens    =    options.get(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
97	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
98	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
99	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
100	[BUG]  [BUGGY]  Options  options  =  new  Options(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  options  =  new  Options(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  options  =  new  Options(tokens.size());	  Options    options    =    new    Options(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
101	[BUG]  [BUGGY]  Option  options  =  new  Options(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  options  =  new  Options(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  options  =  new  Options(tokens.size());	  Options    options    =    new    Options(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
102	[BUG]  [BUGGY]  options  =  new  Options(tokens.size());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options  =  new  Options(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options  =  new  Options(tokens.size());	  Options    options    =    new    Options(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
103	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
104	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
105	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT,  tokens);	  this.tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
106	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  null);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT,  null);	  this.tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
107	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
108	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
109	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
110	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
111	[BUG]  [BUGGY]  Option  tokens  =  new  Option(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  Option(tokens.size()  +  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  Option(tokens.size()  +  1);	  Option    tokens    =    new    Option(tokens.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
112	[BUG]  [BUGGY]  Options  tokens  =  new  Option(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  tokens  =  new  Option(tokens.size()  -  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  tokens  =  new  Option(tokens.size()  -  1);	  Option    tokens    =    new    Option(tokens.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
113	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.addAll(tokens.size());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.addAll(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  LinkedList  <  Option>();  tokens.addAll(tokens.size());	  tokens    =    new    ArrayList    <    Option>();    tokens.addAll(tokens.size());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
114	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size()  +  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size()  +  1);	  tokens    =    new    ArrayList    <    Option>();    tokens.addAll(tokens.size());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
115	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
116	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
117	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
118	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  LinkedList  <  Option>();	  if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
119	[BUG]  [BUGGY]  tokens.add( "_eatTheRest ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "_eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "_eatTheRest ");	  tokens.add(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	75	None	replace
120	[BUG]  [BUGGY]  tokens.add( "eattheRest ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "eattheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "eattheRest ");	  tokens.add(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	75	None	replace
121	[BUG]  [BUGGY]  this.tokens.add( "null ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "null ");	  this.tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
122	[BUG]  [BUGGY]  this.tokens.add( "- ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "- ");	  this.tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
123	[BUG]  [BUGGY]  this.tokens.add( "   ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add( "   ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "   ");	  this.tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
124	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.get(0));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.get(0));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.get(0));	  tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.get(0));    	non-compiled	[CE]  <identifier>  expected	56	None	replace
125	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	69	None	replace
126	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
127	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
128	[BUG]  [BUGGY]  if(options!=  null)  {  tokens.addAll(Arrays.asList(options));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  tokens.addAll(Arrays.asList(options));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(options!=  null)  {  tokens.addAll(Arrays.asList(options));  }	  if(tokens!=    null)    {    tokens.addAll(Arrays.asList(options));    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
129	[BUG]  [BUGGY]  options.addAll(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(Arrays.asList(options));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.addAll(Arrays.asList(options));	  if(tokens!=    null)    {    tokens.addAll(Arrays.asList(options));    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
130	[BUG]  [BUGGY]  All(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  All(Arrays.asList(options));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	All(Arrays.asList(options));	  if(tokens!=    null)    {    tokens.addAll(Arrays.asList(options));    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
131	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove(0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove(0);	  tokens.remove(   "--   ");    	non-compiled	[CE]  <identifier>  expected	26	None	replace
132	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
133	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
134	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
135	[BUG]  [BUGGY]  this.tokens.remove(tokens.size());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.remove(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.remove(tokens.size());	  this.tokens.remove(tokens.size()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
136	[BUG]  [BUGGY]  this.tokens.add(tokens.size());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(tokens.size());	  this.tokens.remove(tokens.size()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
137	[BUG]  [BUGGY]  this.tokens.remove(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.remove(0);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.remove(0);	  this.tokens.remove(tokens.size()    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
138	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>(options.size());	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
139	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
140	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	65	None	replace
141	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
142	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(i));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(i));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
143	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
144	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
145	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
146	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList(0);  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
147	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
148	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(this,  eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(this,  eatTheRest));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
149	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this,  options));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(this,  options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(this,  options));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
150	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
151	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
152	[BUG]  [BUGGY]  if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
153	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
154	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));	  tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.get(0));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
155	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
156	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
157	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
158	[BUG]  [BUGGY]  tokens.add( "--null ");  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "--null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "--null ");	  tokens.add(   "--n   ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
159	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
160	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.remove(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
161	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	48	None	replace
162	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
163	[BUG]  [BUGGY]  if(tokens  ==  null)  {  tokens.addAll(Arrays.asList(options));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens  ==  null)  {  tokens.addAll(Arrays.asList(options));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  tokens.addAll(Arrays.asList(options));  }	  if(tokens    ==    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
164	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(0));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
165	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
166	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }	  if(eatTheRest)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
167	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.size());  }	  if(eatTheRest)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
168	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }	  if(eatTheRest)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
169	[BUG]  [BUGGY]  options.add(tokens.toArray(new  Option[tokens.size()  ]));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(tokens.toArray(new  Option[tokens.size()  ]));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add(tokens.toArray(new  Option[tokens.size()  ]));	  options.add(tokens);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
170	[BUG]  [BUGGY]  options.add(tokens.toArray(new  String[tokens.size()  ]));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(tokens.toArray(new  String[tokens.size()  ]));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add(tokens.toArray(new  String[tokens.size()  ]));	  options.add(tokens);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
171	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
172	[BUG]  [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest  ==  true)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
173	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
174	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  arrays.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
175	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.tokens),  eatTheRest);	  this.tokens.addAll(Arrays.asList(this.tokens));    	non-compiled	[CE]  <identifier>  expected	12	None	replace
176	[BUG]  [BUGGY]  tokens.add( "this.eatTheRest ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "this.eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "this.eatTheRest ");	  tokens.add(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	75	None	replace
177	[BUG]  [BUGGY]  tokens.add( "--eatTheRest ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "--eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "--eatTheRest ");	  tokens.add(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	75	None	replace
178	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
179	[BUG]  [BUGGY]  tokens.add( "null ",  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "null ",  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "null ",  eatTheRest);	  tokens.add(   "null   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
180	[BUG]  [BUGGY]  this.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.eatTheRest  =  true;	  if(eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
181	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
182	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
183	[BUG]  [BUGGY]  if(tokens!=  null)  {  options.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  options.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  options.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
184	[BUG]  [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
185	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
186	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
187	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
188	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.get(0));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
189	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  LinkedList  <  Option>();  tokens.add(tokens.size());  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
190	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.values());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.values());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  new  ArrayList  <  Option>();  tokens.addAll(tokens.values());	  tokens    =    new    ArrayList    <    Option>();    tokens.addAll(tokens.size());    	non-compiled	[CE]  <identifier>  expected	14	None	replace
191	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
192	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
193	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
194	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(i),  options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
195	[BUG]  [BUGGY]  this.tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "-- ");	  this.tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
196	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
197	[BUG]  [BUGGY]  tokens.addAll(eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(eatTheRest);	  tokens.addAll(this);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
198	[BUG]  [BUGGY]  Option  tokens  =  options.get( "key ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  options.get( "key ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  options.get( "key ");	  Option    tokens    =    options.get(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	68	None	replace
199	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	70	None	replace
200	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this),  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(this),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(this),  eatTheRest);	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
201	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
202	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
203	[BUG]  [BUGGY]  this.tokens.addAll(Arrays.asList(this.options),  eatTheRest);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.addAll(Arrays.asList(this.options),  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.addAll(Arrays.asList(this.options),  eatTheRest);	  this.tokens.addAll(Arrays.asList(this.options));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
204	[BUG]  [BUGGY]  tokens  =  Lists.newArrayList(options);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens  =  Lists.newArrayList(options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens  =  Lists.newArrayList(options);	  if(tokens!=    null)    {    tokens.addAll(Arrays.asList(options));    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
205	[BUG]  [BUGGY]  if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens  ==  null)  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
206	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(0));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
207	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.size());  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
208	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.add(tokens.get(1));  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    new    ArrayList    <    Option>();    tokens.add(tokens.size());    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
209	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  eatTheRest);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT,  eatTheRest);	  this.tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
210	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT  +  1);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Token.EXPR_RESULT  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT  +  1);	  this.tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
211	[BUG]  [BUGGY]  if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(options!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.addAll(options[i]);  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
212	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(this.options));	  tokens.addAll(Arrays.asList(options));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
213	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
214	[BUG]  [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(Arrays.asList(tokens));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(Arrays.asList(tokens));	  if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
215	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
216	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
217	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
218	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
219	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(1));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
220	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(0));    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
221	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  false;  }	  if(eatTheRest    ==    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
222	[BUG]  [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
223	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  eatTheRest  =  true;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
224	[BUG]  [BUGGY]  tokens.remove( "eattheRest ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "eattheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.remove( "eattheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	51	None	replace
225	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
226	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
227	[BUG]  [BUGGY]  if(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest!=  false)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest!=  false)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
228	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
229	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(tokens    ==    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
230	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0));  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
231	[BUG]  [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
232	[BUG]  [BUGGY]  this.tokens.add( "none ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add( "none ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add( "none ");	  this.tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	76	None	replace
233	[BUG]  [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
234	[BUG]  [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
235	[BUG]  [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  1);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.tokens.add(Token.EXPR_RESULT,  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	this.tokens.add(Token.EXPR_RESULT,  1);	  this.tokens.add(Token.EXPR_RESULT);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
236	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
237	[BUG]  [BUGGY]  options.add( "n ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add( "n ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.add( "n ");	  options.add(tokens);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
238	[BUG]  [BUGGY]  options.set( "-- ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.set( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.set( "-- ");	  options.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
239	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
240	[BUG]  [BUGGY]  options.addAll(eatTheRest);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	options.addAll(eatTheRest);	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
241	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());	  if(tokens    ==    null)    {    tokens    =    new    ArrayList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
242	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	69	None	replace
243	[BUG]  [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	&&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	69	None	replace
244	[BUG]  [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	&&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	69	None	replace
245	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	69	None	replace
246	[BUG]  [BUGGY]  tokens.addAll(tokens);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(tokens);	  if(tokens!=    null)    {    tokens    =    new    LinkedList    <    Option>();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
247	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
248	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
249	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens  ==  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens  ==  null)  {  options  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    options    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
250	[BUG]  [BUGGY]  tokens.addAll(getValues());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll(getValues());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll(getValues());	  tokens.addAll(this);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
251	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
252	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(Arrays.asList(options));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(Arrays.asList(options));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	TokenBuffer  tokens  =  new  TokenBuffer(Arrays.asList(options));	  if(tokens!=    null)    {    tokens.addAll(Arrays.asList(options));    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
253	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
254	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options[i]);  }  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
255	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(0),  options.get  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(0),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(0),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	70	None	replace
256	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
257	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
258	[BUG]  [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  options.size();  i++)  {  options.add(options.get(0),  options.get(1));  }	  if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    options.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
259	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
260	[BUG]  [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>(options);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  tokens  =  new  ArrayList  <  Option>(options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Option  tokens  =  new  ArrayList  <  Option>(options);	  Option    tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
261	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
262	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.addAll(options);  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
263	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
264	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens.addAll(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  i++)  {  options.add(options.get(i),  options.get(i));  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    i++)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
265	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	65	None	replace
266	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get    	non-compiled	[CE]  <identifier>  expected	65	None	replace
267	[BUG]  [BUGGY]  tokens.add( "- ".equals(this.options));  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "- ".equals(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "- ".equals(this.options));	  tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
268	[BUG]  [BUGGY]  tokens.add(Arrays.asList(eatTheRest));  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add(Arrays.asList(eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add(Arrays.asList(eatTheRest));	  tokens.addAll(Arrays.asList(this));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
269	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
270	[BUG]  [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	&&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get(	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
271	[BUG]  [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  &&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	&&  tokens!=  null)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(i),  options.get	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(    	non-compiled	[CE]  <identifier>  expected	64	None	replace
272	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens  =  Lists.newArrayList();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options.get(0),  options.get(1));  }	  tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options.get(i),    options.get(i));    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
273	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(eatTheRest)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
274	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(!eatTheRest)  {  tokens.add(Lists.newArrayList());  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options);  }	  if(eatTheRest)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
275	[BUG]  [BUGGY]  tokens.add( "-- ".equals(this.options));  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- ".equals(this.options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.add( "-- ".equals(this.options));	  tokens.add(   "--n   ");    	non-compiled	[CE]  <identifier>  expected	27	None	replace
276	[BUG]  [BUGGY]  tokens.addAll( "-- ".equals(eatTheRest));  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.addAll( "-- ".equals(eatTheRest));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	tokens.addAll( "-- ".equals(eatTheRest));	  tokens.addAll(   "--   ");    	non-compiled	[CE]  <identifier>  expected	74	None	replace
277	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	if(tokens!=  null)  {  tokens.clear();  for(int  i  =  0;  i  <  tokens.size();  ++i)  {  options.add(options[i]);  }	  if(eatTheRest)    {    if(tokens!=    null)    {    tokens    =    Lists.newArrayList();    for(int    i    =    0;    i    <    tokens.size();    ++i)    {    options.add(options[i]);    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
278	[BUG]  [BUGGY]  Options  options  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Options  options  =  new  Option(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  boolean  eatTheRest  	projects/Cli22/src/java/org/apache/commons/cli/PosixParser.java	0.282842712474619	54	54	2	replace	Options  options  =  new  Option(tokens.size());	  Options    options    =    new    Options(tokens.size()    -    1);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
