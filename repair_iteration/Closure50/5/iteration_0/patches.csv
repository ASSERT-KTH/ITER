bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkNotNull(sb);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
2	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkNotNull(sb);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
5	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  ==  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  ==  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  ==  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  ==  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
9	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(prev!=  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(prev!=  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
11	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
13	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  >  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  >  0);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]    [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	  	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
16	[BUG]  [BUGGY]    [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]    [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	  	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
17	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);  [CE]  incomparable  types:  String  and  Node  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);	Preconditions.checkNotNull(prev);  	non-compiled	[CE]  incomparable  types:  String  and  Node	9	None	replace
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));	Preconditions.checkNotNull(prev);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	replace
24	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unknown  function  name ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unknown  function  name ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unknown  function  name ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unknown  function  name ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unknown  function  name ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unknown  statement ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unknown  statement ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  RuntimeException  	9	2	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unknown  statement ");  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unknown  statement ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unknown  statement ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  RuntimeException  	9	2	replace
28	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unexpected  function  name ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unexpected  function  name ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unexpected  function  name ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {  [BUGGY]  Preconditions.checkState(false, "Unexpected  function  name ");  [BUGGY]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unexpected  function  name ");	Preconditions.checkNotNull(prev);  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  	9	2	replace
