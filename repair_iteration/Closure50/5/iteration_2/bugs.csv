bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	18	2	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	18	None	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(prev)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(prev)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(prev)!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(prev)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(prev)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	18	2	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementType(elem)!=  null);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementType(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementType(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
9	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    Preconditions.checkState(false,   "Unexpected  function  name   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
10	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    Preconditions.checkState(false,   "Unexpected  function  name   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
11	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unexpected  function  name   ");  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unexpected  function  name   ");	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	28	None	add
12	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  foldedSize  +=  sb.length()  +  2;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    Preconditions.checkState(false,   "Unexpected  function  name   ");  foldedSize  +=  sb.length()  +  2;	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
13	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  foldedSize  +=  sb.length()  +  2;  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Preconditions.checkState(false,   "Unexpected  function  name   ");  foldedSize  +=  sb.length()  +  2;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    Preconditions.checkState(false,   "Unexpected  function  name   ");  foldedSize  +=  sb.length()  +  2;	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
14	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Node  Preconditions.checkState(false,   "Unexpected  function  name   ");  [CE]  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  Node  Preconditions.checkState(false,   "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    Node  Preconditions.checkState(false,   "Unexpected  function  name   ");	  	non-compiled	[CE]  	28	None	add
15	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
16	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  Preconditions.checkNotNull(sb);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
17	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
18	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
20	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
21	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( "AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
22	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "AssertionFailedError:  Expected: ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
23	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( "n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
24	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	2	add
25	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( "n ");  Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
26	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  Preconditions.checkNotNull(sb);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "n ");  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "n ");  Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
27	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( "[AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
28	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "[AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "[AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
29	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a   "  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a   "	  	non-compiled	[CE]  	1	None	add
30	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	20	None	replace
31	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	20	2	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)!=  null);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getAssignedStringValue(elem)  ==  null);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getAssignedStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getAssignedStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n);  [CE]  incomparable  types:  String  and  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  Node	21	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(n)||  NodeUtil.getArrayElementStringValue(elem)  ==  elem);  [CE]  incomparable  types:  String  and  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(n)||  NodeUtil.getArrayElementStringValue(elem)  ==  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(n)||  NodeUtil.getArrayElementStringValue(elem)  ==  elem);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  Node	21	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  0);  [CE]  incomparable  types:  String  and  int  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  0);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  int	21	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  0);  [CE]  incomparable  types:  String  and  int  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  0);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  int	21	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n,  prev);  [CE]  incomparable  types:  String  and  Node  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n,  prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n,  prev);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  Node	21	None	replace
40	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    Preconditions.checkArgument(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
41	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Preconditions.checkArgument(sb.length()  ==  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    Preconditions.checkArgument(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
42	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb.length()  ==  0);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    sb.length()  ==  0);	  	non-compiled	[CE]  not  a  statement	7	None	add
43	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
44	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
45	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
46	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
47	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
48	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
49	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    junit.framework.AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  not  a  statement	7	None	add
50	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
51	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
52	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  null;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
53	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  null;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkArgument(sb.length()  ==  0);  }  else  {  sb  =  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
54	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	11	2	add
55	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	11	2	add
56	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
57	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  not  a  statement	11	None	add
58	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  not  a  statement	11	None	add
59	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	non-compiled	[CE]  not  a  statement	11	None	add
60	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    junit.framework.AssertionFailedError:  Expected:  x=[ "if(prev  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	non-compiled	[CE]  not  a  statement	11	None	add
61	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	11	None	add
62	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  InlineCostEstimator.getCost(prev);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  InlineCostEstimator.getCost(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  InlineCostEstimator.getCost(prev);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(prev));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	23	2	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(prev));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	23	2	replace
65	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isAssignmentOp(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(elem));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isAssignmentOp(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(prev));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isLiteralValue(prev));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	23	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(elem));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isLiteralValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isLiteralValue(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	23	None	replace
69	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	23	2	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(n));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isAssignmentOp(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	23	2	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVarArgsValue(elem));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isVarArgsValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isVarArgsValue(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
72	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name. ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown  function  name. ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name. ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name. ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown  function  name. ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(false,  true, "Unknown  function  name ");  [CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  true, "Unknown  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  true, "Unknown  function  name ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)	25	None	replace
75	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name: "  +  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown  function  name: "  +  elem);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name: "  +  elem);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name: "  +  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown  function  name: "  +  elem);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
77	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.FUNCTION);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  elem.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.FUNCTION);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.FUNCTION);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  elem.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
79	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.NAME);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  elem.getType()  ==  Token.NAME);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.NAME);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.NAME);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  elem.getType()  ==  Token.NAME);	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	25	2	replace
81	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true, "Unknown  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(true, "Unknown  function  name ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	25	2	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(true, "Unknown  function  name ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true, "Unknown  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(true, "Unknown  function  name ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	25	2	replace
83	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    Preconditions.checkState(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
84	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Preconditions.checkState(sb.length()  ==  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    Preconditions.checkState(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
85	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    Node  prev  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
86	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
87	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
88	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  prev  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  prev  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    Node  prev  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
89	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
90	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
91	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
92	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
93	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldingSize  +=  sb.length()  +  2;  }  [CE]  cannot  find  symbol  foldingSize  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldingSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldingSize  +=  sb.length()  +  2;  }	  	non-compiled	[CE]  cannot  find  symbol  foldingSize	5	None	add
94	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldSize  +=  sb.length()  +  2;  }  [CE]  cannot  find  symbol  foldSize  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  foldSize  +=  sb.length()  +  2;  }	  	non-compiled	[CE]  cannot  find  symbol  foldSize	5	None	add
95	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name. ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected  function  name. ");	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name. ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name. ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected  function  name. ");	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name.  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(false,  true, "Unexpected  function  name ");  [CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  true, "Unexpected  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  true, "Unexpected  function  name ");	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)	29	None	replace
98	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
100	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true, "Unexpected  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(true, "Unexpected  function  name ");	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	29	2	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(true, "Unexpected  function  name ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true, "Unexpected  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(true, "Unexpected  function  name ");	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	29	2	replace
102	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem.toString());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected  function  name: "  +  elem.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name:NAME  foo  1  [source_file:  testcode]  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
104	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  ==  1);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
105	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  ==  1);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
106	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  ==  2);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	8	2	replace
107	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  2);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  ==  2);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	8	2	replace
108	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()!=  0);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
109	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()!=  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()!=  0);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
110	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()!=  1);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	8	2	replace
111	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()!=  1);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()!=  1);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	8	2	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarArgsValue(elem));  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarArgsValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isVarArgsValue(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(prev));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	4	None	replace
114	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isAssignmentOp(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
116	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isFunctionDeclaration(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
118	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(n));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(n));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(n));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    >    0);    Preconditions.checkArgument(sb.length()  >  0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	13	2	add
121	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Preconditions.checkArgument(sb.length()  >  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Preconditions.checkArgument(sb.length()  >  0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	13	2	add
122	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb.length()  >  0);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    sb.length()  >  0);	  	non-compiled	[CE]  not  a  statement	13	None	add
123	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    junit.framework.AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  not  a  statement	13	None	add
124	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  AssertionFailedError:  Expected:  x=[ "a   "  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
125	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Context.checkArgument(sb.length()  >  0);  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Context.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Context.checkArgument(sb.length()  >  0);	  	non-compiled	[CE]  cannot  find  symbol  Context	13	None	add
126	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  junit.framework.AssertionFailedError:  Expected:  x=[];  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  junit.framework.AssertionFailedError:  Expected:  x=[];  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    junit.framework.AssertionFailedError:  Expected:  x=[];	  	non-compiled	[CE]  not  a  statement	13	None	add
127	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Preconditions.checkState(false,   "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    function    name   ");    Preconditions.checkState(false,   "Unknown  function  name   ");	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	24	2	add
128	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Preconditions.checkState(false,   "Unknown  function  name   ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Preconditions.checkState(false,   "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    Preconditions.checkState(false,   "Unknown  function  name   ");	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	24	2	add
129	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  function  name   ");  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  function  name   ");	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
130	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Node  Preconditions.checkState(false,   "Unknown  function  name   ");  [CE]  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  Node  Preconditions.checkState(false,   "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    Node  Preconditions.checkState(false,   "Unknown  function  name   ");	  	non-compiled	[CE]  	24	None	add
131	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.checkState(false,   "Unknown  function  name   ");  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.checkState(false,   "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    NodeUtil.checkState(false,   "Unknown  function  name   ");	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
132	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
133	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
134	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
135	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
136	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
137	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  elem  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [CE]  variable  elem  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  elem  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  elem  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  variable  elem  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
138	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  ';'  expected	3	None	add
139	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getLastChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
140	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isLiteralValue(prev));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isLiteralValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isLiteralValue(prev));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
141	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev  ==  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	10	2	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(prev  ==  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev  ==  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	10	2	replace
143	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb!=  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	10	2	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(sb!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb!=  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	10	2	replace
145	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(n!=  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	10	2	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(n!=  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	10	2	replace
147	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb  ==  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	10	2	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(sb  ==  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb  ==  null);	  Preconditions.checkState(prev!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	10	2	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(prev  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev  >=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev  >=  null);	  Preconditions.checkState(prev!=    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(item!=  null);  [CE]  cannot  find  symbol  item  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(item!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(item!=  null);	  Preconditions.checkState(prev!=    null);    	non-compiled	[CE]  cannot  find  symbol  item	10	None	replace
151	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isAssignmentOp(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarArgsValue(prev));  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarArgsValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isVarArgsValue(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
154	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isFunctionDeclaration(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunctionDeclaration(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isFunctionDeclaration(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  ==  1);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  ==  1);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
158	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  >  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  >  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  >  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
160	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  ==  2);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	6	2	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  2);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  ==  2);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	6	2	replace
162	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()!=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()!=  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()!=  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()!=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()!=  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
164	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  >=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  >=  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  >=  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  >=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  >=  0);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
166	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()!=  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()!=  2);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()!=  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()!=  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()!=  2);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	replace
168	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
169	[BUG]  [BUGGY]      sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
170	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
171	[BUG]  [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "[AssertionFailedError:  Expected: ").append(prev).append( "] ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
172	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append( "AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
173	[BUG]  [BUGGY]      sb.append( "AssertionFailedError:  Expected: ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
174	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  null;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb  =  null;	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	15	2	add
175	[BUG]  [BUGGY]      sb  =  null;  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  null;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  null;	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	15	2	add
176	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(String.valueOf(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append( "AssertionFailedError:  Expected: ").append(String.valueOf(prev));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
177	[BUG]  [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(String.valueOf(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(String.valueOf(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "AssertionFailedError:  Expected: ").append(String.valueOf(prev));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
178	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append( "[AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
179	[BUG]  [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "[AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "[AssertionFailedError:  Expected: ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
180	[BUG]  [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(x).append( "n ");  [CE]  cannot  find  symbol  x  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(x).append( "n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "AssertionFailedError:  Expected: ").append(x).append( "n ");	  	non-compiled	[CE]  cannot  find  symbol  x	15	None	add
181	[BUG]  [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a "  [CE]  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "AssertionFailedError:  Expected: ").append(x).append( "a "	  	non-compiled	[CE]  	15	None	add
182	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
183	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
184	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	19	2	add
185	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	19	2	add
186	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu	  	non-compiled	[CE]  ')'  expected	19	None	add
187	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement	  	non-compiled	[CE]  ')'  expected	19	None	add
188	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal	  	non-compiled	[CE]  ')'  expected	19	None	add
189	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu	  	non-compiled	[CE]  ')'  expected	19	None	add
190	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement	  	non-compiled	[CE]  ')'  expected	19	None	add
191	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal	  	non-compiled	[CE]  ')'  expected	19	None	add
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement   ");	  	compilable	  [FE]  RuntimeException  	26	2	add
193	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement   ");	  	compilable	  [FE]  RuntimeException  	26	2	add
194	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  statement   ");  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Node  prev  =  n.getFirstChild();  Preconditions.checkState(false,   "Unknown  statement   ");	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	add
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  foldedSize  +=  sb.length()  +  2;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement   ");  foldedSize  +=  sb.length()  +  2;	  	compilable	  [FE]  RuntimeException  	26	2	add
196	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  foldedSize  +=  sb.length()  +  2;  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement   ");  foldedSize  +=  sb.length()  +  2;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement   ");  foldedSize  +=  sb.length()  +  2;	  	compilable	  [FE]  RuntimeException  	26	2	add
197	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement ",  sb.length()  +  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement ",  sb.length()  +  2);	  	compilable	  [FE]  RuntimeException  	26	2	add
198	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement ",  sb.length()  +  2);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Preconditions.checkState(false,   "Unknown  statement ",  sb.length()  +  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Preconditions.checkState(false,   "Unknown  statement ",  sb.length()  +  2);	  	compilable	  [FE]  RuntimeException  	26	2	add
199	[BUG]  [BUGGY]  Preconditions.checkState(false,  true, "Unknown  statement ");  [CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  true, "Unknown  statement ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  true, "Unknown  statement ");	  Preconditions.checkState(false,   "Unknown    statement   ");    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)	27	None	replace
200	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  sb.length()  >  0);	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	27	2	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(false,  sb.length()  >  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  sb.length()  >  0);	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	27	2	replace
202	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  elem.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	27	2	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.EXPR_RESULT);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  elem.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	27	2	replace
204	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true,   "Unknown  statement ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(true,   "Unknown  statement ");	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(true,   "Unknown  statement ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(true,   "Unknown  statement ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(true,   "Unknown  statement ");	  Preconditions.checkState(false,   "Unknown    statement   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	27	2	replace
206	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  Preconditions.checkState(prev!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    Preconditions.checkState(prev!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	add
207	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  Preconditions.checkState(prev!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  Preconditions.checkState(prev!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    Preconditions.checkState(prev!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	add
208	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(prev!=  null);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(prev!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    Node  prev  =  n.getFirstChild();  Preconditions.checkState(prev!=  null);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
209	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "this  may  have  side  effects  and  can't  be  removed "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "this  may  have  side  effects  and  can't  be  removed "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "this  may  have  side  effects  and  can't  be  removed "	  	non-compiled	[CE]  not  a  statement	9	None	add
210	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	9	None	add
211	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "	  	non-compiled	[CE]  not  a  statement	9	None	add
212	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
213	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
214	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "this  is  not  a  string  value "  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "this  is  not  a  string  value "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "this  is  not  a  string  value "	  	non-compiled	[CE]  not  a  statement	9	None	add
215	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "assertionfailed "  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "assertionfailed "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "assertionfailed "	  	non-compiled	[CE]  not  a  statement	9	None	add
216	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  >=  0);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	2	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >=  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >=  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  >=  0);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	2	replace
218	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  >  1);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	14	2	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  1);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  >  1);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	14	2	replace
220	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  <  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  <  0);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	14	2	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  <  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  <  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  <  0);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	14	2	replace
222	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isImmutableValue(elem));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
223	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isImmutableValue(elem));	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
224	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
225	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  not  a  statement	22	None	add
226	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();  Preconditions.checkState(!NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
227	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    junit.framework.AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  not  a  statement	22	None	add
228	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ "	  	non-compiled	[CE]  not  a  statement	22	None	add
229	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isLiteralValue(elem));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isLiteralValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isLiteralValue(elem));	  	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	22	None	add
230	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  junit.framework.AssertionFailedError:  Expected:  x=[ ".join( "	  	non-compiled	[CE]  not  a  statement	22	None	add
231	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  error ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unexpected  error ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	2	2	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unexpected  error ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  error ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unexpected  error ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	2	2	replace
233	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
234	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
235	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	17	None	add
236	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
237	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
238	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Node  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	non-compiled	[CE]  ';'  expected	17	None	add
239	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  >=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	add
240	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Node  prev  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	17	None	add
241	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(NodeUtil.isImmutableValue(parent)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Node  parent  =  n.getParent();  Preconditions.checkState(NodeUtil.isImmutableValue(parent)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
242	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(NodeUtil.isImmutableValue(parent)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  Node  parent  =  n.getParent();  Preconditions.checkState(NodeUtil.isImmutableValue(parent)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    Node  parent  =  n.getParent();  Preconditions.checkState(NodeUtil.isImmutableValue(parent)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	17	2	add
243	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  ==  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  ==  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
244	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  ==  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  ==  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
245	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  ==  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  ==  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
246	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  AssertionFailedError:  Expected:  x=[ "a   "  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  AssertionFailedError:  Expected:  x=[ "a   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    AssertionFailedError:  Expected:  x=[ "a   "	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
247	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
248	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
249	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  InlineCostEstimator.getCost(prev).copyInformationFrom(prev);  [CE]  int  cannot  be  dereferenced  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  InlineCostEstimator.getCost(prev).copyInformationFrom(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    InlineCostEstimator.getCost(prev).copyInformationFrom(prev);	  	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	add
250	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  elem.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	29	2	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(false,  elem.toString());  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  elem.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  elem.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	29	2	replace
252	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
253	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newString(prev);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newString(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  NodeUtil.newString(prev);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
254	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newArrayElement(prev);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newArrayElement(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  NodeUtil.newArrayElement(prev);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
255	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newNumber(prev);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  NodeUtil.newNumber(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  NodeUtil.newNumber(prev);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
256	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  new  StringBuffer();  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb  =  new  StringBuffer();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb  =  new  StringBuffer();	  	non-compiled	[CE]  incompatible  types	1	None	add
257	[BUG]  [BUGGY]  Preconditions.checkState(false,  false, "Unknown  statement ");  [CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  false, "Unknown  statement ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  false, "Unknown  statement ");	  Preconditions.checkState(false,   "Unknown    statement   ");    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)	27	None	replace
258	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  3);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()  ==  3);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	6	2	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  3);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  3);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()  ==  3);	  Preconditions.checkState(sb.length()    ==    0);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	6	2	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.get  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.get  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.get	  	non-compiled	[CE]  ')'  expected	19	None	add
261	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)  ==  null);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
262	[BUG]  [BUGGY]      Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      Node  prev  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
263	[BUG]  [BUGGY]      sb  =  new  StringBuffer();  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  new  StringBuffer();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  new  StringBuffer();	  	non-compiled	[CE]  incompatible  types	15	None	add
264	[BUG]  [BUGGY]      Node  prev  =  n.getLastChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      Node  prev  =  n.getLastChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        Node  prev  =  n.getLastChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
265	[BUG]  [BUGGY]      sb  =  NodeUtil.newString(prev);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  NodeUtil.newString(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  NodeUtil.newString(prev);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
266	[BUG]  [BUGGY]      sb  =  NodeUtil.newArrayElement(prev);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  NodeUtil.newArrayElement(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  NodeUtil.newArrayElement(prev);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
267	[BUG]  [BUGGY]      sb  =  NodeUtil.newStringNode(prev);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  NodeUtil.newStringNode(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  NodeUtil.newStringNode(prev);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
268	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append( "n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
269	[BUG]  [BUGGY]      sb.append( "n ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append( "n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append( "n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
270	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [CE]  ')'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValu	  	non-compiled	[CE]  ')'  expected	17	None	add
271	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [CE]  ')'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringVal	  	non-compiled	[CE]  ')'  expected	17	None	add
272	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue  [CE]  ')'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue	  	non-compiled	[CE]  ')'  expected	17	None	add
273	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [CE]  not  a  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  	non-compiled	[CE]  not  a  statement	17	None	add
274	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [CE]  ')'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElement	  	non-compiled	[CE]  ')'  expected	17	None	add
275	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isFunction(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isFunction(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isFunction(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getFunctionDeclaration(elem)!=  null);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getFunctionDeclaration(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getFunctionDeclaration(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  >  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Node  sb  =  n.getFirstChild();  Preconditions.checkArgument(sb.length()  >  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
279	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  >  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Node  sb  =  n.getLastChild();  Preconditions.checkArgument(sb.length()  >  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
280	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  >  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Node  sb  =  n.getNode();  Preconditions.checkArgument(sb.length()  >  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
281	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    >    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	13	2	add
282	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	13	2	add
283	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb.length()  >  0;  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb.length()  >  0;  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    sb.length()  >  0;	  	non-compiled	[CE]  not  a  statement	13	None	add
284	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    >    0);    sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  >  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	13	2	add
285	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  >  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  >  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	13	2	add
286	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
287	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
288	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue	  	non-compiled	[CE]  ')'  expected	22	None	add
289	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
290	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
291	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
292	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	22	2	add
293	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue	  	non-compiled	[CE]  ')'  expected	22	None	add
294	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValu  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValu  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValu	  	non-compiled	[CE]  ')'  expected	22	None	add
295	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isAssignmentOp(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(	  	non-compiled	[CE]  ')'  expected	22	None	add
296	[BUG]  [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x,  elem);  [CE]  cannot  find  symbol  x  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x,  elem);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x,  elem);	  Preconditions.checkNotNull(sb);    	non-compiled	[CE]  cannot  find  symbol  x	2	None	replace
297	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  AssertionFailedError:  Expected:  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "AssertionFailedError:  Expected: ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  AssertionFailedError:  Expected:  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  AssertionFailedError:  Expected:  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "AssertionFailedError:  Expected: ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  AssertionFailedError:  Expected:  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x);  [CE]  cannot  find  symbol  x  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "AssertionFailedError:  Expected: "  +  x);	  Preconditions.checkNotNull(sb);    	non-compiled	[CE]  cannot  find  symbol  x	2	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.length()  ==  0);  [CE]  not  a  statement  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    sb.length()  ==  0);	  	non-compiled	[CE]  not  a  statement	5	None	add
301	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  [CE]  illegal  start  of  expression  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
302	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev)  [CE]  ')'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev)  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev)	  	non-compiled	[CE]  ')'  expected	5	None	add
303	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(  [CE]  ')'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    if(sb.length()  ==  0)  {  Preconditions.checkState(sb.length()  ==  0);  }  else  {  FoldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(	  	non-compiled	[CE]  ')'  expected	5	None	add
304	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n  +  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n  +  1);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n  +  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  n  +  1);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	21	None	replace
307	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb.append( "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    function    name   ");    sb.append( "Unknown  function  name   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	24	2	add
308	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb.append( "Unknown  function  name   ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb.append( "Unknown  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    sb.append( "Unknown  function  name   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	24	2	add
309	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isGetProp(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	12	2	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(prev));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isGetProp(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	12	2	replace
311	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isVarDeclaration(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	2	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "   "	  	non-compiled	[CE]  not  a  statement	9	None	add
314	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getNode();  Preconditions.checkState(prev!=  null);  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getNode();  Preconditions.checkState(prev!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    Node  prev  =  n.getNode();  Preconditions.checkState(prev!=  null);	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
315	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "	  	non-compiled	[CE]  not  a  statement	9	None	add
316	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "	  	non-compiled	[CE]  not  a  statement	9	None	add
317	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  Node  prev  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
318	[BUG]  [BUGGY]  Preconditions.checkState(false!=  null);  [CE]  incomparable  types:  boolean  and  <null>  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false!=  null);	  Preconditions.checkState(prev!=    null);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	10	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(preferredSize!=  null);  [CE]  cannot  find  symbol  preferredSize  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(preferredSize!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(preferredSize!=  null);	  Preconditions.checkState(prev!=    null);    	non-compiled	[CE]  cannot  find  symbol  preferredSize	10	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(loops!=  null);  [CE]  cannot  find  symbol  loops  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(loops!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(loops!=  null);	  Preconditions.checkState(prev!=    null);    	non-compiled	[CE]  cannot  find  symbol  loops	10	None	replace
321	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
322	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
323	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
324	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
325	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(  [CE]  ')'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(	  	non-compiled	[CE]  ')'  expected	3	None	add
326	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	3	2	add
327	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  sb  =  new  StringBuilder();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	3	2	add
328	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue  [CE]  ')'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue	  	non-compiled	[CE]  ')'  expected	3	None	add
329	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	3	2	add
330	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	3	2	add
331	[BUG]  [BUGGY]  Preconditions.checkState(false,  false, "Unknown  function  name ");  [CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  false, "Unknown  function  name ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  false, "Unknown  function  name ");	  Preconditions.checkState(false,   "Unknown    function    name   ");    	non-compiled	[CE]  no  suitable  method  found  for  checkState(boolean,boolean,String)	25	None	replace
332	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()!=  2);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
333	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()!=  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()!=  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()!=  2);	  Preconditions.checkArgument(sb.length()    ==    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  NodeUtil.checkState(false,   "Unexpected  function  name   ");  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  NodeUtil.checkState(false,   "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    NodeUtil.checkState(false,   "Unexpected  function  name   ");	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
335	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb.append( "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    sb.append( "Unexpected  function  name   ");	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
336	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb.append( "Unexpected  function  name   ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb.append( "Unexpected  function  name   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    sb.append( "Unexpected  function  name   ");	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
337	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
338	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb  =  new  StringBuilder();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
339	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(n));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(n));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(n));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(n));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
341	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	11	2	add
342	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	11	2	add
343	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
344	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
345	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
346	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }	  	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	11	None	add
347	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isLiteralValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
348	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValue	  	non-compiled	[CE]  ')'  expected	11	None	add
349	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValu  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValu  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  Preconditions.checkState(NodeUtil.isImmutableValu	  	non-compiled	[CE]  ')'  expected	11	None	add
350	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  Preconditions.checkState(false,   "Unknown  statement   ");  [CE]  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  Preconditions.checkState(false,   "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Node  Preconditions.checkState(false,   "Unknown  statement   ");	  	non-compiled	[CE]  	26	None	add
351	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  NodeUtil.checkState(false,   "Unknown  statement   ");  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  NodeUtil.checkState(false,   "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    NodeUtil.checkState(false,   "Unknown  statement   ");	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
352	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isLiteralValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isLiteralValue(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	4	None	replace
353	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isVarDeclaration(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
355	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()  >  2);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	2	replace
356	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  2);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()  >  2);	  Preconditions.checkArgument(sb.length()    >    0);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	2	replace
357	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  value  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  value ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unexpected  value ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  value  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unexpected  value ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  value  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  value ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unexpected  value ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  value  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
359	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  error:  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  error: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false, "Unexpected  error: ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  error:  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(false, "Unexpected  error: ");  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  error:  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false, "Unexpected  error: ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false, "Unexpected  error: ");	  Preconditions.checkNotNull(sb);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  error:  Node(CALL):  testcode:1:29  x  =  ['a'  	2	2	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(  [CE]  ')'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(	  	non-compiled	[CE]  ')'  expected	17	None	add
362	[BUG]  [BUGGY]      sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  NodeUtil.newString(prev).copyInformationFrom(prev);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
363	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	        sb.append(prev);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
364	[BUG]  [BUGGY]      sb.append(prev);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb.append(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb.append(prev);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
365	[BUG]  [BUGGY]      sb  =  Node.newString(prev);  [CE]  no  suitable  method  found  for  newString(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  Node.newString(prev);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  Node.newString(prev);	  	non-compiled	[CE]  no  suitable  method  found  for  newString(Node)	15	None	add
366	[BUG]  [BUGGY]      sb  =  NodeUtil.newString(prev).toString();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]      sb  =  NodeUtil.newString(prev).toString();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	        sb  =  NodeUtil.newString(prev).toString();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
367	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    function    name   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	24	2	add
368	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb  =  new  StringBuilder();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	24	2	add
369	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.isFunctionDeclaration(n):  x  =  ['a'  [CE]  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.isFunctionDeclaration(n):  x  =  ['a'  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    NodeUtil.isFunctionDeclaration(n):  x  =  ['a'	  	non-compiled	[CE]  	24	None	add
370	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.isFunctionDeclaration(sb));  [CE]  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unknown  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  function  name   ");  NodeUtil.isFunctionDeclaration(sb));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    function    name   ");    NodeUtil.isFunctionDeclaration(sb));	  	non-compiled	[CE]  	24	None	add
371	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(NodeUtil.isImmutableValue(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
372	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(NodeUtil.isImmutableValue(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
373	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isGetProp(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(elem));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isGetProp(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isGetProp(elem));	  Preconditions.checkState(NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	4	2	replace
375	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  a  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  sb.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  a  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(false,  sb.toString());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  a  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.toString());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  sb.toString());	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  a  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
377	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.toString().length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  sb.toString().length()  >  0);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(false,  sb.toString().length()  >  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.toString().length()  >  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  sb.toString().length()  >  0);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  true  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
379	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.length()  >  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,  sb.length()  >  1);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(false,  sb.length()  >  1);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.length()  >  1);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  sb.length()  >  1);	  Preconditions.checkState(false,   "Unexpected    function    name   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  false  Node(CALL):  testcode:1:29  x  =  ['a'  	29	2	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    Node  sb  =  n.getFirstChild();  Preconditions.checkState(sb.length()  ==  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
382	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.detachFromParent();  Preconditions.checkState(sb.length()  ==  0);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.detachFromParent();  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    sb.detachFromParent();  Preconditions.checkState(sb.length()  ==  0);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
383	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	5	2	add
384	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	5	2	add
385	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  sb  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  Node  sb  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    Node  sb  =  n.getLastChild();  Preconditions.checkState(sb.length()  ==  0);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
386	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    sb.setLength(0);  Preconditions.checkState(sb.length()  ==  0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	5	2	add
387	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  Preconditions.checkState(sb.length()  ==  0);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  Preconditions.checkState(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    sb.setLength(0);  Preconditions.checkState(sb.length()  ==  0);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	5	2	add
388	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(sb.length()    ==    0);    sb.setLength(0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
389	[BUG]  [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(sb.length()  ==  0);  sb.setLength(0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(sb.length()    ==    0);    sb.setLength(0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	5	2	add
390	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isAssignmentOp(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	20	2	replace
392	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isVarDeclaration(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isVarDeclaration(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isVarDeclaration(elem)||  NodeUtil.getArrayElementStringValue(elem)!=  null);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)!=    null);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	18	2	replace
394	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    statement   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  RuntimeException  	26	2	add
395	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb  =  new  StringBuilder();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    sb  =  new  StringBuilder();	  	compilable	  [FE]  RuntimeException  	26	2	add
396	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb.append( "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unknown    statement   ");    sb.append( "Unknown  statement   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	26	2	add
397	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb.append( "Unknown  statement   ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  sb.append( "Unknown  statement   ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    sb.append( "Unknown  statement   ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	26	2	add
398	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unknown  statement   ");  Node  prev  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unknown    statement   ");    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	add
399	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	23	2	replace
400	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	23	2	replace
401	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isVarDeclaration(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(elem));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isVarDeclaration(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isVarDeclaration(elem));	  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	23	2	replace
403	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
404	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
405	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
406	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }  else  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
407	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
408	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
409	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
410	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(!NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
411	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
412	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
413	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
414	[BUG]  [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(!NodeUtil.isImmutableValue(elem));    if(NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(!NodeUtil.isImmutableValue(elem));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	add
415	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getFirstChild();  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  Node  sb  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    Node  sb  =  n.getFirstChild();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
416	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  InlineCostEstimator  sb  =  new  InlineCostEstimator(n.getLastChild());  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  >  0);  InlineCostEstimator  sb  =  new  InlineCostEstimator(n.getLastChild());  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    >    0);    InlineCostEstimator  sb  =  new  InlineCostEstimator(n.getLastChild());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
417	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ";n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append( ";n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
418	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ";n ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ";n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append( ";n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
419	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append(prev);  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append(prev);  Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
420	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append(prev);  Preconditions.checkNotNull(sb);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append(prev);  Preconditions.checkNotNull(sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append(prev);  Preconditions.checkNotNull(sb);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
421	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append('n');  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append('n');	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
422	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append('n');  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append('n');  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append('n');	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
423	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ");n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append( ");n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
424	[BUG]  [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ");n ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkNotNull(sb);  sb.append( ", ").append(prev).append( ");n ");  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkNotNull(sb);    sb.append( ", ").append(prev).append( ");n ");	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	1	2	add
425	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  prev  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
426	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
427	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  sb  =  new  StringBuilder();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    sb  =  new  StringBuilder();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	3	2	add
428	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  sb  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Node  sb  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Node  sb  =  n.getFirstChild();  Preconditions.checkState(NodeUtil.isImmutableValue(elem));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
429	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Preconditions.checkState(NodeUtil.isLiteralValue(elem));  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem));  Preconditions.checkState(NodeUtil.isLiteralValue(elem));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem));    Preconditions.checkState(NodeUtil.isLiteralValue(elem));	  	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	3	None	add
430	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(sb!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(sb!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
431	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(sb!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(sb!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(sb!=  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
432	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue	  	non-compiled	[CE]  ')'  expected	19	None	add
433	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  if(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    if(NodeUtil.isLiteralValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null)  {  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(	  	non-compiled	[CE]  ')'  expected	19	None	add
434	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
435	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  null);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    null);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	19	2	add
436	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
437	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isAssignmentOp(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
438	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
439	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	28	2	add
440	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
441	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isImmutableValue(elem))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
442	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
443	[BUG]  [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected  function  name  Node(CALL):  testcode:1:29  x  =  ['a'    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,   "Unexpected  function  name   ");  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,   "Unexpected    function    name   ");    if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  Preconditions.checkState(false,   "Unexpected  function  name   ");  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Unexpected    function    name  Node(CALL):  testcode:1:29  x  =  ['a'  	28	2	add
444	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  sb);  [CE]  incomparable  types:  String  and  StringBuilder  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  sb);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  StringBuilder	21	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n,  sb);  [CE]  incomparable  types:  String  and  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n,  sb);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  n,  sb);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  Node	21	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  x);  [CE]  cannot  find  symbol  x  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  x);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  x);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  cannot  find  symbol  x	21	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  Token.VAR);  [CE]  incomparable  types:  String  and  int  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  Token.VAR);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(elem)||  NodeUtil.getArrayElementStringValue(elem)  ==  Token.VAR);	  Preconditions.checkState(NodeUtil.isImmutableValue(elem)||    NodeUtil.getArrayElementStringValue(elem)    ==    n);    	non-compiled	[CE]  incomparable  types:  String  and  int	21	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(sb));  [CE]  method  isImmutableValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(sb));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(sb));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	non-compiled	[CE]  method  isImmutableValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	12	None	replace
449	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(NodeUtil.isImmutableValue(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	12	2	replace
450	[BUG]  [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(prev));  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(NodeUtil.isImmutableValue(prev));  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(NodeUtil.isImmutableValue(prev));	  Preconditions.checkState(NodeUtil.isImmutableValue(prev));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	12	2	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(false,  sb.length()  <  originalSize);  [CE]  cannot  find  symbol  originalSize  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(false,  sb.length()  <  originalSize);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(false,  sb.length()  <  originalSize);	  Preconditions.checkState(false,   "Unknown    statement   ");    	non-compiled	[CE]  cannot  find  symbol  originalSize	27	None	replace
452	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkArgument(sb.length()    ==    0);    sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
453	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  ==  0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  ==  0);  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    sb  =  new  StringBuilder();  Preconditions.checkArgument(sb.length()  ==  0);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:29  x  =  ['a'  	7	2	add
454	[BUG]  [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkArgument(sb.length()  ==  0);  Node  sb  =  n.getFirstChild();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkArgument(sb.length()    ==    0);    Node  sb  =  n.getFirstChild();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
455	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
456	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  2;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
457	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
458	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  1;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
459	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
460	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
461	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
462	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  sb  =  new  StringBuilder();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  sb  =  new  StringBuilder();  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(NodeUtil.isImmutableValue(prev));    if(NodeUtil.isImmutableValue(prev))  {  Preconditions.checkState(NodeUtil.isImmutableValue(prev));  }  else  {  sb  =  new  StringBuilder();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	11	2	add
463	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  Preconditions.checkState(prev!=  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  Preconditions.checkState(prev!=  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
464	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  Preconditions.checkState(prev!=  null);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  Preconditions.checkState(prev!=  null);  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  Preconditions.checkState(prev!=  null);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
465	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
466	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  sb  =  new  StringBuilder();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  sb  =  new  StringBuilder();  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    sb  =  new  StringBuilder();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
467	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	add
468	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  1;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  1;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	9	2	add
469	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
470	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  2;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  2;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  foldedSize  +=  sb.length()  +  2;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	9	2	add
471	[BUG]  [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  FoldedSize  +=  sb.length()  +  1;  }  [CE]  cannot  find  symbol  FoldedSize  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    if  (NodeUtil.isImmutableValue(elem)  ||  elem.getType()  ==  Token.EMPTY)  {  if  (sb  ==  null)  {  sb  =  new  StringBuilder();  }  else  {  sb.append(joinString);  }  sb.append(NodeUtil.getArrayElementStringValue(elem));  }  else  {  if  (sb  !=  null)  {    [BUGGY]  Preconditions.checkState(prev!=  null);  if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  FoldedSize  +=  sb.length()  +  1;  }  [BUGGY]      foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  sb  =  null;  }  foldedSize  +=  InlineCostEstimator.getCost(elem);  arrayFoldedChildren.add(elem);  }  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	Preconditions.checkState(prev!=    null);    if(prev!=  null)  {  Preconditions.checkState(prev!=  null);  }  else  {  FoldedSize  +=  sb.length()  +  1;  }	  	non-compiled	[CE]  cannot  find  symbol  FoldedSize	9	None	add
