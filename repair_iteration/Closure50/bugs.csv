bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Node emptyStringNode = Node.newString(""); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: [BUGGY] Node emptyStringNode = Node.newString(""); [BUGGY] n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: [BUGGY] [BUGGY] Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	
3	[BUG] [BUGGY] n.getParent().replaceChild(n, emptyStringNode); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); [BUGGY] n.getParent().replaceChild(n, emptyStringNode); [BUGGY] reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {  [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); [BUGGY] [BUGGY] n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {  [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	
5	[BUG] [BUGGY] reportCodeChange(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); [BUGGY] reportCodeChange(); [BUGGY] return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {   [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); [BUGGY] [BUGGY] reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {   [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	
7	[BUG] [BUGGY] return emptyStringNode; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); [BUGGY] return emptyStringNode; [BUGGY] case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {   Node replacement = new Node(Token.ADD, [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); [BUGGY] [BUGGY] return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); if (foldedStringNode.getType() != Token.STRING) {   Node replacement = new Node(Token.ADD, [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	
9	[BUG] [BUGGY] Preconditions.checkNotNull(prev); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { [BUGGY] Preconditions.checkNotNull(prev); [BUGGY]  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { [BUGGY] [BUGGY] Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	408	408	2	add	
11	[BUG] [BUGGY] foldedSize += sb.length() + 2; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  [BUGGY] foldedSize += sb.length() + 2; [BUGGY] arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	410	410	2	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  [BUGGY] [BUGGY] foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	410	410	2	add	
13	[BUG] [BUGGY] arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; [BUGGY] arrayFoldedChildren.add(    Node.newString(sb.toString()).copyInformationFrom(prev)); [BUGGY] Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	411	412	2	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; [BUGGY] [BUGGY] arrayFoldedChildren.add(    Node.newString(sb.toString()).copyInformationFrom(prev)); Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	411	412	2	add	
15	[BUG] [BUGGY] sb = null; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); [BUGGY] sb = null; [BUGGY] } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	413	413	2	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); [BUGGY] [BUGGY] sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	413	413	2	add	
17	[BUG] [BUGGY] arrayNode.detachChildren(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT]  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } [BUGGY] arrayNode.detachChildren(); [BUGGY] for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	467	467	2	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT]  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } [BUGGY] [BUGGY] arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	467	467	2	add	
19	[BUG] [BUGGY] for (Node node : arrayFoldedChildren) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); [BUGGY] for (Node node : arrayFoldedChildren) { [BUGGY] arrayNode.addChildToBack(node); } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	468	468	2	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); [BUGGY] [BUGGY] for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	468	468	2	add	
21	[BUG] [BUGGY] arrayNode.addChildToBack(node); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { [BUGGY] arrayNode.addChildToBack(node); [BUGGY] } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	469	469	2	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { [BUGGY] [BUGGY] arrayNode.addChildToBack(node); } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	469	469	2	add	
23	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); [BUGGY] } [BUGGY] reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	470	470	2	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); [BUGGY] [BUGGY] } reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	470	470	2	add	
25	[BUG] [BUGGY] reportCodeChange(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } [BUGGY] reportCodeChange(); [BUGGY] break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	471	471	2	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } [BUGGY] [BUGGY] reportCodeChange(); break; } return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	471	471	2	add	
27	[BUG] [BUGGY] return n; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } [BUGGY] return n; [BUGGY] } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	475	475	2	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } [BUGGY] [BUGGY] return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.7071067811865475	475	475	2	add	
29	[BUG] [BUGGY] String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   [BUGGY] String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [BUGGY] List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	391	391	2	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   [BUGGY] [BUGGY] String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	391	391	2	add	
31	[BUG] [BUGGY] List<Node> arrayFoldedChildren = Lists.newLinkedList(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [BUGGY] List<Node> arrayFoldedChildren = Lists.newLinkedList(); [BUGGY] StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	392	392	2	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [BUGGY] [BUGGY] List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	392	392	2	add	
33	[BUG] [BUGGY] StringBuilder sb = null; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); [BUGGY] StringBuilder sb = null; [BUGGY] int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	393	393	2	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); [BUGGY] [BUGGY] StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	393	393	2	add	
35	[BUG] [BUGGY] int foldedSize = 0; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; [BUGGY] int foldedSize = 0; [BUGGY] Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	394	394	2	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; [BUGGY] [BUGGY] int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	394	394	2	add	
37	[BUG] [BUGGY] Node prev = null; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; [BUGGY] Node prev = null; [BUGGY] Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	395	395	2	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; [BUGGY] [BUGGY] Node prev = null; Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	395	395	2	add	
39	[BUG] [BUGGY] Node elem = arrayNode.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; [BUGGY] Node elem = arrayNode.getFirstChild(); [BUGGY]  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	396	396	2	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; [BUGGY] [BUGGY] Node elem = arrayNode.getFirstChild();  while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	396	396	2	add	
41	[BUG] [BUGGY] while (elem != null) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT]   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  [BUGGY] while (elem != null) { [BUGGY] if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	398	398	2	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT]   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; Node prev = null; Node elem = arrayNode.getFirstChild();  [BUGGY] [BUGGY] while (elem != null) { if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	398	398	2	add	
43	[BUG] [BUGGY] if (sb != null) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } prev = elem; elem = elem.getNext(); } [BUGGY] if (sb != null) { [BUGGY] Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	422	422	2	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } prev = elem; elem = elem.getNext(); } [BUGGY] [BUGGY] if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	422	422	2	add	
45	[BUG] [BUGGY] foldedSize += arrayFoldedChildren.size() - 1; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  [BUGGY] foldedSize += arrayFoldedChildren.size() - 1; [BUGGY]  int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	430	430	2	replace	
46	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  [BUGGY] [BUGGY] foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	430	430	2	add	
47	[BUG] [BUGGY] int originalSize = InlineCostEstimator.getCost(n); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; [BUGGY] int originalSize = InlineCostEstimator.getCost(n); [BUGGY] switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	432	432	2	replace	
48	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; [BUGGY] [BUGGY] int originalSize = InlineCostEstimator.getCost(n); switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	432	432	2	add	
49	[BUG] [BUGGY] switch (arrayFoldedChildren.size()) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); [BUGGY] switch (arrayFoldedChildren.size()) { [BUGGY] case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	433	433	2	replace	
50	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); }  foldedSize += arrayFoldedChildren.size() - 1; int originalSize = InlineCostEstimator.getCost(n); [BUGGY] [BUGGY] switch (arrayFoldedChildren.size()) { case 0: Node emptyStringNode = Node.newString(""); n.getParent().replaceChild(n, emptyStringNode); reportCodeChange(); return emptyStringNode; case 1: Node foldedStringNode = arrayFoldedChildren.remove(0); if (foldedSize > originalSize) { return n; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.6324555320336759	433	433	2	add	
51	[BUG] [BUGGY] if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node replacement = new Node(Token.ADD, Node.newString("").copyInformationFrom(n), foldedStringNode); foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  [BUGGY] if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { [BUGGY] return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	458	458	2	replace	
52	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node replacement = new Node(Token.ADD, Node.newString("").copyInformationFrom(n), foldedStringNode); foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  [BUGGY] [BUGGY] if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	458	458	2	add	
53	[BUG] [BUGGY] return n; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString("").copyInformationFrom(n), foldedStringNode); foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { [BUGGY] return n; [BUGGY] } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	459	459	2	replace	
54	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node.newString("").copyInformationFrom(n), foldedStringNode); foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { [BUGGY] [BUGGY] return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	459	459	2	add	
55	[BUG] [BUGGY] int kJoinOverhead = "[].join()".length(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } [BUGGY] int kJoinOverhead = "[].join()".length(); [BUGGY] foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	461	461	2	replace	
56	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] foldedStringNode = replacement; } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } [BUGGY] [BUGGY] int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	461	461	2	add	
57	[BUG] [BUGGY] foldedSize += kJoinOverhead; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); [BUGGY] foldedSize += kJoinOverhead; [BUGGY] foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	462	462	2	replace	
58	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); [BUGGY] [BUGGY] foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	462	462	2	add	
59	[BUG] [BUGGY] foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; [BUGGY] foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; [BUGGY] if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	463	463	2	replace	
60	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] n.getParent().replaceChild(n, foldedStringNode); reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; [BUGGY] [BUGGY] foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	463	463	2	add	
61	[BUG] [BUGGY] if (foldedSize > originalSize) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; [BUGGY] if (foldedSize > originalSize) { [BUGGY] return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; }  [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	464	464	2	replace	
62	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] reportCodeChange(); return foldedStringNode; default:  if (arrayFoldedChildren.size() == arrayNode.getChildCount()) { return n; } int kJoinOverhead = "[].join()".length(); foldedSize += kJoinOverhead; foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0; [BUGGY] [BUGGY] if (foldedSize > originalSize) { return n; } arrayNode.detachChildren(); for (Node node : arrayFoldedChildren) { arrayNode.addChildToBack(node); } reportCodeChange(); break; }  [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.5	464	464	2	add	
63	[BUG] [BUGGY] if (!NodeUtil.isImmutableValue(right)) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } Node right = callTarget.getNext(); if (right != null) { [BUGGY] if (!NodeUtil.isImmutableValue(right)) { [BUGGY] return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4472135954999579	376	376	2	replace	
64	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } Node right = callTarget.getNext(); if (right != null) { [BUGGY] [BUGGY] if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4472135954999579	376	376	2	add	
65	[BUG] [BUGGY] return subtree; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (!NodeUtil.isGet(callTarget)) { return subtree; } Node stringNode = callTarget.getFirstChild(); Node functionName = stringNode.getNext(); if ((stringNode.getType() != Token.STRING) || (functionName.getType() != Token.STRING)) { [BUGGY] return subtree; [BUGGY] } String functionNameString = functionName.getString(); Node firstArg = callTarget.getNext(); if (firstArg == null) { if (functionNameString.equals("toLowerCase")) { subtree = tryFoldStringToLowerCase(subtree, stringNode); } else if (functionNameString.equals("toUpperCase")) { subtree = tryFoldStringToUpperCase(subtree, stringNode); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownStringMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE String functionNameString boolean Node callTarget firstArg functionName stringNode subtree  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	90	90	2	replace	
66	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (!NodeUtil.isGet(callTarget)) { return subtree; } Node stringNode = callTarget.getFirstChild(); Node functionName = stringNode.getNext(); if ((stringNode.getType() != Token.STRING) || (functionName.getType() != Token.STRING)) { [BUGGY] [BUGGY] return subtree; } String functionNameString = functionName.getString(); Node firstArg = callTarget.getNext(); if (firstArg == null) { if (functionNameString.equals("toLowerCase")) { subtree = tryFoldStringToLowerCase(subtree, stringNode); } else if (functionNameString.equals("toUpperCase")) { subtree = tryFoldStringToUpperCase(subtree, stringNode); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownStringMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE String functionNameString boolean Node callTarget firstArg functionName stringNode subtree  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	90	90	2	add	
67	[BUG] [BUGGY] Node right = callTarget.getNext(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } [BUGGY] Node right = callTarget.getNext(); [BUGGY] if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	374	374	2	replace	
68	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } [BUGGY] [BUGGY] Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	374	374	2	add	
69	[BUG] [BUGGY] if (right != null) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } Node right = callTarget.getNext(); [BUGGY] if (right != null) { [BUGGY] if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	375	375	2	replace	
70	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldArrayJoin(Node n) { Node callTarget = n.getFirstChild(); if (callTarget == null || !NodeUtil.isGetProp(callTarget)) { return n; } Node right = callTarget.getNext(); [BUGGY] [BUGGY] if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	375	375	2	add	
71	[BUG] [BUGGY] Node arrayNode = callTarget.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } [BUGGY] Node arrayNode = callTarget.getFirstChild(); [BUGGY] Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	381	381	2	replace	
72	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return n; } Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } [BUGGY] [BUGGY] Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	381	381	2	add	
73	[BUG] [BUGGY] Node functionName = arrayNode.getNext(); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); [BUGGY] Node functionName = arrayNode.getNext(); [BUGGY]  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	382	382	2	replace	
74	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); [BUGGY] [BUGGY] Node functionName = arrayNode.getNext(); if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	382	382	2	add	
75	[BUG] [BUGGY] if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); [BUGGY] if ((arrayNode.getType() != Token.ARRAYLIT) ||  !functionName.getString().equals("join")) { [BUGGY] !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	384	385	2	replace	
76	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node right = callTarget.getNext(); if (right != null) { if (!NodeUtil.isImmutableValue(right)) { return n; } } Node arrayNode = callTarget.getFirstChild(); Node functionName = arrayNode.getNext(); [BUGGY] [BUGGY] if ((arrayNode.getType() != Token.ARRAYLIT) ||  !functionName.getString().equals("join")) { !functionName.getString().equals("join")) { return n; }   String joinString = (right == null) ? "," : NodeUtil.getStringValue(right); List<Node> arrayFoldedChildren = Lists.newLinkedList(); StringBuilder sb = null; int foldedSize = 0; [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	384	385	2	add	
77	[BUG] [BUGGY] sb.append(joinString); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb == null) { sb = new StringBuilder(); } else { [BUGGY] sb.append(joinString); [BUGGY] } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	403	403	2	replace	
78	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (sb == null) { sb = new StringBuilder(); } else { [BUGGY] [BUGGY] sb.append(joinString); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	403	403	2	add	
79	[BUG] [BUGGY] if (sb != null) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { [BUGGY] if (sb != null) { [BUGGY] Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	407	407	2	replace	
80	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) { if (sb == null) { sb = new StringBuilder(); } else { sb.append(joinString); } sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { [BUGGY] [BUGGY] if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	407	407	2	add	
81	[BUG] [BUGGY] foldedSize += InlineCostEstimator.getCost(elem); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } [BUGGY] foldedSize += InlineCostEstimator.getCost(elem); [BUGGY] arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	415	415	2	replace	
82	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] sb.append(NodeUtil.getArrayElementStringValue(elem)); } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } [BUGGY] [BUGGY] foldedSize += InlineCostEstimator.getCost(elem); arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	415	415	2	add	
83	[BUG] [BUGGY] arrayFoldedChildren.add(elem); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); [BUGGY] arrayFoldedChildren.add(elem); [BUGGY] } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	416	416	2	replace	
84	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] } else { if (sb != null) { Preconditions.checkNotNull(prev);  foldedSize += sb.length() + 2; arrayFoldedChildren.add( Node.newString(sb.toString()).copyInformationFrom(prev)); sb = null; } foldedSize += InlineCostEstimator.getCost(elem); [BUGGY] [BUGGY] arrayFoldedChildren.add(elem); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldArrayJoin [RETURN_TYPE] Node  Node n [VARIABLES] Locale ROOT_LOCALE boolean StringBuilder sb Node arrayNode callTarget elem emptyStringNode foldedStringNode functionName n node prev replacement right List arrayFoldedChildren String joinString int foldedSize kJoinOverhead originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.4082482904638631	416	416	2	add	
86	[BUG] [BUGGY] private static final Locale ROOT_LOCALE = new Locale(""); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] [BUGGY] private static final Locale ROOT_LOCALE = new Locale(""); [BUGGY]  [CLASS] PeepholeReplaceKnownMethods  [VARIABLES] 	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	34	34	2	replace	
87	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] [BUGGY] [BUGGY] private static final Locale ROOT_LOCALE = new Locale(""); [CLASS] PeepholeReplaceKnownMethods  [VARIABLES] 	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	34	34	2	add	
88	[BUG] [BUGGY] if (NodeUtil.isCall(subtree) ){ [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { [BUGGY] if (NodeUtil.isCall(subtree) ){ [BUGGY] return tryFoldKnownMethods(subtree); } return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	38	38	2	replace	
89	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { [BUGGY] [BUGGY] if (NodeUtil.isCall(subtree) ){ return tryFoldKnownMethods(subtree); } return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	38	38	2	add	
90	[BUG] [BUGGY] return tryFoldKnownMethods(subtree); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { if (NodeUtil.isCall(subtree) ){ [BUGGY] return tryFoldKnownMethods(subtree); [BUGGY] } return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	39	39	2	replace	
91	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { if (NodeUtil.isCall(subtree) ){ [BUGGY] [BUGGY] return tryFoldKnownMethods(subtree); } return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	39	39	2	add	
92	[BUG] [BUGGY] return subtree; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { if (NodeUtil.isCall(subtree) ){ return tryFoldKnownMethods(subtree); } [BUGGY] return subtree; [BUGGY] } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	41	41	2	replace	
93	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] Node optimizeSubtree(Node subtree) { if (NodeUtil.isCall(subtree) ){ return tryFoldKnownMethods(subtree); } [BUGGY] [BUGGY] return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	41	41	2	add	
94	[BUG] [BUGGY] subtree = tryFoldArrayJoin(subtree); [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldKnownMethods(Node subtree) {    [BUGGY] subtree = tryFoldArrayJoin(subtree); [BUGGY]  if (subtree.getType() == Token.CALL) { Node callTarget = subtree.getFirstChild(); if (callTarget == null) { return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	49	49	2	replace	
95	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldKnownMethods(Node subtree) {    [BUGGY] [BUGGY] subtree = tryFoldArrayJoin(subtree); if (subtree.getType() == Token.CALL) { Node callTarget = subtree.getFirstChild(); if (callTarget == null) { return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	49	49	2	add	
96	[BUG] [BUGGY] if (subtree.getType() == Token.CALL) { [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldKnownMethods(Node subtree) {    subtree = tryFoldArrayJoin(subtree); [BUGGY] if (subtree.getType() == Token.CALL) { [BUGGY] Node callTarget = subtree.getFirstChild(); if (callTarget == null) { return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { subtree = tryFoldKnownNumericMethods(subtree); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	51	51	2	replace	
97	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] private Node tryFoldKnownMethods(Node subtree) {    subtree = tryFoldArrayJoin(subtree); [BUGGY] [BUGGY] if (subtree.getType() == Token.CALL) { Node callTarget = subtree.getFirstChild(); if (callTarget == null) { return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { subtree = tryFoldKnownNumericMethods(subtree); } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	51	51	2	add	
98	[BUG] [BUGGY] return subtree; [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { subtree = tryFoldKnownNumericMethods(subtree); } } [BUGGY] return subtree; [BUGGY] } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	64	64	2	replace	
99	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: x=["a" [CONTEXT] return subtree; } if (NodeUtil.isGet(callTarget)) { subtree = tryFoldKnownStringMethods(subtree); } else { subtree = tryFoldKnownNumericMethods(subtree); } } [BUGGY] [BUGGY] return subtree; } [CLASS] PeepholeReplaceKnownMethods [METHOD] tryFoldKnownMethods [RETURN_TYPE] Node  Node subtree [VARIABLES] Locale ROOT_LOCALE Node callTarget subtree boolean  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.3922322702763681	64	64	2	add	
