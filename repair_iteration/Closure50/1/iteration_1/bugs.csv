bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "] ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
2	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "] ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "string ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
4	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ");  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
6	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ");  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "n ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "n ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
8	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "n ");  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "n ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "n ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "- ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
10	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ");  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
11	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
12	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Array ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
14	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ");  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Array ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  emptyStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	  	Node  emptyStringNode  =  Node.newString( " ");  	non-compiled	[CE]  cannot  find  symbol  emptyStringNode	1	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[ ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
17	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[ ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  AssertionFailedError  	1	3	replace
18	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
19	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
20	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
21	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "array ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
23	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ");  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array ");	Node  emptyStringNode  =  Node.newString( " ");  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	1	3	replace
