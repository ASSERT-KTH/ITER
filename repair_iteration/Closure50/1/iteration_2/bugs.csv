bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(0);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  arrayFoldedChildren.get(0);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	15	3	replace
2	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(0);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.get(0);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	15	3	replace
3	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(i);  [CE]  cannot  find  symbol  i  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(i);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.get(i);	      	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
4	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(prev);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.get(prev);	      	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	15	None	replace
5	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.remove(0);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  arrayFoldedChildren.remove(0);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	15	3	replace
6	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.remove(0);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.remove(0);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.remove(0);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	15	3	replace
7	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  n.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  n.getFirstChild();	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	replace
8	[BUG]  [BUGGY]  Node  emptyStringNode  =  n.getFirstChild();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  n.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  n.getFirstChild();	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	replace
9	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  12  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  arrayFoldedChildren.get(originalSize);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  12  	15	3	replace
10	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(originalSize);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  12  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.get(originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.get(originalSize);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  12  	15	3	replace
11	[BUG]  [BUGGY]  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  emptyStringNode  [FE]                                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  n.getParent().removeChild(prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	n.getParent().removeChild(prev);	      	non-compiled	[CE]  cannot  find  symbol  emptyStringNode	15	None	replace
12	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( "array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( "array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "array   ");    Node  emptyStringNode  =  Node.newString( "array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
13	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( ".array ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( ".array ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "array   ");    Node  emptyStringNode  =  Node.newString( ".array ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
14	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( "array "));  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( "array "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "array   ");    Node  emptyStringNode  =  Node.newString( "array "));	  	non-compiled	[CE]  	22	None	add
15	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( ",array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "array   ");  Node  emptyStringNode  =  Node.newString( ",array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "array   ");    Node  emptyStringNode  =  Node.newString( ",array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	22	None	add
16	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( "n   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( "n   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "n   ");    Node  emptyStringNode  =  Node.newString( "n   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
17	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( ".n   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( ".n   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "n   ");    Node  emptyStringNode  =  Node.newString( ".n   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
18	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( "n "));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( "n "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "n   ");    Node  emptyStringNode  =  Node.newString( "n "));	  	non-compiled	[CE]  	7	None	add
19	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( ",n   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString( ",n   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "n   ");    Node  emptyStringNode  =  Node.newString( ",n   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	add
20	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	18	None	add
21	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayElement   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayElement   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    Node  emptyStringNode  =  Node.newString( ".java.util.ArrayElement   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	18	None	add
22	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayElement   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayElement   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    Node  emptyStringNode  =  Node.newString( ",java.util.ArrayElement   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	18	None	add
23	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ",);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ",);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ",);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
24	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString( "java.util.ArrayList   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
25	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayList   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString( ".java.util.ArrayList   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
26	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayList   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString( ",java.util.ArrayList   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	5	None	add
27	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(... "java.util.ArrayList   ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(... "java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString(... "java.util.ArrayList   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
28	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(? "java.util.ArrayList   ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(? "java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString(? "java.util.ArrayList   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
29	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(. "java.util.ArrayList   ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(. "java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString(. "java.util.ArrayList   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
30	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(   "Array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(   "Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString(   "Array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
31	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ",Array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ",Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString( ",Array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
32	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ".Array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ".Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString( ".Array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
33	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(. "Array   ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(. "Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString(. "Array   ");	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
34	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(... "Array   ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(... "Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString(... "Array   ");	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
35	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(, "Array   ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString(, "Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString(, "Array   ");	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
37	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayElement ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "JoinArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
39	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayElement ");  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "JoinArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
40	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.STRING);  [CE]  no  suitable  method  found  for  newString(int)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.STRING);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.STRING);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	19	None	replace
41	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  newString(int)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.EXPR_RESULT);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.EXPR_RESULT);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	19	None	replace
42	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME);  [CE]  no  suitable  method  found  for  newString(int)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	19	None	replace
43	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.FUNCTION);  [CE]  no  suitable  method  found  for  newString(int)  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.FUNCTION);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.FUNCTION);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	19	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "- "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
45	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  originalSize);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "- "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  RuntimeException  	10	3	replace
47	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  sb.toString());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  RuntimeException  	10	3	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  n);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "- "  +  n);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
49	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  n);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  n);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  n);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
50	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  foldedSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  foldedSize);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	10	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays.asList( ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Arrays.asList( ");	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	compilable	  [FE]  AssertionFailedError  	21	3	replace
52	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays.asList( ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays.asList( ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Arrays.asList( ");	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	compilable	  [FE]  AssertionFailedError  	21	3	replace
53	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  originalSize  + "));  [CE]  unclosed  string  literal  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  originalSize  + "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  originalSize  + "));	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
54	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "));  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "));	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1));  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1));	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  	21	None	replace
56	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1);  [CE]  bad  operand  types  for  binary  operator  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()  -  1);	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	21	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[] ");	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  AssertionFailedError  	2	3	replace
58	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[] ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[] ");	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  AssertionFailedError  	2	3	replace
59	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ",  n);  [CE]  no  suitable  method  found  for  newString(String,Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ",  n);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "] ",  n);	  Node    emptyStringNode    =    Node.newString(   "]   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(String,Node)	2	None	replace
60	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ").toString();  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "] ").toString();  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "] ").toString();	  Node    emptyStringNode    =    Node.newString(   "]   ");    	non-compiled	[CE]  incompatible  types	2	None	replace
61	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME,  originalSize);  [CE]  no  suitable  method  found  for  newString(int,int)  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME,  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME,  originalSize);	  Node    emptyStringNode    =    Node.newString(   "]   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,int)	2	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[0] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[0] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
63	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[0] ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[0] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[0] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[Locale.US] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[Locale.US] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
65	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[Locale.US] ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[Locale.US] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[Locale.US] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[A-Z] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[A-Z] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
67	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[A-Z] ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[A-Z] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[A-Z] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[AssertionFailedError] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[AssertionFailedError] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
69	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[AssertionFailedError] ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[AssertionFailedError] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[AssertionFailedError] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "arrayJoin ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "arrayJoin ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
71	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "arrayJoin ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "arrayJoin ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "arrayJoin ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_name ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "array_name ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
73	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_name ");  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_name ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array_name ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-name ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "array-name ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
75	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-name ");  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-name ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array-name ");	  Node    emptyStringNode    =    Node.newString(   "array   ");    	compilable	  [FE]  AssertionFailedError  	23	3	replace
76	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	20	None	add
77	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString(java.util.Arrays.asList(   ");  [CE]  unclosed  string  literal  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString(java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString(java.util.Arrays.asList(   ");	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
78	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ".java.util.Arrays.asList(   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ".java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( ".java.util.Arrays.asList(   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	20	None	add
79	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ",java.util.Arrays.asList(   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ",java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( ",java.util.Arrays.asList(   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	20	None	add
80	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ",);  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ",);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ",);	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayJoin ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "ArrayJoin ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
82	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayJoin ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayJoin ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "ArrayJoin ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
83	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME,  foldedSize);  [CE]  no  suitable  method  found  for  newString(int,int)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME,  foldedSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME,  foldedSize);	  Node    emptyStringNode    =    Node.newString(   "n   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,int)	8	None	replace
84	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.STRING,  foldedSize);  [CE]  no  suitable  method  found  for  newString(int,int)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.STRING,  foldedSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.STRING,  foldedSize);	  Node    emptyStringNode    =    Node.newString(   "n   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,int)	8	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "node ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "node ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
86	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "node ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "node ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "node ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
87	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( "string   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( "string   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "string   ");    Node  emptyStringNode  =  Node.newString( "string   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
88	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( ".string   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( ".string   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "string   ");    Node  emptyStringNode  =  Node.newString( ".string   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
89	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( ",string   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( ",string   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "string   ");    Node  emptyStringNode  =  Node.newString( ",string   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
90	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( "string "));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString( "string "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "string   ");    Node  emptyStringNode  =  Node.newString( "string "));	  	non-compiled	[CE]  	3	None	add
91	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "] ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "]   ");    Node  emptyStringNode  =  Node.newString(   "] ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	1	None	add
92	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString( ".] ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString( ".] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "]   ");    Node  emptyStringNode  =  Node.newString( ".] ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	1	None	add
93	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "]. ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "]. ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "]   ");    Node  emptyStringNode  =  Node.newString(   "]. ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	1	None	add
94	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "]   "));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(   "]   "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "]   ");    Node  emptyStringNode  =  Node.newString(   "]   "));	  	non-compiled	[CE]  	1	None	add
95	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( "[   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( "[   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString( "[   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	16	None	add
96	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ".[   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ".[   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString( ".[   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	16	None	add
97	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ",[   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ",[   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString( ",[   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	16	None	add
98	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString(. "[   ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString(. "[   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString(. "[   ");	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
99	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( "[   "));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( "[   "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString( "[   "));	  	non-compiled	[CE]  	16	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  AssertionFailedError  	12	3	replace
101	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayBuilder ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  AssertionFailedError  	12	3	replace
102	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "JoinArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
103	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayBuilder ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "JoinArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
104	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Join.ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Join.ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
105	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Join.ArrayBuilder ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Join.ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Join.ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
106	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "string "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "string   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	3	replace
107	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  originalSize);  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "string   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	3	replace
108	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "string "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "string   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
109	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  sb.toString());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "string   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
110	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  foldedSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  foldedSize);	  Node    emptyStringNode    =    Node.newString(   "string   ");    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
111	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( "-   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( "-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString( "-   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
112	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ".-   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ".-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString( ".-   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
113	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString(. "-   ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString(. "-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString(. "-   ");	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
114	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ",-   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ",-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString( ",-   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
115	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString(? "-   ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString(? "-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString(? "-   ");	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
116	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString('-');  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString('-');  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString('-');	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Array "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  AssertionFailedError  	14	3	replace
118	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array "  +  originalSize);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array "  +  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Array "  +  originalSize);	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  AssertionFailedError  	14	3	replace
119	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "Array ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString(Token.NAME, "Array ");	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	3	replace
120	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "Array ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "Array ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME, "Array ");	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	14	3	replace
121	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
122	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayBuilder   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( ".java.util.ArrayBuilder   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    Node  emptyStringNode  =  Node.newString( ".java.util.ArrayBuilder   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
123	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayBuilder   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( ",java.util.ArrayBuilder   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    Node  emptyStringNode  =  Node.newString( ",java.util.ArrayBuilder   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
124	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ",);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ",);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ",);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayList ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "ArrayList ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	6	3	replace
126	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayList ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "ArrayList ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "ArrayList ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  AssertionFailedError  	6	3	replace
127	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  originalSize);  [CE]  no  suitable  method  found  for  newString(String,int)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  originalSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  originalSize);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(String,int)	6	None	replace
128	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  foldedSize);  [CE]  no  suitable  method  found  for  newString(String,int)  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  foldedSize);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList ",  foldedSize);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(String,int)	6	None	replace
129	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayListn ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayListn ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
130	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayListn ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayListn ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayListn ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
131	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString('-   ");  [CE]  unclosed  character  literal  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString('-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString('-   ");	  	non-compiled	[CE]  unclosed  character  literal	9	None	add
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[n ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[n ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
133	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[n ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[n ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[n ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
134	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString(. "n   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "n   ");  Node  emptyStringNode  =  Node.newString(. "n   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "n   ");    Node  emptyStringNode  =  Node.newString(. "n   ");	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
136	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayElement ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
137	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.EMPTY);  [CE]  no  suitable  method  found  for  newString(int)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.EMPTY);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.EMPTY);	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	19	None	replace
138	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayBuilder   ");  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayBuilder   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayBuilder   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    Node  emptyStringNode  =  Node.newString(java.util.ArrayBuilder   ");	  	non-compiled	[CE]  unclosed  string  literal	11	None	add
139	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ")[   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString( ")[   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString( ")[   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	16	None	add
140	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString('[');  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "[   ");  Node  emptyStringNode  =  Node.newString('[');  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "[   ");    Node  emptyStringNode  =  Node.newString('[');	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	16	None	add
141	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  prev);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  prev);	  Node    emptyStringNode    =    Node.newString(   "string   ");    	non-compiled	[CE]  incompatible  types	4	None	replace
142	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  arrayFoldedChildren);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  arrayFoldedChildren);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  arrayFoldedChildren);	  Node    emptyStringNode    =    Node.newString(   "string   ");    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
143	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString(. "string   ");  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "string   ");  Node  emptyStringNode  =  Node.newString(. "string   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "string   ");    Node  emptyStringNode  =  Node.newString(. "string   ");	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
144	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ")Array   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "Array   ");  Node  emptyStringNode  =  Node.newString( ")Array   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "Array   ");    Node  emptyStringNode  =  Node.newString( ")Array   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinOverhead ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "JoinOverhead ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
146	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinOverhead ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "JoinOverhead ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "JoinOverhead ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
147	[BUG]  [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  arrayFoldedChildren.getFirstChild();  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  arrayFoldedChildren.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
148	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  cannot  find  symbol  emptyStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	      	non-compiled	[CE]  cannot  find  symbol  emptyStringNode	15	None	replace
149	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(  ']');  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "]   ");  Node  emptyStringNode  =  Node.newString(  ']');  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "]   ");    Node  emptyStringNode  =  Node.newString(  ']');	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	1	None	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(n ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(n ");	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	compilable	  [FE]  AssertionFailedError  	21	3	replace
151	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(n ");  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(n ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(n ");	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	compilable	  [FE]  AssertionFailedError  	21	3	replace
152	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "),  arrayFoldedChildren);  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "),  arrayFoldedChildren);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "),  arrayFoldedChildren);	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  	21	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "] "  +  Token.NAME);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "] "  +  Token.NAME);	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  AssertionFailedError  	2	3	replace
154	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "] "  +  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "] "  +  Token.NAME);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "] "  +  Token.NAME);	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  AssertionFailedError  	2	3	replace
155	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.BLOCK);  [CE]  no  suitable  method  found  for  newString(int)  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.BLOCK);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.BLOCK);	  Node    emptyStringNode    =    Node.newString(   "]   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	2	None	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString(Token.NAME, "] ");	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	2	3	replace
157	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "] ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME, "] ");	  Node    emptyStringNode    =    Node.newString(   "]   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	2	3	replace
158	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList: ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList: ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
159	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList: ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayList: ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayList: ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
160	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayElement   ");  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayElement   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayElement   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    Node  emptyStringNode  =  Node.newString(java.util.ArrayElement   ");	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
161	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  kJoinOverhead);  [CE]  cannot  find  symbol  kJoinOverhead  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  kJoinOverhead);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  kJoinOverhead);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	10	None	replace
162	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  name);  [CE]  cannot  find  symbol  name  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  name);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  name);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  name	10	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  Token.NAME);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "- "  +  Token.NAME);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
164	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  Token.NAME);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- "  +  Token.NAME);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- "  +  Token.NAME);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	compilable	  [FE]  AssertionFailedError  	10	3	replace
165	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ").copyInformationFrom(prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Array ").copyInformationFrom(prev);	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
166	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ").copyInformationFrom(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Array ").copyInformationFrom(prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Array ").copyInformationFrom(prev);	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
167	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
168	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayBuilder ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(Token.NAME, "ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilders ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilders ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  AssertionFailedError  	12	3	replace
170	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilders ");  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilders ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilders ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  AssertionFailedError  	12	3	replace
171	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString(... "java.util.Arrays.asList(   ");  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString(... "java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString(... "java.util.Arrays.asList(   ");	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
172	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   "));  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   "));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(   "));	  	non-compiled	[CE]  	20	None	add
173	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ")java.util.Arrays.asList(   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.Arrays.asList(   ");  Node  emptyStringNode  =  Node.newString( ")java.util.Arrays.asList(   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    Node  emptyStringNode  =  Node.newString( ")java.util.Arrays.asList(   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	20	None	add
174	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayList   ");  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "java.util.ArrayList   ");  Node  emptyStringNode  =  Node.newString(java.util.ArrayList   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    Node  emptyStringNode  =  Node.newString(java.util.ArrayList   ");	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[node] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[node] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
176	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[node] ");  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[node] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[node] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[a-z] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[a-z] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
178	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[a-z] ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[a-z] ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[a-z] ");	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  AssertionFailedError  	17	3	replace
179	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "[ "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	17	3	replace
180	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ "  +  sb.toString());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "[ "  +  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "[ "  +  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "[   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	17	3	replace
181	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()));  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( "  +  arrayFoldedChildren.size()));	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  	21	None	replace
182	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(prev));  [CE]  unclosed  string  literal  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(prev));  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList(prev));	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
183	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ").join( "  [CE]  unclosed  string  literal  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ").join( "  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.Arrays.asList( ").join( "	  Node    emptyStringNode    =    Node.newString(   "java.util.Arrays.asList(   ");    	non-compiled	[CE]  unclosed  string  literal	21	None	replace
184	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(0);  [CE]  no  suitable  method  found  for  newString(int)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(0);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(0);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	10	None	replace
185	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  prev);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  prev);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "- ").replaceChild(n,  prev);	  Node    emptyStringNode    =    Node.newString(   "-   ");    	non-compiled	[CE]  incompatible  types	10	None	replace
186	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  n.removeChild(arrayFoldedChildren);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	n.removeChild(arrayFoldedChildren);	      	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
187	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ",  sb.toString());  [CE]  no  suitable  method  found  for  newString(String,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ",  sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array ",  sb.toString());	  Node    emptyStringNode    =    Node.newString(   "array   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(String,String)	23	None	replace
188	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ",  n);  [CE]  no  suitable  method  found  for  newString(String,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array ",  n);  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array ",  n);	  Node    emptyStringNode    =    Node.newString(   "array   ");    	non-compiled	[CE]  no  suitable  method  found  for  newString(String,Node)	23	None	replace
189	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString(sb.toString());	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
190	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(sb.toString());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(sb.toString());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString(sb.toString());	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "Arrays ");	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  AssertionFailedError  	14	3	replace
192	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "Arrays ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "Arrays ");	  Node    emptyStringNode    =    Node.newString(   "Array   ");    	compilable	  [FE]  AssertionFailedError  	14	3	replace
193	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ").join( "  Expected:  x=[ "  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ").join( "  Expected:  x=[ "  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayElement ").join( "  Expected:  x=[ "	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	non-compiled	[CE]  	19	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "org.join.ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
195	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayElement ");  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayElement ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "org.join.ArrayElement ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayElement   ");    	compilable	  [FE]  AssertionFailedError  	19	3	replace
196	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  new  StringBuilder());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  new  StringBuilder());  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "string ").replaceChild(n,  new  StringBuilder());	  Node    emptyStringNode    =    Node.newString(   "string   ");    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
197	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ")-   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString(   "-   ");  Node  emptyStringNode  =  Node.newString( ")-   ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node    emptyStringNode    =    Node.newString(   "-   ");    Node  emptyStringNode  =  Node.newString( ")-   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
198	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "label ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "label ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	8	3	replace
199	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "label ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "label ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "label ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	8	3	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "node() ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "node() ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
201	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "node() ");  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "node() ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "node() ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_foo ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "array_foo ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
203	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_foo ");  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array_foo ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array_foo ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-foo. ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "array-foo. ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
205	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-foo. ");  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "array-foo. ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "array-foo. ");	  Node    emptyStringNode    =    Node.newString(   "n   ");    	compilable	  [FE]  AssertionFailedError  	8	3	replace
206	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ").join( "  [CE]  unclosed  string  literal  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ").join( "  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "java.util.ArrayBuilder ").join( "	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
207	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "org.join.ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
208	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayBuilder ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[].join(   "    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayBuilder ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "org.join.ArrayBuilder ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayBuilder   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	12	3	replace
209	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayList ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	add	Node  emptyStringNode  =  Node.newString( "org.join.ArrayList ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
210	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayList ");  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    AssertionFailedError    [CONTEXT]    foldedSize  +=  sb.length()  +  2;  arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:    [BUGGY]  Node  emptyStringNode  =  Node.newString( "org.join.ArrayList ");  [BUGGY]    n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	435	435	2	replace	Node  emptyStringNode  =  Node.newString( "org.join.ArrayList ");	  Node    emptyStringNode    =    Node.newString(   "java.util.ArrayList   ");    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	6	3	replace
