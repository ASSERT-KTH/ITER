bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
2	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
3	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  this);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	14	None	replace
4	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(callTarget,  n,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  n,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
5	[BUG]  [BUGGY]  n.getParent().replaceChild(fillingStringNode,  this);  [CE]  cannot  find  symbol  fillingStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(fillingStringNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(fillingStringNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	14	None	replace
6	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  arrayFoldedNode);	  n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	10	None	replace
8	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
9	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
10	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  originalSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	5	None	replace
11	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
12	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n,  originalSize);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  n,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
13	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  originalSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	5	None	replace
14	[BUG]  [BUGGY]  n.getParent().replaceChild(fillingStringNode,  n,  originalSize);  [CE]  cannot  find  symbol  fillingStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(fillingStringNode,  n,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(fillingStringNode,  n,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	5	None	replace
15	[BUG]  [BUGGY]  n.getName().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getName().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  n.getPrev().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getPrev().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(arrayStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayStringNode);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	7	None	replace
18	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  prev);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  prev);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
19	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(emptyStringNode);	  n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
20	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);	  n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
21	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	16	None	replace
22	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	16	None	replace
23	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
24	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(callTarget,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	16	3	replace
25	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	16	3	replace
26	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    parent);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	11	None	replace
27	[BUG]  [BUGGY]  parent.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  parent.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
28	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  Node  parent.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    parent);    	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n);	  n.getParent().replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
30	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
31	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
32	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
33	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
34	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	13	None	replace
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  RuntimeException  	12	3	add
36	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  RuntimeException  	12	3	add
37	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    Node  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  ';'  expected	12	None	add
38	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
39	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
40	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
41	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
42	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    Node  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  ';'  expected	12	None	add
43	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	12	None	add
44	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  node.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  node.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  node	12	None	add
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();	  	compilable	  [FE]  RuntimeException  	12	3	add
46	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [FE]  RuntimeException  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();	  	compilable	  [FE]  RuntimeException  	12	3	add
47	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
48	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	2	None	replace
49	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
50	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  n);	  n.getParent().replaceChild(n,    foldedSize);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
51	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  n);	  n.getParent().replaceChild(n,    foldedSize);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
52	[BUG]  [BUGGY]  n.getParent().replaceChild(filledStringNode,  n);  [CE]  cannot  find  symbol  filledStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(filledStringNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(filledStringNode,  n);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	2	None	replace
53	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  n,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	2	None	replace
54	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
55	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	4	None	replace
56	[BUG]  [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
57	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
58	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);	      	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
59	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(0);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(0);	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	replace
60	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	replace
61	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(arrayFoldedChildren.size());  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size());	      	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
62	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(arrayFoldedNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedNode);	      	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	9	None	replace
63	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
64	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
65	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  ';'  expected	6	None	add
66	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
67	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
68	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
69	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
70	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node  n.getParent().removeChild(prev);	  	non-compiled	[CE]  ';'  expected	6	None	add
71	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
72	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	6	None	add
73	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
74	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  n.getParent().replaceChild(n,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	replace
75	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  n.getParent().replaceChild(n,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	1	3	replace
76	[BUG]  [BUGGY]  n.getParent().replaceChild(paddingStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  paddingStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(paddingStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(paddingStringNode,  emptyStringNode);	  n.getParent().replaceChild(n,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  paddingStringNode	1	None	replace
77	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(oldStringNode,  foldedStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  foldedStringNode);	  n.getParent().replaceChild(n,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	1	None	replace
78	[BUG]  [BUGGY]      sb.toString().copyInformationFrom(prev);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]      sb.toString().copyInformationFrom(prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	        sb.toString().copyInformationFrom(prev);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
79	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
80	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
81	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    Node  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	3	None	add
82	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	add
83	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    Node  n.getNext().removeChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	3	None	add
84	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
85	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  node.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  node.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
86	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  	non-compiled	[CE]  unreachable  statement	3	None	add
87	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	add
88	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	add
89	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	15	None	add
90	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	add
91	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	15	None	add
92	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	15	None	add
93	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getParent();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
94	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  ';'  expected	15	None	add
95	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
96	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(prev,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	17	3	replace
97	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	17	3	replace
98	[BUG]  [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(sb,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
99	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  leftStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  leftStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  leftStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	17	None	replace
100	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	16	3	replace
101	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	16	3	replace
102	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  oldStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  oldStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	16	None	replace
103	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n,  this);  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(parent,  n,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	14	None	replace
104	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
105	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	15	None	add
106	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	15	None	add
107	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	add
108	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	add
109	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	15	None	add
110	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  unreachable  statement  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;	  	non-compiled	[CE]  unreachable  statement	15	None	add
111	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  void  cannot  be  dereferenced  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  	non-compiled	[CE]  void  cannot  be  dereferenced	15	None	add
112	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
113	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
114	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
115	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
116	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	add
117	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
118	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
119	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
120	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	6	None	add
121	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
122	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	6	3	add
123	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  node	6	None	add
124	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
125	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  foldedStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	17	None	replace
126	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	17	None	replace
127	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	      	non-compiled	[CE]  ')'  expected	9	None	replace
128	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(	      	non-compiled	[CE]  ')'  expected	9	None	replace
129	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	      	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	replace
130	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(	      	non-compiled	[CE]  ')'  expected	9	None	replace
131	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(n);  }  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(n);  }  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(n);  }	      	non-compiled	[CE]  orphaned  case	9	None	replace
132	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }	      	non-compiled	[CE]  orphaned  case	9	None	replace
133	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getGrandparent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
134	[BUG]  [BUGGY]  n.getName().replaceChild(n,  prev);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getName().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
135	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
136	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
137	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  foldedStringNode);	  n.getParent().replaceChild(n,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	1	None	replace
138	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedChildren);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayFoldedChildren);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  RuntimeException  	12	3	add
140	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  RuntimeException  	12	3	add
141	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  node.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  node.getParent().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  node	12	None	add
142	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  foldedSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(oldStringNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	2	None	replace
143	[BUG]  [BUGGY]      if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]      if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	        if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  	non-compiled	[CE]  ')'  expected	8	None	add
144	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(oldStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  emptyStringNode);	  n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	10	None	replace
145	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(emptyStringNode,  oldStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  oldStringNode);	  n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	10	None	replace
146	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	4	None	replace
147	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	4	None	replace
148	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,  prev);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
149	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  prev);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
150	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeChild(arrayFoldedChildren);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren);	      	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
151	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
152	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
153	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
154	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	replace
155	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  this);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  this);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  this);	  n.getParent().replaceChild(n,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	14	None	replace
156	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.removeParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
157	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
158	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
159	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	15	None	add
160	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
161	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  void  cannot  be  dereferenced  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  void  cannot  be  dereferenced	15	None	add
162	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;	  	non-compiled	[CE]  unreachable  statement	15	None	add
163	[BUG]  [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size();  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	        int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size();	  	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	add
164	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node.getParent().replaceChild(n,  arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	12	None	add
165	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
166	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	add
167	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(parent,  arrayNode);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(parent,  arrayNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	12	None	add
168	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayStringNode,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  prev);	  n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	7	None	replace
169	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  originalSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n,  originalSize);	  n.getParent().replaceChild(n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
170	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	6	None	add
171	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  prev);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    Node  n  =  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
172	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PRIVATE  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  	non-compiled	[CE]  cannot  find  symbol  PRIVATE	6	None	add
173	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  	non-compiled	[CE]  cannot  find  symbol  Predicates	6	None	add
174	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  nextNode);  [CE]  cannot  find  symbol  nextNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  nextNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  nextNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  nextNode	16	None	replace
175	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  parent);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
176	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedSize);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  foldedSize);	  n.getParent().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	2	None	replace
177	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
178	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	3	None	add
179	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
180	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");    [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]    reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,    emptyStringNode);    int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	3	None	add
