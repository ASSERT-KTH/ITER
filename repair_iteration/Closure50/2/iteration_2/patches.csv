bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
2	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
3	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
4	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
5	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
6	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
7	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	63	None	add
8	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
9	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  right);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  right);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
10	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	63	None	add
11	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
12	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
13	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	63	None	add
14	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
15	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
16	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
17	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
18	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  arrayNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	165	None	add
19	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	165	None	add
20	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
21	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
22	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
23	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
24	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
25	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
26	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	165	None	add
27	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	85	None	replace
28	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	85	None	replace
29	[BUG]  [BUGGY]  Node  node  =  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	85	None	replace
30	[BUG]  [BUGGY]  Node  node.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	85	None	replace
31	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	151	3	add
32	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	151	3	add
33	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
34	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().removeChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().removeChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	151	None	add
35	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
36	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
37	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  arrayFoldedChildren  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  arrayFoldedChildren  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  arrayFoldedChildren  =  Node.newString( "   ");  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
38	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
39	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
40	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
41	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
42	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  ';'  expected	139	None	add
43	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
44	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
45	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
46	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
47	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
48	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
49	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  Node  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  Node  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    Node  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  ';'  expected	139	None	add
50	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	139	None	add
51	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
52	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
53	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
54	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
55	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
56	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
57	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	113	None	add
58	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  null);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
59	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  null);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
60	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	113	None	add
61	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  foldedStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  foldedStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  foldedStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	113	None	add
62	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	113	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
64	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
65	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
66	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
67	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	121	None	add
68	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
69	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
70	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
71	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
72	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	121	None	add
73	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
74	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
75	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
76	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
77	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)	45	None	add
78	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
79	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
80	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)	45	None	add
81	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n  =  parent.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	45	None	add
82	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  n.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	45	None	add
83	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
84	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  parent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
85	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);  parent  =  n.getParent();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
86	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  parent  =  n.getParent();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);  parent  =  n.getParent();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	45	3	add
87	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]                  RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	45	None	add
88	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(arrayNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
89	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize,  originalSize);	  n.getParent().replaceChild(arrayNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
90	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  originalSize,  foldedSize);	  n.getParent().replaceChild(arrayNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
91	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	108	None	replace
92	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	108	None	replace
93	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldingStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldingStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldingStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldingStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldingStringNode	108	None	replace
94	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(arrayNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
95	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
96	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  ';'  expected	32	None	add
97	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
98	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
99	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
100	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
101	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
102	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
103	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
104	[BUG]  [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	150	None	replace
105	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	150	None	replace
106	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren,  foldedSize);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	150	None	replace
107	[BUG]  [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  oldStringNode  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(oldStringNode,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	150	None	replace
108	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(oldStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	17	None	replace
109	[BUG]  [BUGGY]  n.removeChild(inemptyStringNode);  [CE]  cannot  find  symbol  inemptyStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(inemptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(inemptyStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  inemptyStringNode	17	None	replace
110	[BUG]  [BUGGY]  n.removeChild(fillingStringNode);  [CE]  cannot  find  symbol  fillingStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(fillingStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(fillingStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	17	None	replace
111	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(new  StringBuilder(sb.toString()));	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	17	None	replace
112	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	67	None	replace
113	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	67	3	replace
114	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  right);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	67	3	replace
115	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	67	None	replace
116	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  left  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  left);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  left	67	None	replace
117	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(emptyStringNode);    n.removeChild(emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	19	3	add
118	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  n.removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    n.removeChild(emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	19	3	add
119	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  n.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
120	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
121	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
122	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  node.getFirstChild();  n.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  node.getFirstChild();  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  node.getFirstChild();  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
123	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
124	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
125	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  node.removeChild(emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  node.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    node.removeChild(emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	19	None	add
126	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	84	None	replace
127	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
128	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	84	None	replace
129	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( ", ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  Node.newString( ", ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  Node.newString( ", ");  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	84	None	replace
130	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( ". ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  Node.newString( ". ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  Node.newString( ". ");  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	84	None	replace
131	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
132	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
133	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
134	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
135	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
136	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getNext();  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
137	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getFirstChild();  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getFirstChild();  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  emptyStringNode.getFirstChild();  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
138	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
139	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getNext();  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getNext();  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  emptyStringNode.getNext();  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
140	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getFirstChild();  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
141	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
142	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	90	None	replace
143	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
144	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  reverse);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  reverse  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  reverse);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  reverse);  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  reverse	90	None	replace
145	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  leftStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	90	None	replace
146	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().replaceChild(arrayNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
147	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().replaceChild(arrayNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
148	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
149	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
150	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().removeChild(arrayNode,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().removeChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().removeChild(arrayNode,  prev);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	add
151	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  emptyStringNode.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
152	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
153	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.cloneTree();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  emptyStringNode.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  emptyStringNode.cloneTree();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
154	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
155	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
156	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  arrayFoldedChildren);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    arrayFoldedNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	7	None	replace
157	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
158	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
159	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
160	[BUG]  [BUGGY]  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
161	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
162	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	166	3	replace
164	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  RuntimeException  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	166	3	replace
165	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
166	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
167	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
168	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
169	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
170	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
171	[BUG]  [BUGGY]  Node  n  =  n.getNext().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
172	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	177	None	replace
173	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	177	None	replace
174	[BUG]  [BUGGY]  n.removeChild(emptyStringNode.size());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode.size());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode.size());	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
175	[BUG]  [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode,  arrayFoldedChildren.size());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode,  arrayFoldedChildren.size());	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
176	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size(),  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
177	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -1,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -1,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -1,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
178	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  +  1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  +  1);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
179	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode.getFirstChild());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(emptyStringNode.getFirstChild());	  n.removeChild(arrayFoldedChildren.size());    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	61	3	replace
180	[BUG]  [BUGGY]  n.removeChild(emptyStringNode.getFirstChild());  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode.getFirstChild());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode.getFirstChild());	  n.removeChild(arrayFoldedChildren.size());    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	61	3	replace
181	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  emptyStringNode,  this);	  n.getParent().replaceChild(emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
182	[BUG]  [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(sb,  emptyStringNode,  this);	  n.getParent().replaceChild(emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
183	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  this,  foldedSize);	  n.getParent().replaceChild(emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
184	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  this);	  n.getParent().replaceChild(emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
185	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode).size();  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode).size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode).size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	163	None	replace
186	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  -  1;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  -  1;	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  int  cannot  be  dereferenced	163	None	replace
187	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  emptyStringNode.size();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  emptyStringNode.size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  emptyStringNode.size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  ';'  expected	163	None	replace
188	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode).size();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode).size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode).size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  int  cannot  be  dereferenced	163	None	replace
189	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  +  1;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n).size()  +  1;	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  int  cannot  be  dereferenced	163	None	replace
190	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize).size();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize).size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize).size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  int  cannot  be  dereferenced	163	None	replace
191	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	141	None	replace
192	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  arrayNode);  [CE]  incompatible  types  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  incompatible  types	141	None	replace
193	[BUG]  [BUGGY]  Node  node.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	141	None	replace
194	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	141	None	replace
195	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  n.getParent();  parent.replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	141	3	replace
196	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent();  parent.replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	141	3	replace
197	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  foldedSize,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  foldedSize,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  foldedSize,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	178	None	replace
198	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode,  foldedSize);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  emptyStringNode,  foldedSize);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	178	None	replace
199	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	178	None	replace
200	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode,  sb);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode,  sb);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  emptyStringNode,  sb);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	178	None	replace
201	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  foldedStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	178	None	replace
202	[BUG]  [BUGGY]  n.getParent().replaceChild(possibleStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  possibleStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(possibleStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(possibleStringNode,  emptyStringNode);	  n.getParent().replaceChild(parent,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  possibleStringNode	23	None	replace
203	[BUG]  [BUGGY]  n.getParent().replaceChild(paramNode,  emptyStringNode);  [CE]  cannot  find  symbol  paramNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(paramNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(paramNode,  emptyStringNode);	  n.getParent().replaceChild(parent,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  paramNode	23	None	replace
204	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(callTarget,  n);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	25	3	replace
205	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  n);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	25	3	replace
206	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  node);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  node);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
207	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(callTarget,  emptyStringNode);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	25	3	replace
208	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(callTarget,  emptyStringNode);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	25	3	replace
209	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	25	None	replace
210	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  foldedStringNode);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  foldedStringNode);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
211	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  foldedSize);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  foldedSize);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
212	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  sb);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  sb);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  sb);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
213	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  oldStringNode);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  oldStringNode);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
214	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  originalSize);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  originalSize);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
215	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
216	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
217	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
218	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  arrayFoldedChildren);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    arrayFoldedChildren);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
219	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  n);	  n.getParent().replaceChild(n,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	138	None	replace
220	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	138	None	replace
221	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  n,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  n,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  n,  emptyStringNode,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
222	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  n,  emptyStringNode);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
223	[BUG]  [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(callTarget,  n,  this);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(callTarget,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  callTarget  =  n.getParent().replaceChild(callTarget,  n,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	4	None	replace
224	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  fillingStringNode,  this);  [CE]  cannot  find  symbol  fillingStringNode  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  fillingStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  fillingStringNode,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	4	None	replace
225	[BUG]  [BUGGY]  n.getNext().replaceChild(callTarget,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(callTarget,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(callTarget,  emptyStringNode,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
226	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  callTarget,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  callTarget,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  callTarget,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
227	[BUG]  [BUGGY]  Node  n.getNext().removeChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
228	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().removeChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
229	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
230	[BUG]  [BUGGY]  Node  n.getNext().removeChild(n,  foldedStringNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().removeChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().removeChild(n,  foldedStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
231	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
232	[BUG]  [BUGGY]  Node  n.getNext().removeChild(n,  foldedSize);  [CE]  ';'  expected  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().removeChild(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().removeChild(n,  foldedSize);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
233	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  arrayFoldedNode);  [CE]  ';'  expected  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().removeChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
234	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  ';'  expected	130	None	replace
235	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remov	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  ';'  expected	130	None	replace
236	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  ')'  expected	130	None	replace
237	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.remove(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  ')'  expected	130	None	replace
238	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  arrayFold  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  arrayFold  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  arrayFold	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  ';'  expected	130	None	replace
239	[BUG]  [BUGGY]  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	159	None	replace
240	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	159	None	replace
241	[BUG]  [BUGGY]  Node.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(arrayNode,  n,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	159	None	replace
242	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  n);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	159	None	replace
243	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	159	None	replace
244	[BUG]  [BUGGY]  Node.getParent().replaceChild(arrayNode,  n);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	159	None	replace
245	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	65	None	replace
246	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	65	None	replace
247	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
248	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
249	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
250	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
251	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
252	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
253	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
254	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1),  emptyStringNode);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1),  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1),  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  ';'  expected	58	None	replace
255	[BUG]  [BUGGY]  Node  parentNode  =  n.getParentNode().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parentNode  =  n.getParentNode().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parentNode  =  n.getParentNode().replaceChild(n,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
256	[BUG]  [BUGGY]  Node.getParentNode().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParentNode().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParentNode().replaceChild(n,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
257	[BUG]  [BUGGY]  n.getNextNode().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNextNode().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNextNode().replaceChild(n,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
258	[BUG]  [BUGGY]  NodeUtil.getParentNode().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.getParentNode().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.getParentNode().replaceChild(n,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
259	[BUG]  [BUGGY]  n.getParentNode().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(emptyStringNode,  n);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
260	[BUG]  [BUGGY]  n.getParentNode().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(n,  foldedStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	56	None	replace
261	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
262	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
263	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
264	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  AssertionFailedError  	39	3	replace
266	[BUG]  [BUGGY]  Node  parent  =  emptyStringNode.getParent();  [FE]  AssertionFailedError  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  AssertionFailedError  	39	3	replace
267	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  parent.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  parent.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  parent.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
268	[BUG]  [BUGGY]  branch.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  branch  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  branch.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	branch.getParent().replaceChild(n,  emptyStringNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  branch	27	None	replace
269	[BUG]  [BUGGY]  Parent.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  Parent  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Parent.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Parent.getParent().replaceChild(n,  emptyStringNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  Parent	27	None	replace
270	[BUG]  [BUGGY]  parent.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getNext().replaceChild(n,  emptyStringNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
271	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
272	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
273	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.getFirstChild();	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	70	None	replace
274	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	add
275	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	add
276	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  ';'  expected	50	None	add
277	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().removeChild(emptyStringNode,  n);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().removeChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  n.getParent().removeChild(emptyStringNode,  n);	  	non-compiled	[CE]  ';'  expected	50	None	add
278	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	50	None	add
279	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	50	None	add
280	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().removeChild(emptyStringNode,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().removeChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().removeChild(emptyStringNode,  n);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	50	None	add
281	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	add
282	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	50	3	add
283	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	80	3	replace
284	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	80	3	replace
285	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
286	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	80	None	replace
287	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	123	None	replace
288	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	123	None	replace
289	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  prev);  [CE]  incompatible  types  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  incompatible  types	123	None	replace
290	[BUG]  [BUGGY]  Node  node.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	123	None	replace
291	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getLastChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
292	[BUG]  [BUGGY]  n.getLastChild().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getLastChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
293	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  foldedStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	154	None	replace
294	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  foldedSize);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
295	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getFirstChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	154	None	replace
296	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  originalSize);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	154	None	replace
297	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
298	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
299	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
300	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
301	[BUG]  [BUGGY]  n.getNext().replaceChild(node,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(node,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(node,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	114	None	replace
302	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(fillingStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  fillingStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(fillingStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(fillingStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	114	None	replace
303	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(filledStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  filledStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(filledStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(filledStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	114	None	replace
304	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
305	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
306	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
307	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
308	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
309	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
310	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
311	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
312	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  foldedStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	115	None	add
313	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	115	None	add
314	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	115	None	add
315	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
316	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
317	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  foldedSize);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	152	None	replace
318	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  foldedStringNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	152	None	replace
319	[BUG]  [BUGGY]  n.getNext().replaceChild(sb,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(sb,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(sb,  emptyStringNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	152	None	replace
320	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(prev,  emptyStringNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	152	3	replace
321	[BUG]  [BUGGY]  n.getNext().replaceChild(prev,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(prev,  emptyStringNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	152	3	replace
322	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  originalSize);	  n.getParent().replaceChild(arrayStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	10	None	replace
323	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  originalSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(oldStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  originalSize);	  n.getParent().replaceChild(arrayStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	10	None	replace
324	[BUG]  [BUGGY]  n.getParent().replaceChild(filledStringNode,  this);  [CE]  cannot  find  symbol  filledStringNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(filledStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(filledStringNode,  this);	  n.getParent().replaceChild(fillingStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	5	None	replace
325	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  this);  [CE]  cannot  find  symbol  arrayFoldedStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedStringNode,  this);	  n.getParent().replaceChild(fillingStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedStringNode	5	None	replace
326	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,  n);	  n.getParent().replaceChild(arrayNode,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	31	3	replace
327	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  n);	  n.getParent().replaceChild(arrayNode,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	31	3	replace
328	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PRIVATE  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  PRIVATE	172	None	replace
329	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	172	None	replace
330	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PRIVATE  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  PRIVATE	172	None	replace
331	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  node	172	None	replace
332	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	180	None	replace
333	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	180	None	replace
334	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	180	None	replace
335	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [CE]  not  a  statement  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  not  a  statement	180	None	replace
336	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [CE]  not  a  statement  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  not  a  statement	180	None	replace
337	[BUG]  [BUGGY]  n.getParent().replaceChild(filledStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  filledStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(filledStringNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(filledStringNode,  foldedStringNode);	  n.getParent().replaceChild(oldStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	77	None	replace
338	[BUG]  [BUGGY]  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
339	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
340	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.get(0);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	94	None	replace
341	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
342	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
343	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  prev);	  n.getParent().replaceChild(parent,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	18	3	replace
344	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  prev);	  n.getParent().replaceChild(parent,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	18	3	replace
345	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(parent,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	18	3	replace
346	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(parent,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	18	3	replace
347	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(emptyStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
348	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(inemptyStringNode);  [CE]  cannot  find  symbol  inemptyStringNode  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(inemptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(inemptyStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  inemptyStringNode	78	None	replace
349	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(originalSize);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(originalSize);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
350	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(fillingStringNode);  [CE]  cannot  find  symbol  fillingStringNode  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(fillingStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(fillingStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	78	None	replace
351	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode,  prev);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(emptyStringNode,  prev);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
352	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(n,  prev);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(n,  prev);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
353	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
354	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
355	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
356	[BUG]  [BUGGY]  n.getName().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  foldedStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	15	None	replace
357	[BUG]  [BUGGY]  n.getName().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayStringNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	15	None	replace
358	[BUG]  [BUGGY]  n.getName().replaceChild(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(n,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  leftStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	15	None	replace
359	[BUG]  [BUGGY]  n.getName().replaceChild(prev,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(prev,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
360	[BUG]  [BUGGY]  n.getName().replaceChild(n,  originalSize);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  originalSize);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
361	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
362	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
363	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  node	69	None	replace
364	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
365	[BUG]  [BUGGY]  n.getParent().removeChild(emptyStringNode);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
366	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(parent);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  parent	69	None	replace
367	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
368	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	46	3	replace
370	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	46	3	replace
371	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	46	2	replace
372	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	46	2	replace
373	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
374	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	46	2	replace
375	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	46	2	replace
376	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	46	3	replace
377	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  parent  =  n.getParent();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	46	3	replace
378	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();  [CE]  cannot  find  symbol  node  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getNext();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
379	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  foldedSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  foldedSize);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	146	None	replace
380	[BUG]  [BUGGY]  n.getNext().replaceChild(leftStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(leftStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(leftStringNode,  emptyStringNode);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	146	None	replace
381	[BUG]  [BUGGY]  n.getNext().replaceChild(oldStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(oldStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(oldStringNode,  emptyStringNode);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	146	None	replace
382	[BUG]  [BUGGY]  n.getPrev().replaceChild(n,  prev);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(n,  prev);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
383	[BUG]  [BUGGY]  n.getPrev().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(arrayStringNode,  emptyStringNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	16	None	replace
384	[BUG]  [BUGGY]  n.getPrev().replaceChild(prev,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(prev,  emptyStringNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
385	[BUG]  [BUGGY]  n.getPrev().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(n,  foldedStringNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	16	None	replace
386	[BUG]  [BUGGY]  n.getPrev().replaceChild(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(n,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(n,  leftStringNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	16	None	replace
387	[BUG]  [BUGGY]  n.getPrev().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(n,  arrayFoldedNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	16	None	replace
388	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  foldedStringNode);	  n.getParent().replaceChild(arrayStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	125	None	replace
389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(emptyStringNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  RuntimeException  	33	3	replace
390	[BUG]  [BUGGY]  n.getParent().removeChild(emptyStringNode);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(emptyStringNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  RuntimeException  	33	3	replace
391	[BUG]  [BUGGY]  n.getParent().removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayStringNode);	  n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	33	None	replace
392	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	33	3	replace
393	[BUG]  [BUGGY]  n.getNext().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	33	3	replace
394	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().removeChild(emptyStringNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	33	3	replace
395	[BUG]  [BUGGY]  n.getNext().removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(emptyStringNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	33	3	replace
396	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  leftStringNode);	  n.getParent().replaceChild(arrayNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	175	None	replace
397	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  left);  [CE]  cannot  find  symbol  left  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  left);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  left);	  n.getParent().replaceChild(arrayNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  left	175	None	replace
398	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	179	None	replace
399	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNo  [CE]  ')'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNo  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNo	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
400	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	179	None	replace
401	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild  [CE]  not  a  statement  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  not  a  statement	179	None	replace
402	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [CE]  ')'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
403	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString  [CE]  ')'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
404	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(emptyStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
405	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(emptyStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
406	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeFirstChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
407	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeFirstChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
408	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(fillingStringNode,  prev);  [CE]  cannot  find  symbol  fillingStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(fillingStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(fillingStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	136	None	replace
409	[BUG]  [BUGGY]  node.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getFirstChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	136	None	replace
410	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  foldedStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	156	None	replace
411	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  leftStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	156	None	replace
412	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  prev);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  prev);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
413	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  oldStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	156	None	replace
414	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayNode,  originalSize);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayNode,  originalSize);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
415	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	129	None	replace
416	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  emptyStringNode);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	129	None	replace
417	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  foldedSize);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	129	None	replace
418	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(fillingStringNode);  [CE]  cannot  find  symbol  fillingStringNode  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(fillingStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(fillingStringNode);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	129	None	replace
419	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode,  n);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(emptyStringNode,  n);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	129	None	replace
420	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	105	None	replace
421	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
422	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	105	None	replace
423	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	105	None	replace
424	[BUG]  [BUGGY]  Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	105	None	replace
425	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	148	3	add
426	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	148	3	add
427	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(emptyStringNode,  prev);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
428	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(emptyStringNode,  prev);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
429	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().removeChild(emptyStringNode,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().removeChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().removeChild(emptyStringNode,  prev);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	148	None	add
430	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
431	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
432	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
433	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "_ ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  emptyStringNode  =  Node.newString( "_ ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  emptyStringNode  =  Node.newString( "_ ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
434	[BUG]  [BUGGY]  n.getParent().replaceChild(filledStringNode,  foldedSize);  [CE]  cannot  find  symbol  filledStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(filledStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(filledStringNode,  foldedSize);	  n.getParent().replaceChild(oldStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	142	None	replace
435	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  foldedSize);	  n.getParent().replaceChild(oldStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	142	None	replace
436	[BUG]  [BUGGY]  n.getParent().replaceChild(postureFoldedStringNode,  foldedSize);  [CE]  cannot  find  symbol  postureFoldedStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(postureFoldedStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(postureFoldedStringNode,  foldedSize);	  n.getParent().replaceChild(oldStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  postureFoldedStringNode	142	None	replace
437	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
438	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
439	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
440	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	36	None	replace
441	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  node);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  node);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
442	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
443	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
444	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
445	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
446	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	107	None	add
447	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
448	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
449	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
450	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
451	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getPrevious().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getPrevious().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getPrevious().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
452	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
453	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
454	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getFirst().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getFirst().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getFirst().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
455	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  prev);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  prev);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
456	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  sb,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  sb,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  sb,  emptyStringNode);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
457	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  sb,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  sb,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,  sb,  emptyStringNode);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
458	[BUG]  [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode,  prev);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(sb,  emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(sb,  emptyStringNode,  prev);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
459	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  sb);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  sb);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  sb);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
460	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  arrayStringNode);	  n.getParent().replaceChild(arrayStringNode,    n);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	34	None	replace
461	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode,  foldedSize);	  n.getNext().replaceChild(n,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
462	[BUG]  [BUGGY]  n.getNext().replaceChild(filledStringNode,  foldedSize);  [CE]  cannot  find  symbol  filledStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(filledStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(filledStringNode,  foldedSize);	  n.getNext().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	54	None	replace
463	[BUG]  [BUGGY]  n.getNext().replaceChild(oldStringNode,  foldedSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(oldStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(oldStringNode,  foldedSize);	  n.getNext().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	54	None	replace
464	[BUG]  [BUGGY]  n.getNext().replaceChild(inempteStringNode,  foldedSize);  [CE]  cannot  find  symbol  inempteStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(inempteStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(inempteStringNode,  foldedSize);	  n.getNext().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  inempteStringNode	54	None	replace
465	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().replaceChild(callTarget,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	24	3	add
466	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().replaceChild(callTarget,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	24	3	add
467	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  n.getParent();  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  n.getParent();	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
468	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString( "   ");  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString( "   ");  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  Node.newString( "   ");  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
469	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget,  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget,  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget,  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	24	None	add
470	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString( "call ");  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString( "call ");  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  Node.newString( "call ");  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
471	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().removeChild(callTarget,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().removeChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().removeChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	add
472	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString(Token.NAME);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString(Token.NAME);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  Node.newString(Token.NAME);  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
473	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  [CE]  :  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.	  	non-compiled	[CE]  :  expected	24	None	add
474	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(1);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(1);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
475	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)emptyStringNode.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)emptyStringNode.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)emptyStringNode.get(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
476	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.remove(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.remove(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.remove(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
477	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayStringNode.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayStringNode.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayStringNode.get(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
478	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(2);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(2);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(2);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
479	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedParameters.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedParameters.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedParameters.get(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
480	[BUG]  [BUGGY]  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(sb.toString());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(sb.toString());	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	20	None	replace
481	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(arrayNode);	  n.removeChild(emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	20	3	replace
482	[BUG]  [BUGGY]  n.removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayNode);	  n.removeChild(emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	20	3	replace
483	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
484	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
485	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
486	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
487	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  originalSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  n,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	12	None	replace
488	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  n,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
489	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  originalSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  n,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	12	None	replace
490	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  originalSize);  [CE]  cannot  find  symbol  parent  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
491	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent,  originalSize);  [CE]  cannot  find  symbol  parent  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
492	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
493	[BUG]  [BUGGY]  Node  n  =  arrayNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayNode.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
494	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
495	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(0).replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.get(0).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.get(0).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
496	[BUG]  [BUGGY]  Node  n  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
497	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getParent().replaceChild(arrayNode,  n);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
498	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	41	None	replace
499	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  parent);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  parent);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	41	None	replace
500	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
501	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
502	[BUG]  [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
503	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
504	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
505	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x=[].join( "  [FE]                          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x=[].join( "  	132	2	replace
506	[BUG]  [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x=[].join( "  [FE]                          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x=[].join( "  	132	2	replace
507	[BUG]  [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
508	[BUG]  [BUGGY]  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
509	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
510	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
511	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  foldedSize);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
512	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.remove(0);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	91	None	replace
513	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  foldedSize);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  foldedSize);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
514	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  foldedStringNode);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  foldedStringNode);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
515	[BUG]  [BUGGY]  Node  oldStringNode.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getNext().replaceChild(n,  emptyStringNode);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
516	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  sb);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  sb);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  sb);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
517	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  originalSize);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  originalSize);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
518	[BUG]  [BUGGY]  Node  oldStringNode  =  emptyStringNode.getParent().replaceChild(n,  oldStringNode);  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  emptyStringNode.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  emptyStringNode.getParent().replaceChild(n,  oldStringNode);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	6	None	replace
519	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    n);    n.getParent().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
520	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    n.getParent().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
521	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
522	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
523	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
524	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(arrayNode,  n);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n.getParent().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  ';'  expected	30	None	add
525	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
526	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
527	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.cloneTree();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.cloneTree();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
528	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	164	None	replace
529	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	164	None	replace
530	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  arrayNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  arrayNode);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  arrayNode);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	164	None	replace
531	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	164	None	replace
532	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  ';'  expected	128	None	replace
533	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  ')'  expected	128	None	replace
534	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  ';'  expected	128	None	replace
535	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >>  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >>  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >>  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  ')'  expected	128	None	replace
536	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
537	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
538	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
539	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
540	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  ';'  expected	35	None	add
541	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
542	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
543	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  node	35	None	add
544	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
545	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
546	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
547	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
548	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	35	None	add
549	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  void  cannot  be  dereferenced  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  void  cannot  be  dereferenced	161	None	replace
550	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	161	None	replace
551	[BUG]  [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  void  cannot  be  dereferenced  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  void  cannot  be  dereferenced	161	None	replace
552	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize).replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize).replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize).replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	161	None	replace
553	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	161	None	replace
554	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
555	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  foldedSize,  emptyStringNode);  [CE]  void  cannot  be  dereferenced  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  foldedSize,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  foldedSize,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  void  cannot  be  dereferenced	161	None	replace
556	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	157	3	add
557	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	157	3	add
558	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
559	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n.getNext().replaceChild(arrayNode,  n);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n.getNext().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  ';'  expected	157	None	add
560	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
561	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().removeChild(arrayNode,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().removeChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    n.getNext().removeChild(arrayNode,  n);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	157	None	add
562	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.cloneTree();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.cloneTree();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
563	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  emptyStringNode.removeFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
564	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
565	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  this,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  this,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  this,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	104	None	replace
566	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(n,  foldedStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	57	None	replace
567	[BUG]  [BUGGY]  n.getPrevious().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(arrayStringNode,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	57	None	replace
568	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(n,  arrayFoldedNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	57	None	replace
569	[BUG]  [BUGGY]  Node.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getPrevious().replaceChild(n,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
570	[BUG]  [BUGGY]  n.getPrevious().replaceChild(n,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(n,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(n,  leftStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	57	None	replace
571	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  this);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  n,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	103	None	replace
572	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  n,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
573	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
574	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  this);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  n,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	103	None	replace
575	[BUG]  [BUGGY]  parent.getParent().replaceChild(n,  emptyStringNode,  this);  [CE]  cannot  find  symbol  parent  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.getParent().replaceChild(n,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getParent().replaceChild(n,  emptyStringNode,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	103	None	replace
576	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  this);  [CE]  cannot  find  symbol  parent  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	103	None	replace
577	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  arrayNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  arrayNode,  originalSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	169	None	replace
578	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  n,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  prev,  n,  originalSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	169	None	replace
579	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  prev,  originalSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	169	None	replace
580	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	95	None	replace
581	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  cannot  find  symbol  node  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(0);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
582	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  Node  n  =  arrayFoldedChildren.get(0);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	95	None	replace
583	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
584	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
585	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
586	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
587	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  prev  =  emptyStringNode.getNext();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  prev  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    Node  prev  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	68	None	add
588	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
589	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().removeChild(prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
590	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	68	None	add
591	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  prev  =  emptyStringNode.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  prev  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    Node  prev  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	68	None	add
592	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
593	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
594	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	68	None	add
595	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
596	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
597	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
598	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
599	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	87	None	add
600	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	87	None	add
601	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	add
602	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	87	None	add
603	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
604	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
605	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  foldedStringNode);	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	87	None	add
606	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
607	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	88	None	replace
608	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  n);  [CE]  cannot  find  symbol  arrayFoldedStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedStringNode,  n);	  n.getParent().replaceChild(filledStringNode,    n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedStringNode	52	None	replace
609	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  n);  [CE]  cannot  find  symbol  oldStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(oldStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  n);	  n.getParent().replaceChild(filledStringNode,    n);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	52	None	replace
610	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	110	None	replace
611	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	110	None	replace
612	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
613	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
614	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
615	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
616	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  Node  prev  =  n.getFirstChild();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  Node  prev  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    Node  prev  =  n.getFirstChild();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	66	None	add
617	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
618	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
619	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  RuntimeException  	66	3	add
620	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [FE]  RuntimeException  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  RuntimeException  	66	3	add
621	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
622	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
623	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	66	None	add
624	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(prev,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(prev,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
625	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(prev,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(prev,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(prev,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
626	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  originalSize,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  originalSize,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  originalSize,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
627	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  foldedSize,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  foldedSize,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
628	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
629	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  functionName,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
630	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode,  originalSize);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	9	None	replace
631	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
632	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
633	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
634	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
635	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
636	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
637	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  arrayNode  =  Node.newString( "   ");  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	40	None	add
638	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
639	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
640	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	40	None	add
641	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
642	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
643	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "[ ");  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  arrayNode  =  Node.newString( "[ ");  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  arrayNode  =  Node.newString( "[ ");  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	40	None	add
644	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
645	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
646	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	79	None	add
647	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	79	None	add
648	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	79	None	add
649	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
650	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
651	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "[ ");  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "[ ");  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "[ ");  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	79	None	add
652	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	79	None	add
653	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
654	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
655	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
656	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();  [CE]  cannot  find  symbol  node  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
657	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
658	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getParent();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
659	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ROOT_LOCALE);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
660	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayFoldedNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
661	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
662	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  node);  [CE]  ';'  expected  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  node);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
663	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  Predicates	173	None	replace
664	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  Predicates	173	None	replace
665	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	173	None	replace
666	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  Predicates	173	None	replace
667	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	173	None	replace
668	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent();  [CE]  cannot  find  symbol  node  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	73	None	replace
669	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	73	None	replace
670	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getParent();  [CE]  cannot  find  symbol  foldedStringNode  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getParent();    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	73	None	replace
671	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getParent();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getParent();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	73	None	replace
672	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
673	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(n,  foldedSize);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().replaceChild(n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().replaceChild(n,  foldedSize);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
674	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  Node  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
675	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
676	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
677	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(n,  foldedStringNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().replaceChild(n,  foldedStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
678	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getNext();	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	81	None	replace
679	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  leftStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	99	None	replace
680	[BUG]  [BUGGY]  n.getParent().replaceChild(leftStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(leftStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(leftStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	99	None	replace
681	[BUG]  [BUGGY]  n.getParent().replaceChild(leftStringNode,  arrayStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(leftStringNode,  arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(leftStringNode,  arrayStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	99	None	replace
682	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  leftStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	99	None	replace
683	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
684	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  foldedSize);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	92	None	replace
685	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	92	None	replace
686	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	92	None	replace
687	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedSize,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  foldedSize,  originalSize);	  n.getParent().replaceChild(emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
688	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedSize,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedSize,  originalSize);	  n.getParent().replaceChild(emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
689	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize,  originalSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  foldedSize,  originalSize);	  n.getParent().replaceChild(emptyStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	11	None	replace
690	[BUG]  [BUGGY]  n.getNext().replaceChild(filledStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  filledStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(filledStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(filledStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	55	None	replace
691	[BUG]  [BUGGY]  n.getNext().replaceChild(oldStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(oldStringNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(oldStringNode,  foldedStringNode);	  n.getNext().replaceChild(n,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	55	None	replace
692	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	116	None	replace
693	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	116	None	replace
694	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
695	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
696	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
697	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
698	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
699	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
700	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	106	None	replace
701	[BUG]  [BUGGY]  Node  parentNode  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parentNode  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parentNode  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	106	None	replace
702	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	106	3	replace
703	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	106	3	replace
704	[BUG]  [BUGGY]  Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	106	None	replace
705	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	106	None	replace
706	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
707	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  cannot  find  symbol  node  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  cannot  find  symbol  node	86	None	replace
708	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayFoldedNode);  return  null;  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayFoldedNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayFoldedNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	86	None	replace
709	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  this;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  this;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedSize);  n.getNext().replaceChild(n,  emptyStringNode);  return  this;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
710	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	153	3	add
711	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	153	3	add
712	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	153	None	add
713	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
714	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "_ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "_ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
715	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
716	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  node.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  node.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    node.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	153	None	add
717	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
718	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "[ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "[ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "[ ");  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
719	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
720	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
721	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
722	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
723	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [CE]  incompatible  types  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  incompatible  types	44	None	replace
724	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	44	None	replace
725	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
726	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  arrayNode);  node.getParent().removeChild(arrayNode);  [CE]  incompatible  types  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  arrayNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(n,  arrayNode);  node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  incompatible  types	44	None	replace
727	[BUG]  [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  incompatible  types	44	None	replace
728	[BUG]  [BUGGY]  n.getParent().replaceChild(partialStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  partialStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(partialStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(partialStringNode,  emptyStringNode);	  n.getParent().replaceChild(paddingStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  partialStringNode	76	None	replace
729	[BUG]  [BUGGY]  n.getParent().replaceChild(postureStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  postureStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(postureStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(postureStringNode,  emptyStringNode);	  n.getParent().replaceChild(paddingStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  postureStringNode	76	None	replace
730	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(emptyStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	49	None	replace
731	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  prev,  foldedSize);	  n.getParent().replaceChild(emptyStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
732	[BUG]  [BUGGY]  arrayFoldedChildren.removeChild(emptyStringNode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.removeChild(emptyStringNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
733	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.remove(emptyStringNode);	  n.removeChild(arrayFoldedNode);    	compilable	  [FE]  AssertionFailedError  	62	3	replace
734	[BUG]  [BUGGY]  arrayFoldedChildren.remove(emptyStringNode);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.remove(emptyStringNode);	  n.removeChild(arrayFoldedNode);    	compilable	  [FE]  AssertionFailedError  	62	3	replace
735	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.remove(n);	  n.removeChild(arrayFoldedNode);    	compilable	  [FE]  AssertionFailedError  	62	3	replace
736	[BUG]  [BUGGY]  arrayFoldedChildren.remove(n);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.remove(n);	  n.removeChild(arrayFoldedNode);    	compilable	  [FE]  AssertionFailedError  	62	3	replace
737	[BUG]  [BUGGY]  arrayFoldedChildren.removeChild(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.removeChild(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.removeChild(n);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	compilable	  [FE]  RuntimeException  	122	3	replace
739	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	compilable	  [FE]  RuntimeException  	122	3	replace
740	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	122	3	replace
741	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	122	3	replace
742	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	122	None	replace
743	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	122	None	replace
744	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  node.getNext().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  node.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  node.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	122	None	replace
745	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
746	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
747	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	74	None	add
748	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n.getParent().removeChild(emptyStringNode,  emptyStringNode);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n.getParent().removeChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  n.getParent().removeChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	74	None	add
749	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	74	None	add
750	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().removeChild(emptyStringNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().removeChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().removeChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	74	None	add
751	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  return  n;  [CE]  unreachable  statement  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  return  n;	  	non-compiled	[CE]  unreachable  statement	74	None	add
752	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ");	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	74	None	add
753	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  break;  [CE]  unreachable  statement  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  break;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  break;	  	non-compiled	[CE]  unreachable  statement	74	None	add
754	[BUG]  [BUGGY]  n.getName().replaceChild(prev,  n);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(prev,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(prev,  n);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
755	[BUG]  [BUGGY]  n.getName().replaceChild(emptyStringNode,  prev);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(emptyStringNode,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
756	[BUG]  [BUGGY]  n.getName().replaceChild(callTarget,  n,  prev);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(callTarget,  n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(callTarget,  n,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
757	[BUG]  [BUGGY]  n.getName().replaceChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayStringNode,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	134	None	replace
758	[BUG]  [BUGGY]  Node.getName().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getName().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getName().replaceChild(n,  emptyStringNode);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
759	[BUG]  [BUGGY]  prev.getName().replaceChild(n,  n);  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  prev.getName().replaceChild(n,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	prev.getName().replaceChild(n,  n);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
760	[BUG]  [BUGGY]  n.getNext().replaceChild(fillingStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  fillingStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(fillingStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(fillingStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	147	None	replace
761	[BUG]  [BUGGY]  n.getNext().replaceChild(inempteStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  inempteStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(inempteStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(inempteStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  inempteStringNode	147	None	replace
762	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  oldStringNode);	  n.getNext().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	147	None	replace
763	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  void  cannot  be  dereferenced  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  void  cannot  be  dereferenced	111	None	replace
764	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	111	None	replace
765	[BUG]  [BUGGY]  NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  cannot  find  symbol  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.getParent().replaceChild(n,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
766	[BUG]  [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  incompatible  types  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  incompatible  types	111	None	replace
767	[BUG]  [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parentNode);  [CE]  incompatible  types  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parentNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parentNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parentNode.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parentNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  incompatible  types	111	None	replace
768	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  kJoin);  [CE]  cannot  find  symbol  kJoin  [FE]                            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  kJoin);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  kJoin);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  kJoin	111	None	replace
769	[BUG]  [BUGGY]  n.getNext().replaceChild(fillingStringNode,  n);  [CE]  cannot  find  symbol  fillingStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(fillingStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(fillingStringNode,  n);	  n.getNext().replaceChild(arrayNode,    n);    	non-compiled	[CE]  cannot  find  symbol  fillingStringNode	158	None	replace
770	[BUG]  [BUGGY]  n.getParentNode().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(arrayNode,  emptyStringNode);	  n.getNext().replaceChild(arrayNode,    n);    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
771	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  this);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
772	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  this,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  this,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  this,  emptyStringNode);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
773	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev,  emptyStringNode,  this);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
774	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  functionName,  emptyStringNode,  this);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
775	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  this,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
776	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  right,  emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  right,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  right,  emptyStringNode,  this);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
777	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  sb);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  sb);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  sb);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
778	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  sb,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  sb,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  sb,  emptyStringNode);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
779	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  prev);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
780	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  foldedSize);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  foldedSize);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
781	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  left);  [CE]  cannot  find  symbol  left  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  left);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  left);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  left	26	None	replace
782	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  elem,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  elem,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  elem,  emptyStringNode);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
783	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  reverse);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  reverse);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  reverse	26	None	replace
784	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    null;    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	162	None	replace
785	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  cannot  find  symbol  foldedStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    null;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	162	None	replace
786	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  orphaned  case	131	None	replace
787	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  parent);  [CE]  cannot  find  symbol  parent  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  parent);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  parent	167	None	replace
788	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  node);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  node);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	167	None	replace
789	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
790	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
791	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  null);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
792	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  null);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
793	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
794	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
795	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
796	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
797	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  prev,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  prev,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  prev,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
798	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  functionName,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  functionName,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
799	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode,  foldedSize);  [CE]  cannot  find  symbol  leftStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	47	None	replace
800	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  foldedStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	8	None	replace
801	[BUG]  [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.replaceChild(n,  emptyStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	8	None	replace
802	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  foldedStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	8	None	replace
803	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
804	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
805	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	135	None	add
806	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n.getFirstChild().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n.getFirstChild().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n.getFirstChild().replaceChild(n,  prev);	  	non-compiled	[CE]  ';'  expected	135	None	add
807	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	135	None	add
808	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.cloneTree();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n  =  emptyStringNode.cloneTree();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	135	None	add
809	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n.getFirstChild().removeChild(prev);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n.getFirstChild().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n.getFirstChild().removeChild(prev);	  	non-compiled	[CE]  ';'  expected	135	None	add
810	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n  =  emptyStringNode.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	135	None	add
811	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
812	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
813	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	170	None	replace
814	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
815	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  prev,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  prev,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
816	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
817	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
818	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	71	None	replace
819	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getNext();  [CE]  cannot  find  symbol  foldedStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedStringNode);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	71	None	replace
820	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	71	None	replace
821	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getNext();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  originalSize);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
822	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  foldedSize);  Node  n  =  emptyStringNode.getNext();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  foldedSize);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  foldedSize);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	71	None	replace
823	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  null);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  null);	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	3	None	replace
824	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  false);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  false);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  false);	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	3	None	replace
825	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  this);	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
826	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.FUNCTION));  [CE]  cannot  find  symbol  arrayStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.FUNCTION));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  new  Node(Token.FUNCTION));	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	3	None	replace
827	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
828	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
829	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead!=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
830	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
831	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
832	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	140	None	replace
833	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  node.getNext().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  node.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  node.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	140	None	replace
834	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  emptyStringNode.getParent();  n.getNext().replaceChild(parent,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  emptyStringNode.getParent();  n.getNext().replaceChild(parent,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
835	[BUG]  [BUGGY]  Node  parent  =  emptyStringNode.getParent();  n.getNext().replaceChild(parent,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  emptyStringNode.getParent();  n.getNext().replaceChild(parent,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  emptyStringNode.getParent();  n.getNext().replaceChild(parent,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
836	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	140	None	replace
837	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  this);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  this);	  n.getParent().replaceChild(arrayFoldedNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	155	None	replace
838	[BUG]  [BUGGY]  arrayFoldedChildren.getParent().replaceChild(n,  this);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.getParent().replaceChild(n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.getParent().replaceChild(n,  this);	  n.getParent().replaceChild(arrayFoldedNode,    this);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
839	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	replace
840	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	101	3	replace
841	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedSize);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    parent.replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	109	None	replace
842	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  foldedStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    parent.replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	109	None	replace
843	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    parent.replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	109	None	replace
844	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	120	None	replace
845	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	120	None	replace
846	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	120	None	replace
847	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  incompatible  types  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  incompatible  types	120	None	replace
848	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  n,  originalSize);  [CE]  cannot  find  symbol  arrayFoldedStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedStringNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedStringNode,  n,  originalSize);	  n.getParent().replaceChild(fillingStringNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedStringNode	14	None	replace
849	[BUG]  [BUGGY]  n.getParent().replaceChild(partialStringNode,  n,  originalSize);  [CE]  cannot  find  symbol  partialStringNode  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(partialStringNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(partialStringNode,  n,  originalSize);	  n.getParent().replaceChild(fillingStringNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  partialStringNode	14	None	replace
850	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
851	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getLastChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
852	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.getLastChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
853	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode,  n.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode,  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  emptyStringNode,  n.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	60	None	replace
854	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getfirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  emptyStringNode.getfirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  emptyStringNode.getfirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
855	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  left);  [CE]  cannot  find  symbol  left  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  left);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  left);	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  left	137	None	replace
856	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  right);	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	replace
857	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  right);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  right);	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	replace
858	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  foldedSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  n,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	53	None	replace
859	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  n,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
860	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
861	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  foldedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  n,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	53	None	replace
862	[BUG]  [BUGGY]  n.getParent().replaceChild(filledStringNode,  n,  foldedSize);  [CE]  cannot  find  symbol  filledStringNode  [FE]                                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(filledStringNode,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(filledStringNode,  n,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  filledStringNode	53	None	replace
863	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().replaceChild(prev,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
864	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(prev,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().replaceChild(prev,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
865	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().replaceChild(prev,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    Node  n.getParent().replaceChild(prev,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	96	None	add
866	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(prev,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().removeChild(prev,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	96	None	add
867	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(prev,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    Node  n.getParent().removeChild(prev,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	96	None	add
868	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
869	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
870	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    Node  n.getParent().removeChild(prev);	  	non-compiled	[CE]  ';'  expected	96	None	add
871	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().removeChild(parent,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().removeChild(parent,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	96	None	add
872	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(parent,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node  n.getParent().removeChild(parent,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    Node  n.getParent().removeChild(parent,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	96	None	add
873	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	112	None	replace
874	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	112	None	replace
875	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	112	None	replace
876	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	112	None	replace
877	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(arrayNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
878	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  arrayNode,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  arrayNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  arrayNode,  foldedSize);	  n.getParent().replaceChild(arrayNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
879	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  n,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  n,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,  n,  foldedSize);	  n.getParent().replaceChild(arrayNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
880	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  foldedSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  prev,  foldedSize);	  n.getParent().replaceChild(arrayNode,    foldedSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	21	None	replace
881	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	37	None	replace
882	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	37	None	replace
883	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	37	None	replace
884	[BUG]  [BUGGY]  Node  n  =  arrayNode.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayNode.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	37	None	replace
885	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	42	None	replace
886	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	133	None	replace
887	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(n,  arrayFoldedNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	133	None	replace
888	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(emptyStringNode,  n);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
889	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  parent);  [CE]  cannot  find  symbol  parent  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(n,  parent);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	133	None	replace
890	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  originalSize);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(n,  originalSize);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
891	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(n,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(n,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(n,  foldedStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	133	None	replace
892	[BUG]  [BUGGY]  n.getNext().removeChild(n,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
893	[BUG]  [BUGGY]  n.getNext().removeChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(arrayStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	82	None	replace
894	[BUG]  [BUGGY]  n.getNext().removeChild(oldStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(oldStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(oldStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	82	None	replace
895	[BUG]  [BUGGY]  n.getNext().removeChild(arrayNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(arrayNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
896	[BUG]  [BUGGY]  n.getNext().removeChild(emptyStringNode,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
897	[BUG]  [BUGGY]  n.getNext().removeChild(emptyStringNode,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(emptyStringNode,  n);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
898	[BUG]  [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	117	None	replace
899	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	117	None	replace
900	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  foldedStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  foldedStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	117	None	replace
901	[BUG]  [BUGGY]  Node  n  =  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	117	None	replace
902	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  node.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  node.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  node.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	117	None	replace
903	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	72	3	replace
904	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	72	3	replace
905	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  ';'  expected	72	None	replace
906	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
907	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  node  [FE]                          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
908	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  prev);	  n.getNext().replaceChild(emptyStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	149	None	replace
909	[BUG]  [BUGGY]  n.getNext().replaceChild(oldStringNode,  prev);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(oldStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(oldStringNode,  prev);	  n.getNext().replaceChild(emptyStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	149	None	replace
910	[BUG]  [BUGGY]  n.getNext().replaceChild(leftStringNode,  prev);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(leftStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(leftStringNode,  prev);	  n.getNext().replaceChild(emptyStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	149	None	replace
911	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,  arrayStringNode);	  n.getParent().replaceChild(arrayStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	168	None	replace
912	[BUG]  [BUGGY]  parent.getParent().replaceChild(n,  n);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.getParent().replaceChild(n,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getParent().replaceChild(n,  n);	  n.getParent().replaceChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	29	None	replace
913	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  node);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  node);	  n.getParent().replaceChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  node	29	None	replace
914	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode));  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode));	  n.getParent().replaceChild(arrayNode,    this);    	non-compiled	[CE]  ';'  expected	104	None	replace
915	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	80	3	replace
916	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	80	3	replace
917	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  ROOT_LOCALE);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  ROOT_LOCALE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  ROOT_LOCALE);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
918	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getNext().replaceChild(n,  ROOT_LOCALE);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getNext().replaceChild(n,  ROOT_LOCALE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getNext().replaceChild(n,  ROOT_LOCALE);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
919	[BUG]  [BUGGY]  Node  n  =  arrayFoldedChildren.get(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  arrayFoldedChildren.get(1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  arrayFoldedChildren.get(1);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	95	None	replace
920	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	95	None	replace
921	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	40	None	add
922	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	40	None	add
923	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  node);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	40	None	add
924	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  oldStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	40	None	add
925	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
926	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	40	3	add
927	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [CE]  no  suitable  method  found  for  getCost(Node,List<Node>)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n,  arrayFoldedChildren);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,List<Node>)	129	None	replace
928	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
929	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  n);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
930	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
931	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  this);  [CE]  cannot  find  symbol  parent  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  this);	  n.getParent().replaceChild(fillingStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
932	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  this);  [CE]  cannot  find  symbol  oldStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(oldStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  this);	  n.getParent().replaceChild(fillingStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	5	None	replace
933	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  ';'  expected	63	None	add
934	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
935	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	63	3	add
936	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  ';'  expected	63	None	add
937	[BUG]  [BUGGY]  n.getParent().removeChild(arrayStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	41	None	replace
938	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
939	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  null);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  null);	  n.getParent().replaceChild(arrayFoldedNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	155	None	replace
940	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(arrayNode,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
941	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(arrayFoldedNode,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	133	None	replace
942	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(oldStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(oldStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(oldStringNode,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	133	None	replace
943	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  prev);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
944	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  parent);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  parent);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
945	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  arrayNode);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
946	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(n,  emptyStringNode));	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
947	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getPrevious().replaceChild(n,  prev);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getPrevious().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getPrevious().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
948	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	121	None	add
949	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getFirst().replaceChild(n,  prev);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getFirst().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getFirst().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
950	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
951	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  right);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  right);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	121	3	add
952	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  next);  [CE]  cannot  find  symbol  next  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  next);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  next);	  	non-compiled	[CE]  cannot  find  symbol  next	121	None	add
953	[BUG]  [BUGGY]  node.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
954	[BUG]  [BUGGY]  n.getPrevious().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(emptyStringNode,  n);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
955	[BUG]  [BUGGY]  n.getPrevious().replaceChild(oldStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(oldStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(oldStringNode,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	57	None	replace
956	[BUG]  [BUGGY]  NodeUtil.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.getPrevious().replaceChild(n,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
957	[BUG]  [BUGGY]  n.getPrevious().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(arrayNode,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
958	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	178	None	replace
959	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  Node.getNext().replaceChild(n,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	178	None	replace
960	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  foldedStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  foldedStringNode);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	146	None	replace
961	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
962	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
963	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
964	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	39	3	replace
965	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  callTarget,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	replace
966	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent,  emptyStringNode,  originalSize);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  parent	9	None	replace
967	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  oldStringNode,  originalSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  oldStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  oldStringNode,  originalSize);	  n.getParent().replaceChild(n,    emptyStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	9	None	replace
968	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
969	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  right);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
970	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
971	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  oldStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
972	[BUG]  [BUGGY]  n.getParent().replaceChild(node,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(node,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(node,  emptyStringNode);	  n.getParent().replaceChild(parent,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
973	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	26	None	replace
974	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  parent);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  parent);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	26	None	replace
975	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  false);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  false);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  false);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
976	[BUG]  [BUGGY]  n.getName().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(emptyStringNode,  n);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
977	[BUG]  [BUGGY]  n.getName().replaceChild(leftStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(leftStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(leftStringNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	15	None	replace
978	[BUG]  [BUGGY]  n.getName().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  arrayFoldedNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	15	None	replace
979	[BUG]  [BUGGY]  n.getName().replaceChild(last,  emptyStringNode);  [CE]  cannot  find  symbol  last  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(last,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(last,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  last	15	None	replace
980	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.removeFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  n.removeFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.removeFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
981	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  leftStringNode.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  leftStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  leftStringNode.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
982	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  node.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  node.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  node.getFirstChild();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
983	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  n.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.cloneTree();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
984	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  parent);  [CE]  cannot  find  symbol  parent  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  parent);	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	137	None	replace
985	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  new  Node(Token.STRING));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  new  Node(Token.STRING));	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	replace
986	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  new  Node(Token.STRING));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  new  Node(Token.STRING));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  new  Node(Token.STRING));	  n.getParent().replaceChild(emptyStringNode,    foldedStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	137	3	replace
987	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	87	None	add
988	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
989	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
990	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	87	None	add
991	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	87	None	add
992	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
993	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
994	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
995	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	87	3	add
996	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
997	[BUG]  [BUGGY]  Node  node  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  node  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  node  =  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	106	None	replace
998	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	172	None	replace
999	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PRIVATE  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  PRIVATE	172	None	replace
1000	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  PREVATE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PREVATE  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  PREVATE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  PREVATE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  PREVATE	172	None	replace
1001	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ERROR);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  ERROR  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ERROR);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ERROR);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  ERROR	172	None	replace
1002	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(arrayStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	136	None	replace
1003	[BUG]  [BUGGY]  Node.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getFirstChild().replaceChild(n,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context	136	None	replace
1004	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeFirstChild().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeFirstChild().replaceChild(emptyStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
1005	[BUG]  [BUGGY]  n.removeFirstChild().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeFirstChild().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeFirstChild().replaceChild(emptyStringNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
1006	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  node);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  node);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	179	None	replace
1007	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	179	3	replace
1008	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	179	3	replace
1009	[BUG]  [BUGGY]  Node  functionName  =  n.getFirstChild().getString();  [CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  functionName  =  n.getFirstChild().getString();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  functionName  =  n.getFirstChild().getString();	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  functionName  is  already  defined  in  method  tryFoldArrayJoin(Node)	179	None	replace
1010	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
1011	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	166	3	replace
1012	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	90	None	replace
1013	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayFoldedNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	116	None	replace
1014	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	116	None	replace
1015	[BUG]  [BUGGY]  arrayFoldedChildren.add(  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  ')'  expected	128	None	replace
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(emptyStringNode);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1017	[BUG]  [BUGGY]  arrayFoldedChildren.add(emptyStringNode);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(emptyStringNode);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1018	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  int  cannot  be  dereferenced	128	None	replace
1019	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	sb.toString();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	128	3	replace
1020	[BUG]  [BUGGY]  sb.toString();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	128	3	replace
1021	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(new  Node(Token.STRING,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(new  Node(Token.STRING,  emptyStringNode));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1022	[BUG]  [BUGGY]  arrayFoldedChildren.add(new  Node(Token.STRING,  emptyStringNode));  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(new  Node(Token.STRING,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(new  Node(Token.STRING,  emptyStringNode));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1023	[BUG]  [BUGGY]  Node  emptyStringNode  =  Node.newString( "   ");  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  Node.newString( "   ");  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  Node.newString( "   ");	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	128	None	replace
1024	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(new  Node(Token.NAME,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(new  Node(Token.NAME,  emptyStringNode));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1025	[BUG]  [BUGGY]  arrayFoldedChildren.add(new  Node(Token.NAME,  emptyStringNode));  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(new  Node(Token.NAME,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(new  Node(Token.NAME,  emptyStringNode));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(    	compilable	  [FE]  AssertionFailedError  	128	3	replace
1026	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  new  StringBuilder(sb.toString()));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  StringBuilder(sb.toString()));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  new  StringBuilder(sb.toString()));	  n.getParent().replaceChild(arrayNode,    foldedStringNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
1027	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1028	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1029	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1030	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1031	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1032	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1033	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	38	3	add
1034	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  RuntimeException  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	38	3	add
1035	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	38	None	add
1036	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1037	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	38	3	add
1038	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	177	None	replace
1039	[BUG]  [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	177	None	replace
1040	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	177	None	replace
1041	[BUG]  [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  kJoinOverhead  =  InlineCostEstimator.getCost(n);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	177	None	replace
1042	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  prev);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	71	None	replace
1043	[BUG]  [BUGGY]  n.removeChild(earlyStringNode);  [CE]  cannot  find  symbol  earlyStringNode  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(earlyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(earlyStringNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  earlyStringNode	62	None	replace
1044	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	46	3	replace
1045	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	46	3	replace
1046	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  parent  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  n);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
1047	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  node);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  node);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  node);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
1048	[BUG]  [BUGGY]  Node  n  =  node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  node.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  node.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	43	None	replace
1049	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  oldStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	43	None	replace
1050	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  callTarget);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  callTarget);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  callTarget);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	25	None	replace
1051	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  node);  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  node);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	140	None	replace
1052	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1053	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1054	[BUG]  [BUGGY]  n.removeChild(earlierStringNode);  [CE]  cannot  find  symbol  earlierStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(earlierStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(earlierStringNode);	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  earlierStringNode	20	None	replace
1055	[BUG]  [BUGGY]  n.removeChild(innerStringNode);  [CE]  cannot  find  symbol  innerStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(innerStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(innerStringNode);	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  innerStringNode	20	None	replace
1056	[BUG]  [BUGGY]  n.removeChild(newStringNode);  [CE]  cannot  find  symbol  newStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(newStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(newStringNode);	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  newStringNode	20	None	replace
1057	[BUG]  [BUGGY]  n.removeChild(exp);  [CE]  cannot  find  symbol  exp  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(exp);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(exp);	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  exp	20	None	replace
1058	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode,  emptyStringNode);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
1059	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  n);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
1060	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  Predicates	173	None	replace
1061	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  n,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  n,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	103	None	replace
1062	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent,  this);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent,  this);	  n.getParent().replaceChild(parent,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	103	None	replace
1063	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  foldedSize);	  n.getParent().replaceChild(arrayFoldedNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	176	None	replace
1064	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  ';'  expected	45	None	add
1065	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  node  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  n.getParent().replaceChild(n,  arrayNode);  node  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    n.getParent().replaceChild(n,  arrayNode);  node  =  n.getParent();	  	non-compiled	[CE]  cannot  find  symbol  node	45	None	add
1066	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	45	None	add
1067	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.NAME)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
1068	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ';'  expected	143	None	replace
1069	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    null;    	non-compiled	[CE]  cannot  find  symbol  node	162	None	replace
1070	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  null;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    null;    	non-compiled	[CE]  unreachable  statement	162	None	replace
1071	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1072	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1073	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1074	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1075	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1076	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getNext().replaceChild(n,  prev);  n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	68	3	add
1077	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	68	None	add
1078	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev;  [CE]  ')'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev;	  	non-compiled	[CE]  ')'  expected	68	None	add
1079	[BUG]  [BUGGY]  n.getPrev().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(emptyStringNode,  n);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1080	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getPrev()!=  null);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Preconditions.checkState(emptyStringNode.getPrev()!=  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Preconditions.checkState(emptyStringNode.getPrev()!=  null);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1081	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  arrayFoldedChildren);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    arrayFoldedChildren);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	138	None	replace
1082	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  n,  arrayFoldedChildren);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  n,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  n,  arrayFoldedChildren);	  n.getParent().replaceChild(n,    arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  parent	138	None	replace
1083	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  1);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
1084	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	58	None	replace
1085	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1-1,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
1086	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  emptyStringNode);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	58	None	replace
1087	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
1088	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
1089	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  null);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	165	3	add
1090	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  oldStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  oldStringNode);  arrayNode.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	165	None	add
1091	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev));  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  prev));	  n.getNext().replaceChild(emptyStringNode,    prev);    	non-compiled	[CE]  ';'  expected	149	None	replace
1092	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    parent.replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	109	None	replace
1093	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
1094	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
1095	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  ';'  expected	132	None	replace
1096	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  emptyStringNode;  }  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  emptyStringNode;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  return  emptyStringNode;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
1097	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  arrayFoldedChildren.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
1098	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  foldedStringNode);  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  foldedStringNode);	  n.getParent().replaceChild(arrayStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	125	None	replace
1099	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  foldedStringNode);	  n.getParent().replaceChild(arrayStringNode,    foldedStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	125	None	replace
1100	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  node.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  node.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    node.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	74	None	add
1101	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
1102	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
1103	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
1104	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	74	3	add
1105	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(emptyStringNode,  new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	74	None	add
1106	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
1107	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
1108	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayStringNode,  n);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayStringNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	167	None	replace
1109	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
1110	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	167	3	replace
1111	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  arrayNode);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	167	None	replace
1112	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1113	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  right);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1114	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  oldStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n  =  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1115	[BUG]  [BUGGY]  n.removeChild(arrayStringNode.size());  [CE]  cannot  find  symbol  arrayStringNode  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayStringNode.size());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayStringNode.size());	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	61	None	replace
1116	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(arrayFoldedChildren.size());    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	61	3	replace
1117	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(arrayFoldedChildren.size());    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	61	3	replace
1118	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
1119	[BUG]  [BUGGY]  Node  n.getNext().replaceChild(n,  oldStringNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().replaceChild(n,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	81	None	replace
1120	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode));  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  ';'  expected	124	None	replace
1121	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1122	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev));  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  ';'  expected	124	None	replace
1123	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1124	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  n);	  n.getParent().replaceChild(parent,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	29	3	replace
1125	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  n);	  n.getParent().replaceChild(parent,    n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	29	3	replace
1126	[BUG]  [BUGGY]  n.getName().replaceChild(leftStringNode,  prev);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(leftStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(leftStringNode,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	134	None	replace
1127	[BUG]  [BUGGY]  n.getName().replaceChild(right,  prev);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(right,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(right,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1128	[BUG]  [BUGGY]  n.getName().replaceChild(last,  prev);  [CE]  cannot  find  symbol  last  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(last,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(last,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  last	134	None	replace
1129	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  cannot  find  symbol  parent  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  cannot  find  symbol  parent	110	None	replace
1130	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  n;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  cannot  find  symbol  node	110	None	replace
1131	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	115	None	add
1132	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	115	None	add
1133	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
1134	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
1135	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
1136	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	115	3	add
1137	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getNext().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(prev,    emptyStringNode);    n.getNext().replaceChild(prev,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
1138	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getNext().replaceChild(prev,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getNext().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getNext().replaceChild(prev,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	96	3	add
1139	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().replaceChild(parent,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	96	None	add
1140	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  node.getParent().replaceChild(prev,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  node.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    node.getParent().replaceChild(prev,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	96	None	add
1141	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	170	None	replace
1142	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
1143	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	170	None	replace
1144	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  n);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  n);	  n.getNext().replaceChild(arrayNode,    n);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	158	None	replace
1145	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  foldedStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	92	None	replace
1146	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	92	None	replace
1147	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  null);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  null);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  null);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	92	None	replace
1148	[BUG]  [BUGGY]  node.getNext().removeChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().removeChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	83	None	replace
1149	[BUG]  [BUGGY]  Node  n.getNext().removeChild(n);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().removeChild(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().removeChild(n);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
1150	[BUG]  [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	117	None	replace
1151	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  n);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1152	[BUG]  [BUGGY]  NodeUtil.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1153	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1154	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getName().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getName().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getName().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
1155	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1156	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1157	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	35	None	add
1158	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	88	3	replace
1159	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  null);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	88	3	replace
1160	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  node);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	88	None	replace
1161	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  oldStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	88	None	replace
1162	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(equivalentStringNode);  [CE]  cannot  find  symbol  equivalentStringNode  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(equivalentStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(equivalentStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  equivalentStringNode	78	None	replace
1163	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(new  StringBuilder(prev));  [CE]  no  suitable  constructor  found  for  StringBuilder(Node)  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(new  StringBuilder(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(new  StringBuilder(prev));	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuilder(Node)	78	None	replace
1164	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(new  StringBuffer(prev));  [CE]  no  suitable  constructor  found  for  StringBuffer(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(new  StringBuffer(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(new  StringBuffer(prev));	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  no  suitable  constructor  found  for  StringBuffer(Node)	78	None	replace
1165	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
1166	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
1167	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ").removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ").removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ").removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
1168	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  node.removeChild(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  node.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  node.removeChild(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
1169	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ").replaceChild(n,  emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  emptyStringNode  =  Node.newString( "   ").replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  emptyStringNode  =  Node.newString( "   ").replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	19	None	add
1170	[BUG]  [BUGGY]  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	160	None	replace
1171	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  parent.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  parent.replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
1172	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode,  originalSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  emptyStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  emptyStringNode,  originalSize);	  n.getParent().replaceChild(fillingStringNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	14	None	replace
1173	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  n,  originalSize);  [CE]  cannot  find  symbol  oldStringNode  [FE]                              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(oldStringNode,  n,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  n,  originalSize);	  n.getParent().replaceChild(fillingStringNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	14	None	replace
1174	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren,  prev);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	150	None	replace
1175	[BUG]  [BUGGY]  n.removeChild(prev,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(prev,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(prev,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	150	None	replace
1176	[BUG]  [BUGGY]  n.removeChild(expandStringNode);  [CE]  cannot  find  symbol  expandStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(expandStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(expandStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  expandStringNode	17	None	replace
1177	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  parent.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
1178	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
1179	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  node.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  node.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
1180	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  arrayFoldedChildren.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
1181	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  node	111	None	replace
1182	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(parent,  n);  [CE]  cannot  find  symbol  parent  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(parent,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(parent,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	111	None	replace
1183	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild  [CE]  not  a  statement  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  not  a  statement	111	None	replace
1184	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
1185	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
1186	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
1187	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1188	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1189	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Node.newString(Token.NAME,  emptyStringNode));  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Node.newString(Token.NAME,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Node.newString(Token.NAME,  emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	119	None	replace
1190	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  leftStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	159	None	replace
1191	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  oldStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	159	None	replace
1192	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedChildren.size();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedChildren.size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedChildren.size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  ';'  expected	163	None	replace
1193	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedNode.size();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedNode.size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedNode.size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  ';'  expected	163	None	replace
1194	[BUG]  [BUGGY]  parent.getParent().replaceChild(parent,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getParent().replaceChild(parent,  emptyStringNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
1195	[BUG]  [BUGGY]  parents.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parents  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parents.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parents.getParent().replaceChild(n,  emptyStringNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parents	27	None	replace
1196	[BUG]  [BUGGY]  parent.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.getParent().replaceChild(n,  arrayFoldedNode);	  parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	27	None	replace
1197	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  nextNode);  [CE]  cannot  find  symbol  nextNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  nextNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  nextNode);	  n.getParent().replaceChild(emptyStringNode,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  nextNode	145	None	replace
1198	[BUG]  [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	180	None	replace
1199	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [CE]  not  a  statement  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  not  a  statement	180	None	replace
1200	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode  [CE]  ')'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	180	None	replace
1201	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent,  emptyStringNode,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent,  emptyStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent,  emptyStringNode,  foldedSize);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	47	None	replace
1202	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  leftStringNode);	  n.getParent().replaceChild(n,    emptyStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	47	None	replace
1203	[BUG]  [BUGGY]  n.getParent().replaceChild(oldStringNode,  leftStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(oldStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(oldStringNode,  leftStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	99	None	replace
1204	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
1205	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
1206	[BUG]  [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()  ==  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ';'  expected	127	None	replace
1207	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChil	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ';'  expected	127	None	replace
1208	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  node);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  node);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  node);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	113	None	add
1209	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1210	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1211	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getPrevious().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getPrevious().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getPrevious().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	113	None	add
1212	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  false);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  false);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  false);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	113	None	add
1213	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1214	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1215	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(emptyStringNode);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedChildren.get(emptyStringNode);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
1216	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	107	3	add
1217	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  RuntimeException  	107	3	add
1218	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getLast().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getLast().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getLast().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	107	None	add
1219	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	107	None	add
1220	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	107	None	add
1221	[BUG]  [BUGGY]  n.removeParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	156	None	replace
1222	[BUG]  [BUGGY]  n.removeParent().replaceChild(emptyStringNode,  arrayNode);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeParent().replaceChild(emptyStringNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeParent().replaceChild(emptyStringNode,  arrayNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1223	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1224	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1225	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1226	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1227	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	139	None	add
1228	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol	139	None	add
1229	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  prev);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1230	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  arrayNode);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1231	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(parent,  emptyStringNode);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(parent,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(parent,  emptyStringNode);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1232	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  arrayFoldedNode);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1233	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	120	None	replace
1234	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  ROOT_LOCALE);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	120	None	replace
1235	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  EMPTY_STRING);  [CE]  cannot  find  symbol  EMPTY_STRING  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  cannot  find  symbol  EMPTY_STRING	120	None	replace
1236	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n.getParent().replaceChild(arrayNode,  prev);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  ';'  expected	100	None	add
1237	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1238	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1239	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.get(prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.get(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  arrayFoldedChildren.get(prev);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1240	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  arrayFoldedChildren.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1241	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  node.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  node.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1242	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev));  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().replaceChild(arrayNode,  prev));	  	non-compiled	[CE]  ';'  expected	100	None	add
1243	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node  n  =  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node  n  =  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
1244	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	153	3	add
1245	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	153	3	add
1246	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().removeChild(n,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().removeChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().removeChild(n,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	153	None	add
1247	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  return  n;  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(n,  emptyStringNode);  return  n;	  	non-compiled	[CE]  unreachable  statement	153	None	add
1248	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(r,  emptyStringNode);  [CE]  cannot  find  symbol  r  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(r,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(r,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  r	153	None	add
1249	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.NAME));  [CE]  cannot  find  symbol  arrayStringNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.NAME));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  new  Node(Token.NAME));	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	3	None	replace
1250	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.STRING));  [CE]  cannot  find  symbol  arrayStringNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  new  Node(Token.STRING));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  new  Node(Token.STRING));	  n.getParent().replaceChild(arrayStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	3	None	replace
1251	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  unreachable  statement	86	None	replace
1252	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  unreachable  statement	86	None	replace
1253	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  unreachable  statement	86	None	replace
1254	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
1255	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	69	3	replace
1256	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  sb,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  sb,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  sb,  emptyStringNode);	  n.getParent().replaceChild(sb,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	98	None	replace
1257	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  incompatible  types	72	None	replace
1258	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldParent  =  n.getParent();  n.getParent().replaceChild(n,  oldParent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  oldParent  =  n.getParent();  n.getParent().replaceChild(n,  oldParent);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	72	3	replace
1259	[BUG]  [BUGGY]  Node  oldParent  =  n.getParent();  n.getParent().replaceChild(n,  oldParent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldParent  =  n.getParent();  n.getParent().replaceChild(n,  oldParent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldParent  =  n.getParent();  n.getParent().replaceChild(n,  oldParent);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	72	3	replace
1260	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
1261	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1262	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1263	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getPrevious().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
1264	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1265	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1266	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNumber().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNumber().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNumber().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
1267	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1268	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	79	3	add
1269	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  arrayNode,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  arrayNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  arrayNode,  foldedSize);	  n.getParent().replaceChild(arrayNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	21	None	replace
1270	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
1271	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
1272	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
1273	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	114	3	replace
1274	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  new  String(prev));	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	114	None	replace
1275	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  nextNode);  [CE]  cannot  find  symbol  nextNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  nextNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  nextNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  nextNode	114	None	replace
1276	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  node.getFirstChild().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  node.getFirstChild().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    node.getFirstChild().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  node	135	None	add
1277	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node  n  =  n.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	135	None	add
1278	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
1279	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	135	3	add
1280	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  prev));  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  prev));	  	non-compiled	[CE]  ';'  expected	135	None	add
1281	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(oldStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  oldStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(oldStringNode,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	replace
1282	[BUG]  [BUGGY]  Node  oldStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(oldStringNode,  oldStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(oldStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(oldStringNode,  oldStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	replace
1283	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  leftStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  leftStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  leftStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	replace
1284	[BUG]  [BUGGY]  Node  leftStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  leftStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  leftStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  leftStringNode  =  Node.newString( "   ");  n.getNext().replaceChild(n,  leftStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    emptyStringNode    =    Node.newString(   "       ");    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	84	3	replace
1285	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  n.getParent();  parent.replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	123	3	replace
1286	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent();  parent.replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	123	3	replace
1287	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  this,  leftStringNode);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	1	None	replace
1288	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	157	3	add
1289	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	157	3	add
1290	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  node.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  node.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  node.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
1291	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	157	None	add
1292	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  node.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  node.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  node.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
1293	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  prev);	  n.getParent().replaceChild(arrayStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	168	None	replace
1294	[BUG]  [BUGGY]  n.getParent().replaceChild(parent,  callTarget,  this);  [CE]  cannot  find  symbol  parent  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(parent,  callTarget,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(parent,  callTarget,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
1295	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  leftStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	161	None	replace
1296	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  oldStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	161	None	replace
1297	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
1298	[BUG]  [BUGGY]  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
1299	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(arrayStringNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(arrayStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
1300	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(oldStringNode);  [CE]  ';'  expected  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev);  Node  n.getParent().removeChild(oldStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
1301	[BUG]  [BUGGY]  Node  n.getParent().removeChild(arrayStringNode);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().removeChild(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().removeChild(arrayStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	42	None	replace
1302	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	151	None	add
1303	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getFirst().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getFirst().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getFirst().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
1304	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	151	3	add
1305	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	151	3	add
1306	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  n;  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  n;	  	non-compiled	[CE]  unreachable  statement	151	None	add
1307	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode));  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode));	  	non-compiled	[CE]  ';'  expected	151	None	add
1308	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  return  null;	  	non-compiled	[CE]  unreachable  statement	151	None	add
1309	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(emptyStringNode,  n);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
1310	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(emptyStringNode,  n);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
1311	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(arrayStringNode,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	154	None	replace
1312	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  oldStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	154	None	replace
1313	[BUG]  [BUGGY]  n.getParentNode().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	56	None	replace
1314	[BUG]  [BUGGY]  n.getNextNode().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNextNode().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNextNode().replaceChild(emptyStringNode,  n);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1315	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  Node.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  Node.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
1316	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	24	None	add
1317	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  NodeUtil.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  NodeUtil.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  NodeUtil.newString(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
1318	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  NodeUtil.newNumber(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  NodeUtil.newNumber(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  NodeUtil.newNumber(callTarget);  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
1319	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  node.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  node.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().replaceChild(callTarget,  emptyStringNode);  node.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	24	None	add
1320	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER  ERROR:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  [CE]  :  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER  ERROR:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    n.getParent().replaceChild(callTarget,  emptyStringNode);  case  INTERNAL  COMPILER  ERROR:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.	  	non-compiled	[CE]  :  expected	24	None	add
1321	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  null);	  n.getParent().replaceChild(emptyStringNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
1322	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  null);	  n.getParent().replaceChild(emptyStringNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
1323	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  arrayFoldedNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	8	None	replace
1324	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,  arrayNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	152	3	replace
1325	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  arrayNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	152	3	replace
1326	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  emptyStringNode  =  Node.newString(emptyStringNode);  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	50	None	add
1327	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  node	50	None	add
1328	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  ';'  expected	50	None	add
1329	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  node.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    node.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  node	50	None	add
1330	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  parent.replaceChild(emptyStringNode,  n);  [CE]  cannot  find  symbol  parent  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n);  parent.replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  n);  parent.replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  parent	50	None	add
1331	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  emptyStringNode  =  Node.newString(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  emptyStringNode  =  Node.newString(emptyStringNode);	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	50	None	add
1332	[BUG]  [BUGGY]  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  emptyStringNode.getFirstChild();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	replace
1333	[BUG]  [BUGGY]  Node  emptyStringNode  =  emptyStringNode.cloneTree();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  emptyStringNode.cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  emptyStringNode.cloneTree();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	replace
1334	[BUG]  [BUGGY]  Node  emptyStringNode  =  emptyStringNode.getNext();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  emptyStringNode  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  emptyStringNode  =  emptyStringNode.getNext();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	131	None	replace
1335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(n);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	compilable	  [FE]  AssertionFailedError  	131	3	replace
1336	[BUG]  [BUGGY]  arrayFoldedChildren.add(n);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(n);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	compilable	  [FE]  AssertionFailedError  	131	3	replace
1337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldParent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  oldParent  =  n.getParent();	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  AssertionFailedError  	67	3	replace
1338	[BUG]  [BUGGY]  Node  oldParent  =  n.getParent();  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldParent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldParent  =  n.getParent();	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  AssertionFailedError  	67	3	replace
1339	[BUG]  [BUGGY]  n.getNext().removeChild(emptyStringNode,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode,  arrayFoldedChildren);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(emptyStringNode,  arrayFoldedChildren);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	82	None	replace
1340	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getFirst().replaceChild(emptyStringNode,  prev);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getFirst().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getFirst().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  cannot  find  symbol	148	None	add
1341	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n.getNext().replaceChild(emptyStringNode,  prev);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  n.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  ';'  expected	148	None	add
1342	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(emptyStringNode,    prev);    n.getParent().replaceChild(emptyStringNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	148	3	add
1343	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(emptyStringNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getParent().replaceChild(emptyStringNode,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	148	3	add
1344	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  Prev.newInstance());  [CE]  cannot  find  symbol  Prev  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  Prev.newInstance());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  Prev.newInstance());	  	non-compiled	[CE]  cannot  find  symbol  Prev	148	None	add
1345	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev);  return  n;  [CE]  unreachable  statement  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev);  return  n;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  prev);  return  n;	  	non-compiled	[CE]  unreachable  statement	148	None	add
1346	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev));  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  prev));	  	non-compiled	[CE]  ';'  expected	148	None	add
1347	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  Prev.newNumber(0));  [CE]  cannot  find  symbol  Prev  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  n.getNext().replaceChild(emptyStringNode,  Prev.newNumber(0));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    n.getNext().replaceChild(emptyStringNode,  Prev.newNumber(0));	  	non-compiled	[CE]  cannot  find  symbol  Prev	148	None	add
1348	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1349	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  parent.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1350	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1351	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  node.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  node.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  node.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1352	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(arrayNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  n  =  arrayFoldedChildren.get(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  n  =  arrayFoldedChildren.get(arrayNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1353	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  initialSize);  [CE]  cannot  find  symbol  initialSize  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  initialSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  initialSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  initialSize	169	None	replace
1354	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  leftStringNode,  originalSize);  [CE]  cannot  find  symbol  leftStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  leftStringNode,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  leftStringNode,  originalSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	169	None	replace
1355	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  oldSize);  [CE]  cannot  find  symbol  oldSize  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode,  oldSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode,  oldSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  oldSize	169	None	replace
1356	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  originalSize,  n);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	169	None	replace
1357	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  prev);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1358	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  prev);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1359	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1360	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1361	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	108	None	replace
1362	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  orphaned  case	130	None	replace
1363	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent,  foldedSize);  [CE]  cannot  find  symbol  parent  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent,  foldedSize);	  n.getParent().replaceChild(parent,    n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  parent	53	None	replace
1364	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    Node  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	66	None	add
1365	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  Prev  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  Prev	66	None	add
1366	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1367	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1368	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  lenStringNode);  [CE]  cannot  find  symbol  lenStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  lenStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  lenStringNode);	  	non-compiled	[CE]  cannot  find  symbol  lenStringNode	66	None	add
1369	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1370	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	66	3	add
1371	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.FUNCTION));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  new  Node(Token.FUNCTION));	  n.getParent().replaceChild(arrayNode,    parent);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	175	3	replace
1372	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.FUNCTION));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.FUNCTION));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  new  Node(Token.FUNCTION));	  n.getParent().replaceChild(arrayNode,    parent);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	175	3	replace
1373	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  Node  n  =  n.getNext();	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	93	None	replace
1374	[BUG]  [BUGGY]  n.getName().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1375	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
1376	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	64	3	replace
1377	[BUG]  [BUGGY]  n.getNext().removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(arrayStringNode);	  n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	33	None	replace
1378	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1379	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1380	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1381	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1382	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1383	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	140	3	replace
1384	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild().cloneTree();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
1385	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().getNext();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild().getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild().getNext();	  Node    arrayFoldedChildren    =    n.getFirstChild();    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	60	None	replace
1386	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuild  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuild	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  '('  or  '['  expected	127	None	replace
1387	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(n.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(n.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
1388	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
1389	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	127	None	replace
1390	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	67	3	replace
1391	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	67	3	replace
1392	[BUG]  [BUGGY]  Node  right  =  n.getParent();  n.getParent().replaceChild(right,  emptyStringNode);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent();  n.getParent().replaceChild(right,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent();  n.getParent().replaceChild(right,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	67	None	replace
1393	[BUG]  [BUGGY]  Node  right  =  n.getParent();  n.getParent().replaceChild(n,  right);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent();  n.getParent().replaceChild(n,  right);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent();  n.getParent().replaceChild(n,  right);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	67	None	replace
1394	[BUG]  [BUGGY]  int  kJoinOverhead  =  sb.size();  kJoinOverhead++;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  sb.size();  kJoinOverhead++;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  sb.size();  kJoinOverhead++;	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.addChildToFront(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.addChildToFront(emptyStringNode);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	compilable	  [FE]  AssertionFailedError  	131	3	replace
1396	[BUG]  [BUGGY]  n.addChildToFront(emptyStringNode);  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.addChildToFront(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.addChildToFront(emptyStringNode);	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	compilable	  [FE]  AssertionFailedError  	131	3	replace
1397	[BUG]  [BUGGY]  int  kJoinOverhead  =  sb.size();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  sb.size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  sb.size();	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(n);    }    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1398	[BUG]  [BUGGY]  n.getName().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1399	[BUG]  [BUGGY]  n.getName().replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayFoldedNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	15	None	replace
1400	[BUG]  [BUGGY]  n.getName().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(emptyStringNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1401	[BUG]  [BUGGY]  n.replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.replaceChild(arrayStringNode,  emptyStringNode);	  n.getName().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	15	None	replace
1402	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  Predicates  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  Predicates	173	None	replace
1403	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	173	None	replace
1404	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  cannot  find  symbol  node	173	None	replace
1405	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode());	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode());    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	173	None	replace
1406	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedSize,  originalSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldedNode,  foldedSize,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldedNode,  foldedSize,  originalSize);	  n.getParent().replaceChild(emptyStringNode,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	11	None	replace
1407	[BUG]  [BUGGY]  n.getParent().replaceChild(argumentNode,  callTarget,  this);  [CE]  cannot  find  symbol  argumentNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(argumentNode,  callTarget,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(argumentNode,  callTarget,  this);	  n.getParent().replaceChild(callTarget,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  argumentNode	4	None	replace
1408	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node  n.removeChild(emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node  n.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node  n.removeChild(emptyStringNode);	  	non-compiled	[CE]  ';'  expected	19	None	add
1409	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  Node.removeChild(emptyStringNode);  [CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(emptyStringNode);  Node.removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(emptyStringNode);    Node.removeChild(emptyStringNode);	  	non-compiled	[CE]  non-static  method  removeChild(Node)  cannot  be  referenced  from  a  static  context	19	None	add
1410	[BUG]  [BUGGY]  arrayNode.removeParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayNode.removeParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayNode.removeParent().replaceChild(n,  emptyStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1411	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.replaceChild(arrayNode,  emptyStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	156	3	replace
1412	[BUG]  [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.replaceChild(arrayNode,  emptyStringNode);	  n.removeParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	156	3	replace
1413	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1414	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.removeChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.removeChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1415	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [CE]  illegal  start  of  expression  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1416	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	120	None	replace
1417	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  left.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  prev);  left.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  prev);  left.getParent().replaceChild(n,  Preconditions.EMPTY_STRING);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.EMPTY_STRING);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	120	None	replace
1418	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  oldStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  oldStringNode);	  n.getParent().replaceChild(arrayStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	48	None	replace
1419	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  node.getNext().replaceChild(arrayNode,  n);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  node.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    node.getNext().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  node	157	None	add
1420	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  n.getNext().replaceChild(arrayNode,  n);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node  n  =  n.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node  n  =  n.getNext().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	157	None	add
1421	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node.getNext().replaceChild(arrayNode,  n);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  Node.getNext().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    Node.getNext().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	157	None	add
1422	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n).replaceChild(leftStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n).replaceChild(leftStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  n).replaceChild(leftStringNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  leftStringNode	157	None	add
1423	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n).replaceChild(  emptyStringNode,  n);  [CE]  void  cannot  be  dereferenced  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  n);  n.getNext().replaceChild(arrayNode,  n).replaceChild(  emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    n);    n.getNext().replaceChild(arrayNode,  n).replaceChild(  emptyStringNode,  n);	  	non-compiled	[CE]  void  cannot  be  dereferenced	157	None	add
1424	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  n);  [CE]  cannot  find  symbol  arrayFoldingNode  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldingNode,  n);	  n.getParent().replaceChild(filledStringNode,    n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldingNode	52	None	replace
1425	[BUG]  [BUGGY]  Node  parent  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    parent);    	non-compiled	[CE]  incompatible  types	175	None	replace
1426	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME));	  n.getParent().replaceChild(arrayNode,    parent);    	compilable	  [FE]  RuntimeException  	175	3	replace
1427	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME));  [FE]  RuntimeException  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME));	  n.getParent().replaceChild(arrayNode,    parent);    	compilable	  [FE]  RuntimeException  	175	3	replace
1428	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	107	None	add
1429	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
1430	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getNext().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	107	3	add
1431	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(n.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb.toString()	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
1432	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.FUNCTION)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  sb.size();  kJoinOverhead++)  {  arrayFoldedChildren.add(new  StringBuilder(sb	          if(emptyStringNode.getType()    ==    Token.FUNCTION)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.add(new    StringBuilder(sb.toString()    	non-compiled	[CE]  ')'  expected	143	None	replace
1433	[BUG]  [BUGGY]  n.getParent().replaceChild(preferredStringNode,  foldedSize);  [CE]  cannot  find  symbol  preferredStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(preferredStringNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(preferredStringNode,  foldedSize);	  n.getParent().replaceChild(oldStringNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  preferredStringNode	142	None	replace
1434	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  parent  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
1435	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  parent  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  parent);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
1436	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  parent  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  parent);  Node  parent  =  n.getParent();	  n.getParent().replaceChild(n,    arrayNode);    Node    parent    =    n.getParent();    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
1437	[BUG]  [BUGGY]  n.getNext().removeChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(arrayFoldedNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	82	None	replace
1438	[BUG]  [BUGGY]  n.getNext().removeChild(emptyStringNode,  leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().removeChild(emptyStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().removeChild(emptyStringNode,  leftStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	82	None	replace
1439	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  oldSize);  [CE]  cannot  find  symbol  arrayStringNode  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayStringNode,  n,  oldSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayStringNode,  n,  oldSize);	  n.getParent().replaceChild(fillingStringNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	14	None	replace
1440	[BUG]  [BUGGY]  Node  oldPosition  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldPosition  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldPosition  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  incompatible  types	72	None	replace
1441	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  incompatible  types	72	None	replace
1442	[BUG]  [BUGGY]  Node  oldParent  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldParent  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldParent  =  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  incompatible  types	72	None	replace
1443	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x= " ".join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    prev);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x= " ".join( "  	101	3	replace
1444	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  emptyStringNode);  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x= " ".join( "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    prev);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x= " "  Result:  x= " ".join( "  	101	3	replace
1445	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(arrayNode,  prev);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    prev);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	101	None	replace
1446	[BUG]  [BUGGY]  n.getName().replaceChild(arrayNode,  prev);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayNode,  prev);	  n.getParent().replaceChild(arrayNode,    prev);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1447	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldingNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldingNode,  emptyStringNode);	  n.getParent().replaceChild(arrayStringNode,    leftStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldingNode	99	None	replace
1448	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	180	3	replace
1449	[BUG]  [BUGGY]  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	InlineCostEstimator.getCost(n.getNext());  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getNext());    n.getNext().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	180	3	replace
1450	[BUG]  [BUGGY]  node.getParent().replaceChild(arrayNode,  n);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(n,    arrayNode);    node.getParent().removeChild(arrayNode);    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
1451	[BUG]  [BUGGY]  arrayFoldedChildren.remove(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.remove(arrayFoldedNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	62	None	replace
1452	[BUG]  [BUGGY]  arrayFoldedChildren.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.removeChild(arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.removeChild(arrayFoldedNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	62	None	replace
1453	[BUG]  [BUGGY]  arrayFoldedChildren.removeChild(arrayNode);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.removeChild(arrayNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
1454	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	130	3	replace
1455	[BUG]  [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	130	3	replace
1456	[BUG]  [BUGGY]  arrayFoldedChildren.add(new  Node(sb.toString()).copyInformationFrom(prev));  [CE]  no  suitable  constructor  found  for  Node(String)  [FE]                AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(new  Node(sb.toString()).copyInformationFrom(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(new  Node(sb.toString()).copyInformationFrom(prev));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(String)	130	None	replace
1457	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayFoldedChildren.add(Node.newString(sb.toString()));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	130	3	replace
1458	[BUG]  [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.add(Node.newString(sb.toString()));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.add(Node.newString(sb.toString()));	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    arrayFoldedChildren.remove(    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	130	3	replace
1459	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode  [CE]  ')'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getNext().replaceChild(n,  emptyStringNode	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	177	None	replace
1460	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayStringNode,  leftStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayStringNode,  leftStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayStringNode,  leftStringNode);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	146	None	replace
1461	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayFoldedNode,  emptyStringNode);	  n.getNext().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	146	None	replace
1462	[BUG]  [BUGGY]  n.addChildToFront(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.addChildToFront(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.addChildToFront(arrayStringNode);	  n.removeChild(emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	20	None	replace
1463	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  ';'  expected	94	None	replace
1464	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(emptyStringNode,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1465	[BUG]  [BUGGY]  n.getGrandparent().replaceChild(array,  emptyStringNode);  [CE]  cannot  find  symbol  array  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getGrandparent().replaceChild(array,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getGrandparent().replaceChild(array,  emptyStringNode);	  n.getGrandparent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  array	133	None	replace
1466	[BUG]  [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);	  n.getParent().replaceChild(callTarget,    emptyStringNode);    	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	replace
1467	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	164	None	replace
1468	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	164	None	replace
1469	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	164	None	replace
1470	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	116	3	replace
1471	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	116	3	replace
1472	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	116	3	replace
1473	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  null);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	116	3	replace
1474	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedParent.size();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedParent.size();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n),  arrayFoldedParent.size();	          int    kJoinOverhead    =    InlineCostEstimator.getCost(n).size();    	non-compiled	[CE]  ';'  expected	163	None	replace
1475	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	79	None	add
1476	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().removeChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().removeChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	79	None	add
1477	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  incompatible  types  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  incompatible  types	50	None	add
1478	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node.getParent().replaceChild(emptyStringNode,  n);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	50	None	add
1479	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n  =  n.getParent().replaceChild(emptyStringNode,  n);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  Node  n  =  n.getParent().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    Node  n  =  n.getParent().replaceChild(emptyStringNode,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	50	None	add
1480	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n));  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  n);  n.getParent().replaceChild(emptyStringNode,  n));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    n);    n.getParent().replaceChild(emptyStringNode,  n));	  	non-compiled	[CE]  ';'  expected	50	None	add
1481	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  n.getParent().replaceChild(arrayNode,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n  =  n.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n  =  n.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	100	None	add
1482	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  cannot  find  symbol  node	100	None	add
1483	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [CE]  ';'  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  ';'  expected	100	None	add
1484	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [CE]  cannot  find  symbol  node  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  node.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    node.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  cannot  find  symbol  node	100	None	add
1485	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node.getParent().replaceChild(arrayNode,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node.getParent().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node.getParent().replaceChild(arrayNode,  prev);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	100	None	add
1486	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    prev);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
1487	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  prev);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    prev);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	100	3	add
1488	[BUG]  [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  cannot  find  symbol  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1489	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [CE]  unreachable  statement  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  return  null;	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    return    null;    	non-compiled	[CE]  unreachable  statement	86	None	replace
1490	[BUG]  [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1491	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  PARENT);  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  PARENT  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  PARENT);  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  PARENT);  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  PARENT	80	None	replace
1492	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1493	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1494	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [CE]  cannot  find  symbol  parent  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	35	None	add
1495	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1496	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1497	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1498	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	35	3	add
1499	[BUG]  [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  callTarget  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  callTarget  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	111	None	replace
1500	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  node);  [CE]  cannot  find  symbol  node  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  node);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  node);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  node	111	None	replace
1501	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(last,  n);  [CE]  cannot  find  symbol  last  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(last,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(last,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  last	111	None	replace
1502	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parent);  [CE]  cannot  find  symbol  parent  [FE]                        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  emptyStringNode).replaceChild(callTarget,  parent);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(callTarget,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	111	None	replace
1503	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	151	None	add
1504	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  node.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  node.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    node.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	151	None	add
1505	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    Node  n  =  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
1506	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,    emptyStringNode);    int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	151	None	add
1507	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return;  [CE]  missing  return  value  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  missing  return  value	110	None	replace
1508	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  this;  [CE]  incompatible  types  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  this;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  return  this;	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    return    n;    	non-compiled	[CE]  incompatible  types	110	None	replace
1509	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  node	92	None	replace
1510	[BUG]  [BUGGY]  parent.replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  parent.replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	parent.replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(arrayStringNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayStringNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	92	None	replace
1511	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME,  emptyStringNode));	  n.getParent().replaceChild(arrayNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	104	3	replace
1512	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME,  emptyStringNode));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  new  Node(Token.NAME,  emptyStringNode));	  n.getParent().replaceChild(arrayNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	104	3	replace
1513	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.STRING,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  new  Node(Token.STRING,  emptyStringNode));	  n.getParent().replaceChild(arrayNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	104	3	replace
1514	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.STRING,  emptyStringNode));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  new  Node(Token.STRING,  emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  new  Node(Token.STRING,  emptyStringNode));	  n.getParent().replaceChild(arrayNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	104	3	replace
1515	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);  [CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldArrayJoin(Node)	90	None	replace
1516	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().removeChild(arrayNode,  right,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
1517	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  arrayNode  =  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	32	None	add
1518	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node.getParent().removeChild(arrayNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	32	None	add
1519	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
1520	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();  n.getParent().removeChild(arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
1521	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();  n.getParent().removeChild(parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
1522	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(parent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  Node  parent  =  n.getParent();  n.getParent().removeChild(parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    Node  parent  =  n.getParent();  n.getParent().removeChild(parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	32	3	add
1523	[BUG]  [BUGGY]  n.getParent().removeChild(arrayNode);  node.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().removeChild(arrayNode);  node.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().removeChild(arrayNode);    node.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  node	32	None	add
1524	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(inempteStringNode);  [CE]  cannot  find  symbol  inempteStringNode  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(inempteStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(inempteStringNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  inempteStringNode	78	None	replace
1525	[BUG]  [BUGGY]  sb.toString().copyInformationFrom(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  sb.toString().copyInformationFrom(arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	sb.toString().copyInformationFrom(arrayFoldedNode);	          sb.toString().copyInformationFrom(prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	78	None	replace
1526	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  2);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  2);	  n.removeChild(arrayFoldedChildren.size());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	61	None	replace
1527	[BUG]  [BUGGY]  Node  n  =  parent.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  parent.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  parent.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1528	[BUG]  [BUGGY]  Node  n  =  node.getParent().replaceChild(n,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1529	[BUG]  [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  oldStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  n.getParent().replaceChild(n,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  n.getParent().replaceChild(n,  oldStringNode);	  n.getParent().replaceChild(n,    prev);    Node    n    =    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	171	None	replace
1530	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  node.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
1531	[BUG]  [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  n);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getParent().replaceChild(arrayNode,  n);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	89	None	replace
1532	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  nestingStringNode);  [CE]  cannot  find  symbol  nestingStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  nestingStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  nestingStringNode);	  n.getParent().replaceChild(arrayNode,    nextNode);    	non-compiled	[CE]  cannot  find  symbol  nestingStringNode	174	None	replace
1533	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	87	None	add
1534	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode));  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode));  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,        emptyStringNode);        n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,  emptyStringNode));  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	87	None	add
1535	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  emptyStringNode.removeFirstChild();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  emptyStringNode.removeFirstChild();	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	43	None	replace
1536	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  node.getParent();  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  node.getParent();  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  node.getParent();  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
1537	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    Node  callTarget  =  n.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  variable  callTarget  is  already  defined  in  method  tryFoldArrayJoin(Node)	24	None	add
1538	[BUG]  [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  node.getParent().replaceChild(callTarget,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(callTarget,  emptyStringNode);  node.getParent().replaceChild(callTarget,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(callTarget,    emptyStringNode);    node.getParent().replaceChild(callTarget,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	24	None	add
1539	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode  [CE]  ')'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  parent.replaceChild(arrayNode,  emptyStringNode	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    parent.replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	109	None	replace
1540	[BUG]  [BUGGY]  Node  n.getNext().removeChild(emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n.getNext().removeChild(emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n.getNext().removeChild(emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    Node    n.getNext().removeChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	83	None	replace
1541	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().replaceChild(arrayNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
1542	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(arrayNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	136	3	replace
1543	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(arrayFoldedNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(arrayFoldedNode,  prev);	  n.getFirstChild().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	136	None	replace
1544	[BUG]  [BUGGY]  arrayFoldedChildren.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.getParent().replaceChild(n,  emptyStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1545	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  emptyStringNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	emptyStringNode.getParent().replaceChild(n,  emptyStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	replace
1546	[BUG]  [BUGGY]  emptyStringNode.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  emptyStringNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	emptyStringNode.getParent().replaceChild(n,  emptyStringNode);	  node.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	8	3	replace
1547	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayPoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayPoldedNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayPoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayPoldedNode,  emptyStringNode);	  n.getParent().replaceChild(arrayFoldedNode,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayPoldedNode	176	None	replace
1548	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getNext().replaceChild(n,    prev);    Node  n.getParent().replaceChild(n,  prev);  n.getNext().replaceChild(n,  prev);	  	non-compiled	[CE]  ';'  expected	121	None	add
1549	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().removeChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n.getParent().removeChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	91	None	replace
1550	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  oldStringNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	152	None	replace
1551	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayNode,  nextNode);  [CE]  cannot  find  symbol  nextNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayNode,  nextNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayNode,  nextNode);	  n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  nextNode	152	None	replace
1552	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  parent);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	106	3	replace
1553	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  parent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent  =  n.getParent();  parent.replaceChild(arrayNode,  parent);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    node.getParent().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	106	3	replace
1554	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  Prev  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  Prev	66	None	add
1555	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	66	None	add
1556	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode).replaceChild(n,  prev);  [CE]  void  cannot  be  dereferenced  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode).replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  emptyStringNode).replaceChild(n,  prev);	  	non-compiled	[CE]  void  cannot  be  dereferenced	66	None	add
1557	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  originalSize,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  originalSize,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	118	None	replace
1558	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  node.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    node.getParent().replaceChild(n,  arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  node	40	None	add
1559	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(parent,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	40	None	add
1560	[BUG]  [BUGGY]  n.getParent().replaceChild(array,  emptyStringNode);  [CE]  cannot  find  symbol  array  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(array,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(array,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  array	7	None	replace
1561	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  prev);  Node  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  ';'  expected	65	None	replace
1562	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    n.getNext().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	122	None	replace
1563	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  this,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,  this,  emptyStringNode);	  n.getParent().replaceChild(emptyStringNode,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
1564	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	169	None	replace
1565	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  left,  originalSize);  [CE]  cannot  find  symbol  left  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  left,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  left,  originalSize);	  n.getParent().replaceChild(arrayNode,    n,    originalSize);    	non-compiled	[CE]  cannot  find  symbol  left	169	None	replace
1566	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n.getPrevious());  [CE]  cannot  find  symbol  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n.getPrevious());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  n.getPrevious());	  n.getNext().replaceChild(n,    emptyStringNode);    n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1567	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n  +  1);  [CE]  bad  operand  types  for  binary  operator  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n  +  1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n  +  1);	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	129	None	replace
1568	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n)-  1;  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n)-  1;  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n)-  1;	  int    kJoinOverhead    =    InlineCostEstimator.getCost(n);    	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	129	None	replace
1569	[BUG]  [BUGGY]  Node.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getNext().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getNext().replaceChild(emptyStringNode,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	85	None	replace
1570	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getNext().replaceChild(n,  emptyStringNode);  [CE]  incompatible  types  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getNext().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getNext().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    node.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  incompatible  types	85	None	replace
1571	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join('  [CE]  :  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join('  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join('	  	non-compiled	[CE]  :  expected	153	None	add
1572	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  n.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	153	None	add
1573	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join(  [CE]  :  expected  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join(  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    n.getFirstChild().replaceChild(n,  emptyStringNode);  case  INTERNAL  COMPILER:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node:  testcode:1:11  x  =  [].join(	  	non-compiled	[CE]  :  expected	153	None	add
1574	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node.getFirstChild().replaceChild(n,  emptyStringNode);  [CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  emptyStringNode);  Node.getFirstChild().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    emptyStringNode);    Node.getFirstChild().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context	153	None	add
1575	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getParent().replaceChild(n,    emptyStringNode);    Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	115	None	add
1576	[BUG]  [BUGGY]  n.getPrev().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(arrayNode,  emptyStringNode);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1577	[BUG]  [BUGGY]  n.getPrev().replaceChild(emptyStringNode,  prev);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrev().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrev().replaceChild(emptyStringNode,  prev);	  n.getPrev().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1578	[BUG]  [BUGGY]  Node  oldStringNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode.getParent().replaceChild(arrayNode,  emptyStringNode);	  Node    oldStringNode.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	6	None	replace
1579	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayFoldedNode);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	69	None	replace
1580	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(p);  [CE]  cannot  find  symbol  p  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(p);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(p);	  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  p	69	None	replace
1581	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);ArrayNode.getParent().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  ArrayNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    arrayNode.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);ArrayNode.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        arrayNode.getParent().replaceChild(n,    emptyStringNode);    n.getParent().replaceChild(n,  arrayNode);ArrayNode.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  ArrayNode	165	None	add
1582	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  this);  [CE]  cannot  find  symbol  arrayFoldingNode  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayFoldingNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayFoldingNode,  this);	  n.getParent().replaceChild(fillingStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldingNode	5	None	replace
1583	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  POJO_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  POJO_LOCALE  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  POJO_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  POJO_LOCALE);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  POJO_LOCALE	172	None	replace
1584	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  PROPERTY);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [CE]  cannot  find  symbol  PROPERTY  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  PROPERTY);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  PROPERTY);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Preconditions.PRIVATE);    	non-compiled	[CE]  cannot  find  symbol  PROPERTY	172	None	replace
1585	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [CE]  ';'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node  n.getParent().removeChild(prev);	  n.getParent().replaceChild(n,    prev);    Node    n.getParent().removeChild(prev);    	non-compiled	[CE]  ';'  expected	70	None	replace
1586	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	37	None	replace
1587	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);  [CE]  ';'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  Node  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    Node    n.getParent().replaceChild(n,    arrayNode);    	non-compiled	[CE]  ';'  expected	37	None	replace
1588	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  incompatible  types  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  incompatible  types	74	None	add
1589	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	74	None	add
1590	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  n  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  n  =  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	74	None	add
1591	[BUG]  [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  oldStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(emptyStringNode,  emptyStringNode);  Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(emptyStringNode,    emptyStringNode);    Node  oldStringNode  =  n.getParent().replaceChild(emptyStringNode,  oldStringNode);	  	non-compiled	[CE]  incompatible  types	74	None	add
1592	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1593	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1594	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [CE]  ';'  expected  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    Node  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);	  	non-compiled	[CE]  ';'  expected	113	None	add
1595	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1596	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  null);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	113	3	add
1597	[BUG]  [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(  emptyStringNode,  emptyStringNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,        emptyStringNode);        n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(  emptyStringNode,  new  String(prev));	  	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	113	None	add
1598	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  node.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  node.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    node.getParent().replaceChild(n,  prev);  n.getParent().removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  node	68	None	add
1599	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(prev);  [CE]  cannot  find  symbol  oldStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  oldStringNode);  n.getParent().removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	68	None	add
1600	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  PRIVATE  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  Preconditions.PRIVATE);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  Preconditions.PRIVATE);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  PRIVATE	68	None	add
1601	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  Preconditions.RELATIVE);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  RELATIVE  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().removeChild(prev);  n.getParent().replaceChild(n,  Preconditions.RELATIVE);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().removeChild(prev);    n.getParent().replaceChild(n,  Preconditions.RELATIVE);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  RELATIVE	68	None	add
1602	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	41	3	replace
1603	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  RuntimeException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	41	3	replace
1604	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	41	3	replace
1605	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	41	3	replace
1606	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getNext();  [CE]  cannot  find  symbol  next  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  next	71	None	replace
1607	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  parent);  Node  n  =  emptyStringNode.getNext();  [CE]  cannot  find  symbol  parent  [FE]                    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  parent);  Node  n  =  emptyStringNode.getNext();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  parent);  Node  n  =  emptyStringNode.getNext();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  parent	71	None	replace
1608	[BUG]  [BUGGY]  n.getNext().replaceChild(element,  emptyStringNode);  [CE]  cannot  find  symbol  element  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(element,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(element,  emptyStringNode);	  n.getNext().replaceChild(n,    oldStringNode);    	non-compiled	[CE]  cannot  find  symbol  element	147	None	replace
1609	[BUG]  [BUGGY]  arrayFoldedChildren.remove(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.remove(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.remove(arrayStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	17	None	replace
1610	[BUG]  [BUGGY]  arrayFoldedChildren.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayFoldedChildren.removeChild(arrayStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayFoldedChildren.removeChild(arrayStringNode);	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	17	None	replace
1611	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedParams.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedParams.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedParams.get(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
1612	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedPildren.get(0);  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  arrayFoldedChildren  =(Node)arrayFoldedPildren.get(0);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  arrayFoldedChildren  =(Node)arrayFoldedPildren.get(0);	  Node    arrayFoldedChildren    =(Node)arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	59	None	replace
1613	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  arrayFoldedNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode).replaceChild(arrayNode,  arrayFoldedNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode).replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	161	None	replace
1614	[BUG]  [BUGGY]  n.getParentNode().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParentNode().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParentNode().replaceChild(emptyStringNode,  emptyStringNode);	  n.getParentNode().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1615	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  foldedSize);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  foldedSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayFoldedNode,  foldedSize);	  n.getNext().replaceChild(n,    foldedSize);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	54	None	replace
1616	[BUG]  [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(arrayFoldedNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(arrayFoldedNode,  prev);	  n.getNext().replaceChild(emptyStringNode,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	149	None	replace
1617	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [CE]  incompatible  types  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);    	non-compiled	[CE]  incompatible  types	39	None	replace
1618	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
1619	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getParent().replaceChild(n,  arrayNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
1620	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
1621	[BUG]  [BUGGY]  n.removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayNode);  n.getParent().replaceChild(n,  emptyStringNode);	  n.getParent().replaceChild(n,    arrayNode);    n.getParent().replaceChild(n,    arrayNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	36	3	replace
1622	[BUG]  [BUGGY]  Node  oldPosition  =  n.getParent().replaceChild(n,  prev);  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldPosition  =  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldPosition  =  n.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  incompatible  types	123	None	replace
1623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	compilable	  [FE]  AssertionFailedError  	123	3	replace
1624	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [FE]  AssertionFailedError  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);	  n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,    prev);    	compilable	  [FE]  AssertionFailedError  	123	3	replace
1625	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  Prev  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  Prev);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  Prev	63	None	add
1626	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    node.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);	  	non-compiled	[CE]  cannot  find  symbol  node	63	None	add
1627	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Prev.newInstance(prev));  [CE]  cannot  find  symbol  Prev  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Prev.newInstance(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        prev);        n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,  prev);  n.getParent().replaceChild(n,  Prev.newInstance(prev));	  	non-compiled	[CE]  cannot  find  symbol  Prev	63	None	add
1628	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  null);	  n.getParent().replaceChild(arrayFoldedNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	155	3	replace
1629	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  null);	  n.getParent().replaceChild(arrayFoldedNode,    this);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	155	3	replace
1630	[BUG]  [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  incompatible  types  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  oldStringNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  oldStringNode  =  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    oldStringNode);    	non-compiled	[CE]  incompatible  types	102	None	replace
1631	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getParent();  [CE]  cannot  find  symbol  next  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  next);  Node  n  =  emptyStringNode.getParent();	  n.getParent().replaceChild(n,    prev);    Node    n    =    emptyStringNode.getParent();    	non-compiled	[CE]  cannot  find  symbol  next	73	None	replace
1632	[BUG]  [BUGGY]  n.getParent().replaceChild(node,  prev);  [CE]  cannot  find  symbol  node  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(node,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(node,  prev);	  n.getParent().replaceChild(parent,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
1633	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node.getNext().replaceChild(emptyStringNode,  prev);  [CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  non-static  method  getNext()  cannot  be  referenced  from  a  static  context	148	None	add
1634	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  oldStringNode  =  n.getNext().replaceChild(emptyStringNode,  prev);  [CE]  incompatible  types  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  oldStringNode  =  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  oldStringNode  =  n.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  incompatible  types	148	None	add
1635	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  n.getNext().replaceChild(emptyStringNode,  prev);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  n  =  n.getNext().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  n  =  n.getNext().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	148	None	add
1636	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  sb.toString().replaceChild(emptyStringNode,  prev);  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  prev);  Node  sb.toString().replaceChild(emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,    prev);    Node  sb.toString().replaceChild(emptyStringNode,  prev);	  	non-compiled	[CE]  ';'  expected	148	None	add
1637	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,  null);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1638	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  null);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  null);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	108	3	replace
1639	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  parent);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	108	None	replace
1640	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  oldStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  n.getNext().replaceChild(arrayNode,  oldStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	108	None	replace
1641	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  cr);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  cr  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  cr);  n.getNext().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  cr);  n.getNext().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getNext().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  cr	108	None	replace
1642	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getLastChild().replaceChild(emptyStringNode,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
1643	[BUG]  [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getLastChild().replaceChild(emptyStringNode,  emptyStringNode);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	154	3	replace
1644	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getLastChild().replaceChild(emptyStringNode,  n);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	154	3	replace
1645	[BUG]  [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  n);  [FE]  RuntimeException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getLastChild().replaceChild(emptyStringNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getLastChild().replaceChild(emptyStringNode,  n);	  n.getFirstChild().replaceChild(n,    emptyStringNode);    	compilable	  [FE]  RuntimeException  	154	3	replace
1646	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getFirstChild().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  IllegalStateException  	33	3	replace
1647	[BUG]  [BUGGY]  n.getFirstChild().removeChild(arrayNode);  [FE]  IllegalStateException  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  IllegalStateException  	33	3	replace
1648	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayNode.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	arrayNode.getParent().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  IllegalStateException  	33	3	replace
1649	[BUG]  [BUGGY]  arrayNode.getParent().removeChild(arrayNode);  [FE]  IllegalStateException  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  arrayNode.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	arrayNode.getParent().removeChild(arrayNode);	  n.getParent().removeChild(arrayNode);    	compilable	  [FE]  IllegalStateException  	33	3	replace
1650	[BUG]  [BUGGY]  Node  n  =  parent.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  n  =  parent.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  n  =  parent.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	160	None	replace
1651	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  x);  [CE]  cannot  find  symbol  x  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  x);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  x);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  x	26	None	replace
1652	[BUG]  [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  this);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node.getParent().replaceChild(n,  emptyStringNode,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node.getParent().replaceChild(n,  emptyStringNode,  this);	  Node.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	26	None	replace
1653	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  this);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  this);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  this);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1654	[BUG]  [BUGGY]  Node  parent.getParent().replaceChild(n,  row);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  parent.getParent().replaceChild(n,  row);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  parent.getParent().replaceChild(n,  row);	  Node    parent.getParent().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
1655	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node.getParent().replaceChild(prev,  emptyStringNode);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  Node.getParent().replaceChild(prev,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    Node.getParent().replaceChild(prev,  emptyStringNode);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	96	None	add
1656	[BUG]  [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(peek,  emptyStringNode);  [CE]  cannot  find  symbol  peek  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(prev,  emptyStringNode);  n.getParent().replaceChild(peek,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(prev,    emptyStringNode);    n.getParent().replaceChild(peek,  emptyStringNode);	  	non-compiled	[CE]  cannot  find  symbol  peek	96	None	add
1657	[BUG]  [BUGGY]  NodeUtil.removeChild(emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  NodeUtil.removeChild(emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	NodeUtil.removeChild(emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1658	[BUG]  [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [CE]  illegal  start  of  expression  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Node  right  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().replaceChild(n,  Predicates.  <  Node>emptyStringNode));	  n.getParent().replaceChild(n,    prev);    n.getParent().replaceChild(n,    Predicates.    <    Node>emptyStringNode));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1659	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString  [CE]  ')'  expected  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyString	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
1660	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild  [CE]  not  a  statement  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  not  a  statement	179	None	replace
1661	[BUG]  [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [CE]  ')'  expected  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
1662	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [CE]  ')'  expected  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  int  kJoinOverhead  =  InlineCostEstimator.getCost(n.getFirstChild());  n.getNext().replaceChild(n,  emptyStr	  n.getNext().replaceChild(n,    emptyStringNode);    int    kJoinOverhead    =    InlineCostEstimator.getCost(n.getFirstChild());    n.getNext().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  ')'  expected	179	None	replace
1663	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryFoldArrayJoin(Node)	45	None	add
1664	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  node.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    Node  parent  =  n.getParent();  node.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        Node    parent    =    n.getParent();    node.getParent().replaceChild(n,  arrayNode);  Node  parent  =  n.getParent();	  	non-compiled	[CE]  cannot  find  symbol  node	45	None	add
1665	[BUG]  [BUGGY]  n.getName().replaceChild(arrayFoldedNode,  prev);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getName().replaceChild(arrayFoldedNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getName().replaceChild(arrayFoldedNode,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	134	None	replace
1666	[BUG]  [BUGGY]  n.replaceChild(arrayStringNode,  prev);  [CE]  cannot  find  symbol  arrayStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.replaceChild(arrayStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.replaceChild(arrayStringNode,  prev);	  n.getName().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	134	None	replace
1667	[BUG]  [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	if(emptyStringNode.getType()!=  Token.STRING)  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  emptyStringNode.size();  kJoinOverhead++)  {  return  n;  }	  if(emptyStringNode.getType()    ==    Token.STRING)    {    for(int    kJoinOverhead    =    0;    kJoinOverhead    >=    sb.size();    kJoinOverhead++)    {    return    n;    }    	non-compiled	[CE]  orphaned  case	132	None	replace
1668	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  emptyStringNode);  n.getFirst().replaceChild(n,  emptyStringNode);	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1669	[BUG]  [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n.getFirst());  [CE]  cannot  find  symbol  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getNext().replaceChild(emptyStringNode,  n.getFirst());  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getNext().replaceChild(emptyStringNode,  n.getFirst());	  n.getNext().replaceChild(n,    emptyStringNode);    n.getFirst().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1670	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  parent);  n.getParent().replaceChild(arrayNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  parent);  n.getParent().replaceChild(arrayNode,  emptyStringNode);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    n.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  parent	88	None	replace
1671	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  1);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
1672	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  prev);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  prev);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	58	None	replace
1673	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1674	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    RuntimeException    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  arrayNode);  n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getNext().replaceChild(n,    arrayNode);    n.getNext().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(n,  arrayNode);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('  	139	3	add
1675	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node.getFirstChild().replaceChild(n,  prev);  [CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  Node.getFirstChild().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    Node.getFirstChild().replaceChild(n,  prev);	  	non-compiled	[CE]  non-static  method  getFirstChild()  cannot  be  referenced  from  a  static  context	135	None	add
1676	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().removeChild(n,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().removeChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().removeChild(n,  prev);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	135	None	add
1677	[BUG]  [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  Prev);  [CE]  cannot  find  symbol  Prev  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getFirstChild().replaceChild(n,  prev);  n.getFirstChild().replaceChild(n,  Prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getFirstChild().replaceChild(n,    prev);    n.getFirstChild().replaceChild(n,  Prev);	  	non-compiled	[CE]  cannot  find  symbol  Prev	135	None	add
1678	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [CE]  ';'  expected  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  ';'  expected	38	None	add
1679	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(n,  arrayNode);  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
1680	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    Node  arrayNode  =  n.getParent().replaceChild(n,  emptyStringNode);  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  variable  arrayNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	38	None	add
1681	[BUG]  [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(parent,  arrayNode);  n.getParent().removeChild(arrayNode);  [CE]  cannot  find  symbol  parent  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  has  siblings.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,    arrayNode);    n.getParent().removeChild(arrayNode);  n.getParent().replaceChild(parent,  arrayNode);  n.getParent().removeChild(arrayNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,        arrayNode);        n.getParent().removeChild(arrayNode);    n.getParent().replaceChild(parent,  arrayNode);  n.getParent().removeChild(arrayNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	38	None	add
1682	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode,  this,  reverse);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode,  this,  reverse);	  n.getParent().replaceChild(n,    emptyStringNode,    this);    	non-compiled	[CE]  cannot  find  symbol  reverse	1	None	replace
1683	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  n.getParent().replaceChild(arrayNode,  n);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  n  =  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  n  =  n.getParent().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	30	None	add
1684	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  node.getParent().replaceChild(arrayNode,  n);  [CE]  cannot  find  symbol  node  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  node.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    node.getParent().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  node	30	None	add
1685	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(arrayNode,  n);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node.getParent().replaceChild(arrayNode,  n);	  	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	30	None	add
1686	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    n);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
1687	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
1688	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	add	n.getParent().replaceChild(arrayNode,    n);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
1689	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    Node  parent  =  n.getParent();  n.getParent().replaceChild(arrayNode,  parent);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('  	30	3	add
1690	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  n);  parent.replaceChild(arrayNode,  n);  [CE]  cannot  find  symbol  parent  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  The  new  child  node  already  has  a  parent.  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  n);  n.getParent().replaceChild(arrayNode,  n);  parent.replaceChild(arrayNode,  n);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,    n);    n.getParent().replaceChild(arrayNode,  n);  parent.replaceChild(arrayNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  parent	30	None	add
1691	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  new  String(prev));  [CE]  no  suitable  constructor  found  for  String(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  new  String(prev));  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  emptyStringNode);  n.getNext().replaceChild(emptyStringNode,  new  String(prev));	  n.getNext().replaceChild(n,    emptyStringNode);    n.getNext().replaceChild(    emptyStringNode,    emptyStringNode);    	non-compiled	[CE]  no  suitable  constructor  found  for  String(Node)	114	None	replace
1692	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node.getParent().replaceChild(arrayNode,  emptyStringNode,  prev);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node.getParent().replaceChild(arrayNode,    emptyStringNode);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	159	None	replace
1693	[BUG]  [BUGGY]  n.getPrevious().replaceChild(arrayFoldedNode,  emptyStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(arrayFoldedNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(arrayFoldedNode,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	57	None	replace
1694	[BUG]  [BUGGY]  n.getPrevious().replaceChild(emptyStringNode,  emptyStringNode);  [CE]  cannot  find  symbol  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(emptyStringNode,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(emptyStringNode,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
1695	[BUG]  [BUGGY]  n.getPrevious().replaceChild(array,  emptyStringNode);  [CE]  cannot  find  symbol  array  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getPrevious().replaceChild(array,  emptyStringNode);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getPrevious().replaceChild(array,  emptyStringNode);	  n.getPrevious().replaceChild(n,    emptyStringNode);    	non-compiled	[CE]  cannot  find  symbol  array	57	None	replace
1696	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  prev,  originalSize);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[     "a     "      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(n,  prev,  originalSize);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(n,  prev,  originalSize);	  n.getParent().replaceChild(parent,    n,    originalSize);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
1697	[BUG]  [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [CE]  cannot  find  symbol  node  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	node.getParent().replaceChild(n,  emptyStringNode);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  cannot  find  symbol  node	170	None	replace
1698	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Preconditions.checkState(emptyStringNode.getType()  ==  Token.STRING);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
1699	[BUG]  [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  Node.getParent().replaceChild(n,  prev);  [CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  Node.getParent().replaceChild(n,  prev);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	Preconditions.checkState(emptyStringNode.getType()  ==  Token.NAME);  Node.getParent().replaceChild(n,  prev);	  n.getParent().replaceChild(n,    prev);    Node.getParent().replaceChild(n,    prev);    	non-compiled	[CE]  non-static  method  getParent()  cannot  be  referenced  from  a  static  context	170	None	replace
1700	[BUG]  [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('      [CONTEXT]      arrayFoldedChildren.add(  Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(     "     ");      [BUGGY]  n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);  [BUGGY]      reportCodeChange();  return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	436	436	2	replace	n.getParent().replaceChild(arrayNode,  emptyStringNode);  Node  n  =  arrayFoldedChildren.get(1);	  n.getParent().replaceChild(arrayNode,    emptyStringNode);    Node    n    =    arrayFoldedChildren.get(0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	95	None	replace
