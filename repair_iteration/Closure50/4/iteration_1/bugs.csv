bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  n;  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  n;	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
2	[BUG]  [BUGGY]  return  n;  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  n;  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n;	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
3	[BUG]  [BUGGY]  return  foldedStringNode;  [CE]  cannot  find  symbol  foldedStringNode  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  foldedStringNode;  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  foldedStringNode;	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	7	None	replace
4	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  emptyStringNode;  }	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
5	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.cloneTree();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode.cloneTree();	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
7	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.cloneTree();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneTree();	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
8	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  0)  {  return  emptyStringNode;  }	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	7	3	replace
9	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	7	3	replace
10	[BUG]  [BUGGY]  return  originalSize;  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  originalSize;  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize;	return  emptyStringNode;  	non-compiled	[CE]  incompatible  types	7	None	replace
11	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.removeFirstChild();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode.removeFirstChild();	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
12	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.removeFirstChild();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.removeFirstChild();	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]    [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	  	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	7	3	replace
14	[BUG]  [BUGGY]    [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]    [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	  	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	7	3	replace
15	[BUG]  [BUGGY]  return  replacement;  [CE]  cannot  find  symbol  replacement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  replacement;  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  replacement;	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol  replacement	7	None	replace
16	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol  replacement	7	None	replace
17	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	return  emptyStringNode;  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	7	None	replace
18	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	7	None	replace
19	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	return  emptyStringNode;  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	7	None	replace
20	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	7	None	replace
21	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
22	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	return  emptyStringNode;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
23	[BUG]  [BUGGY]  return  emptyStringNode.toString();  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.toString();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString();	return  emptyStringNode;  	non-compiled	[CE]  incompatible  types	7	None	replace
24	[BUG]  [BUGGY]  return  emptyStringNode.cloneTarget();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.cloneTarget();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneTarget();	return  emptyStringNode;  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
25	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.getFirstChild();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode.getFirstChild();	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
26	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [CONTEXT]  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString( " ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();  [BUGGY]  return  emptyStringNode.getFirstChild();  [BUGGY]  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.getFirstChild();	return  emptyStringNode;  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	7	3	replace
