bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode.getLastChild();	  return    emptyStringNode.removeFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	replace
2	[BUG]  [BUGGY]  return  emptyStringNode.getLastChild();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.getLastChild();	  return    emptyStringNode.removeFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	12	3	replace
3	[BUG]  [BUGGY]  return  emptyStringNode.removeLastChild();  [CE]  cannot  find  symbol  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.removeLastChild();	  return    emptyStringNode.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  n.removeFirstChild();	  return    emptyStringNode.removeFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	12	2	replace
5	[BUG]  [BUGGY]  return  n.removeFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.removeFirstChild();	  return    emptyStringNode.removeFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	12	2	replace
6	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild()  -  1;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.removeFirstChild()  -  1;	  return    emptyStringNode.removeFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  >=  0)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
8	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
9	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1);	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  >  0)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
11	[BUG]  [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >  0)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
12	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayFoldedChildren);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayFoldedChildren);	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
13	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	n.removeChild(arrayFoldedChildren.get(0));	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	5	3	replace
14	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayFoldedChildren.get(0));	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	5	3	replace
15	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
16	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
17	[BUG]  [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
18	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize);  return  replacement;  }  [CE]  cannot  find  symbol  foldSize  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  foldSize	19	None	replace
19	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
20	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  replacement  =  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  replacement  =  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  replacement  =  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
21	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
22	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
23	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  n.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
24	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
25	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  return  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  return  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.getLastChild();  return  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
26	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getLastChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  n.getLastChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
27	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  return  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  return  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  n.getFirstChild();  return  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
28	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getLastChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
29	[BUG]  [BUGGY]  return  foldedSize;  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  foldedSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  foldedSize;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
30	[BUG]  [BUGGY]  return  foldedSize  -  originalSize;  [CE]  incompatible  types  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  foldedSize  -  originalSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  foldedSize  -  originalSize;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
31	[BUG]  [BUGGY]  return  originalSize  -  1;  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  originalSize  -  1;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize  -  1;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
32	[BUG]  [BUGGY]  return  originalSize  -  foldedSize;  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  originalSize  -  foldedSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize  -  foldedSize;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
33	[BUG]  [BUGGY]  return  originalSize  +  foldedSize;  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  originalSize  +  foldedSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize  +  foldedSize;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
34	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  n.cloneTree();	  return    replacement;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	replace
35	[BUG]  [BUGGY]  return  n.cloneTree();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.cloneTree();	  return    replacement;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	15	3	replace
36	[BUG]  [BUGGY]  return  n.replaceChild(n,  replacement);  [CE]  cannot  find  symbol  replacement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  replacement);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  replacement);	  return    replacement;    	non-compiled	[CE]  cannot  find  symbol  replacement	15	None	replace
37	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
38	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
39	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize  >=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
40	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize  >=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
42	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getLastChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.getLastChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	2	add
44	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getLastChild();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getLastChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.getLastChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	2	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
46	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
47	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  If(originalSize!=  0)  {  return  emptyStringNode;  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  If(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    If(originalSize!=  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  ';'  expected	4	None	add
48	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  >>  0)  {  return  emptyStringNode;  }  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize  >>  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize  >>  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  incompatible  types	4	None	add
49	[BUG]  [BUGGY]  return  n.toString();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.toString();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.toString();	  return    emptyStringNode.toString();    	non-compiled	[CE]  incompatible  types	23	None	replace
50	[BUG]  [BUGGY]  return  emptyStringNode.toString(),  originalSize);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString(),  originalSize);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString(),  originalSize);	  return    emptyStringNode.toString();    	non-compiled	[CE]  ';'  expected	23	None	replace
51	[BUG]  [BUGGY]  return  emptyStringNode.toString()  +  1;  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  +  1;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  +  1;	  return    emptyStringNode.toString();    	non-compiled	[CE]  incompatible  types	23	None	replace
52	[BUG]  [BUGGY]  return  emptyStringNode.toString(),  true);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString(),  true);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString(),  true);	  return    emptyStringNode.toString();    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  return  emptyStringNode.toString()  +  originalSize;  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  +  originalSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  +  originalSize;	  return    emptyStringNode.toString();    	non-compiled	[CE]  incompatible  types	23	None	replace
54	[BUG]  [BUGGY]  return  emptyStringNode.toString(),  originalSize;  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString(),  originalSize;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString(),  originalSize;	  return    emptyStringNode.toString();    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]      Node  arrayFoldedChildren  =  n.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      Node  arrayFoldedChildren  =  n.getParent();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        Node  arrayFoldedChildren  =  n.getParent();	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
56	[BUG]  [BUGGY]      Node  arrayFoldedChildren  =  n.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      Node  arrayFoldedChildren  =  n.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        Node  arrayFoldedChildren  =  n.getLastChild();	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
57	[BUG]  [BUGGY]      Node  arrayFoldedChildren  =  n.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      Node  arrayFoldedChildren  =  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        Node  arrayFoldedChildren  =  n.getFirstChild();	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
58	[BUG]  [BUGGY]      n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayFoldedNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	13	None	add
59	[BUG]  [BUGGY]      n.removeChild(arrayFoldedChildren.size()  -  1);  return  replacement;  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayFoldedChildren.size()  -  1);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayFoldedChildren.size()  -  1);  return  replacement;	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	add
60	[BUG]  [BUGGY]      n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(oldStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	13	None	add
61	[BUG]  [BUGGY]      n.removeChild(arrayFoldedNode);  return  replacement;  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayFoldedNode);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayFoldedNode);  return  replacement;	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	13	None	add
62	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
63	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
64	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  n.getFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
65	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  emptyStringNode.getLastChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
66	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  arrayFoldedChildren.removeFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  arrayFoldedChildren.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  arrayFoldedChildren.removeFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
67	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  emptyStringNode.removeFirstChild();  [CE]  unreachable  statement  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  firstChild  =  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
68	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  arrayFoldedChildren  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
69	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  n.removeFirstChild();  [CE]  unreachable  statement  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  n.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    n.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
70	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  n.getFirstChild();	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	26	2	replace
71	[BUG]  [BUGGY]  return  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getFirstChild();	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	26	2	replace
72	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  Node  n  =  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	Node  n  =  emptyStringNode.getFirstChild();	  return    emptyStringNode.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	replace
73	[BUG]  [BUGGY]  Node  n  =  emptyStringNode.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  Node  n  =  emptyStringNode.getLastChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	Node  n  =  emptyStringNode.getLastChild();	  return    emptyStringNode.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	26	None	replace
74	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  0  ||  foldedSize  >  0)  {  return  emptyStringNode;  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
75	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  return  emptyStringNode;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0  ||  foldedSize  >  0)  {  return  emptyStringNode;  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
76	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	replace
77	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.getNext();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  0)  {  return  emptyStringNode.getNext();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
78	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.getNext();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.getNext();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode.getNext();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
79	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	1	None	add
80	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  {	  	non-compiled	[CE]  not  a  statement	1	None	add
81	[BUG]  [BUGGY]  return  n;  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.removeChild(arrayFoldedChildren.size()  -  1);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	add
82	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  }	  	non-compiled	[CE]  not  a  statement	1	None	add
83	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "	  	non-compiled	[CE]  not  a  statement	1	None	add
84	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "false "  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "false "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "false "	  	non-compiled	[CE]  not  a  statement	1	None	add
85	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }	  	non-compiled	[CE]  not  a  statement	1	None	add
86	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "	  	non-compiled	[CE]  not  a  statement	1	None	add
87	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	20	None	replace
88	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	20	None	replace
89	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  foldedSize,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
90	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  n,  foldedSize,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  n,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  n,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	20	None	replace
91	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    n;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	2	2	replace
92	[BUG]  [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    n;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	2	2	replace
93	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    n;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
94	[BUG]  [BUGGY]  if(originalSize  ==  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  foldedSize)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    n;    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	replace
95	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME,  originalSize));  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME,  originalSize));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME,  originalSize));	  return    n;    	non-compiled	[CE]  ';'  expected	2	None	replace
96	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME);  [CE]  cannot  find  symbol  foldedStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.FUNCTION?  foldedStringNode  :  Node.newString(Token.NAME);	  return    n;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	2	None	replace
97	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  foldedSize)  {  return  n;  }	  return    n;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	2	2	replace
98	[BUG]  [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  foldedSize)  {  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  foldedSize)  {  return  n;  }	  return    n;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	2	2	replace
99	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
100	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
101	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
102	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  replacement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	add
103	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
104	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  new  Node(Token.ADD,  foldedStringNode);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  foldedStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  new  Node(Token.ADD,  foldedStringNode);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  new  Node(Token.ADD,  foldedStringNode);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	21	None	add
105	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	21	None	add
106	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	21	None	add
107	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(arrayFoldedNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(arrayFoldedNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(arrayFoldedNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	18	None	replace
108	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	18	None	replace
109	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(adjectedStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  adjectedStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(adjectedStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(adjectedStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  adjectedStringNode	18	None	replace
110	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	18	None	replace
111	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  replacement	18	None	replace
112	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	22	3	replace
113	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	22	3	replace
114	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
115	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
116	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
117	[BUG]  [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
118	[BUG]  [BUGGY]  return  n.cloneTarget();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
119	[BUG]  [BUGGY]  return  arrayNode.cloneTarget();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  arrayNode.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  arrayNode.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
120	[BUG]  [BUGGY]  return  arrayFoldedStringNode.cloneTarget();  [CE]  cannot  find  symbol  arrayFoldedStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  arrayFoldedStringNode.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  arrayFoldedStringNode.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedStringNode	24	None	replace
121	[BUG]  [BUGGY]  return  arrayFoldedNode.cloneTarget();  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  arrayFoldedNode.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  arrayFoldedNode.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	24	None	replace
122	[BUG]  [BUGGY]  return  emptyStringNode.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.clone();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.clone();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	24	None	replace
123	[BUG]  [BUGGY]  return  leftStringNode.cloneTarget();  [CE]  cannot  find  symbol  leftStringNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  leftStringNode.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  leftStringNode.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	24	None	replace
124	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
125	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
126	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  initialSize);  return  replacement;  }  [CE]  cannot  find  symbol  initialSize  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  initialSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  initialSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  initialSize	17	None	replace
127	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  1,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
128	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	16	2	replace
129	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	16	2	replace
130	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  null;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  null;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	16	2	replace
131	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  null;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  null;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  null;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	16	2	replace
132	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  ref;  }  [CE]  cannot  find  symbol  ref  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  ref;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  ref;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  ref	16	None	replace
133	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	16	2	replace
134	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  >=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	16	2	replace
135	[BUG]  [BUGGY]  return  emptyStringNode.cloneChildren();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneChildren();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneChildren();	  return    emptyStringNode.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
136	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree(),  originalSize);  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree(),  originalSize);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneTree(),  originalSize);	  return    emptyStringNode.cloneTree();    	non-compiled	[CE]  ';'  expected	7	None	replace
137	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree(),  true);  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree(),  true);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneTree(),  true);	  return    emptyStringNode.cloneTree();    	non-compiled	[CE]  ';'  expected	7	None	replace
138	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree()  +  1;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.cloneTree()  +  1;	  return    emptyStringNode.cloneTree();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	7	None	replace
139	[BUG]  [BUGGY]  return  foldedStringNode.cloneTree();  [CE]  cannot  find  symbol  foldedStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  foldedStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  foldedStringNode.cloneTree();	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	3	None	replace
140	[BUG]  [BUGGY]  return  inferFoldingNode(n,  originalSize);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  inferFoldingNode(n,  originalSize);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  inferFoldingNode(n,  originalSize);	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
141	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	6	None	add
142	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  {	  	non-compiled	[CE]  not  a  statement	6	None	add
143	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  }	  	non-compiled	[CE]  not  a  statement	6	None	add
144	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "false "  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "false "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "false "	  	non-compiled	[CE]  not  a  statement	6	None	add
145	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "	  	non-compiled	[CE]  not  a  statement	6	None	add
146	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }   "	  	non-compiled	[CE]  not  a  statement	6	None	add
147	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  unreachable  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  unreachable  statement	6	None	add
148	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  {  }	  	non-compiled	[CE]  not  a  statement	6	None	add
149	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
150	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
151	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	8	2	add
152	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	8	2	add
153	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  >=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
154	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  >=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  >=  0)  {  return  emptyStringNode;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
155	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  If(originalSize  ==  0)  {  return  emptyStringNode;  }  [CE]  ';'  expected  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  If(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    If(originalSize  ==  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  ';'  expected	8	None	add
156	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	8	None	add
157	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  >>  0)  {  return  emptyStringNode;  }  [CE]  incompatible  types  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  >>  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  >>  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  incompatible  types	8	None	add
158	[BUG]  [BUGGY]  return  arrayFoldedChildren.cloneTarget();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  arrayFoldedChildren.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  arrayFoldedChildren.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
159	[BUG]  [BUGGY]  return  callTarget.cloneTarget();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  callTarget.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  callTarget.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
160	[BUG]  [BUGGY]  return  node.cloneTarget();  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  node.cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  node.cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
161	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "   "	  	non-compiled	[CE]  not  a  statement	1	None	add
162	[BUG]  [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "	  	non-compiled	[CE]  not  a  statement	1	None	add
163	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  replacement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize  ==  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize  ==  0)  {  return  replacement;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	add
164	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  {	  	non-compiled	[CE]  not  a  statement	21	None	add
165	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  }	  	non-compiled	[CE]  not  a  statement	21	None	add
166	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  replacement;  }	  	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	add
167	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.getParent().removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.getParent().removeChild(arrayFoldedChildren.size()  -  1);	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	22	None	replace
168	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
169	[BUG]  [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(emptyStringNode);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(emptyStringNode);	  return    emptyStringNode.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	23	None	replace
170	[BUG]  [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(n);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  &&  NodeUtil.isExpressionNode(n);	  return    emptyStringNode.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	23	None	replace
171	[BUG]  [BUGGY]  return  emptyStringNode.toString()  &&  n.getFirstChild().getType()  ==  Token.STRING;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  &&  n.getFirstChild().getType()  ==  Token.STRING;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  &&  n.getFirstChild().getType()  ==  Token.STRING;	  return    emptyStringNode.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	23	None	replace
172	[BUG]  [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isFunctionDeclaration(n);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  &&  NodeUtil.isFunctionDeclaration(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  &&  NodeUtil.isFunctionDeclaration(n);	  return    emptyStringNode.toString();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	23	None	replace
173	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  }   "	  	non-compiled	[CE]  not  a  statement	6	None	add
174	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "   "	  	non-compiled	[CE]  not  a  statement	6	None	add
175	[BUG]  [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }  [CE]  orphaned  case  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }	  return    n;    	non-compiled	[CE]  orphaned  case	2	None	replace
176	[BUG]  [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }  [CE]  orphaned  case  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  return  kJoinOverhead;  }	  return    n;    	non-compiled	[CE]  orphaned  case	2	None	replace
177	[BUG]  [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold	  return    n;    	non-compiled	[CE]  ';'  expected	2	None	replace
178	[BUG]  [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  <  initialSize;  kJoinOverhead++)  {  Node  arrayFoldedChildren  =  arrayFold	  return    n;    	non-compiled	[CE]  ';'  expected	2	None	replace
179	[BUG]  [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  n;  }  [CE]  orphaned  case  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  originalSize)  {  return  n;  }  else  {  for(int  kJoinOverhead  =  0;  kJoinOverhead  >=  initialSize;  kJoinOverhead++)  {  return  n;  }	  return    n;    	non-compiled	[CE]  orphaned  case	2	None	replace
180	[BUG]  [BUGGY]  return  originalSize  +  1;  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  originalSize  +  1;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize  +  1;	  return    originalSize;    	non-compiled	[CE]  incompatible  types	10	None	replace
181	[BUG]  [BUGGY]  return  originalSize  +  kJoinOverhead;  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  originalSize  +  kJoinOverhead;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  originalSize  +  kJoinOverhead;	  return    originalSize;    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	10	None	replace
182	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  replacement	17	None	replace
183	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  oldStringNode);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  oldStringNode);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  oldStringNode);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	17	None	replace
184	[BUG]  [BUGGY]  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
185	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(leftStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  leftStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(leftStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(leftStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	18	None	replace
186	[BUG]  [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	18	None	replace
187	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	18	None	replace
188	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  return    replacement;    	non-compiled	[CE]  incompatible  types	15	None	replace
189	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.NAME,  foldedStringNode));  [CE]  cannot  find  symbol  foldedStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.NAME,  foldedStringNode));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.NAME,  foldedStringNode));	  return    replacement;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	15	None	replace
190	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.ASSIGN));  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.ASSIGN));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.ASSIGN));	  return    replacement;    	non-compiled	[CE]  incompatible  types	15	None	replace
191	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	8	None	add
192	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(n);  }  [CE]  incompatible  types  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(n);  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(n);  }	  	non-compiled	[CE]  incompatible  types	8	None	add
193	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
194	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	8	2	add
195	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.clone();  }  [CE]  clone()  has  protected  access  in  Object  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.clone();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.clone();  }	  	non-compiled	[CE]  clone()  has  protected  access  in  Object	8	None	add
196	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()  ==  Token.STRING)  {  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()  ==  Token.STRING)  {  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    if(emptyStringNode.getType()  ==  Token.STRING)  {  return  replacement;  }	  	non-compiled	[CE]  cannot  find  symbol  replacement	25	None	add
197	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  emptyStringNode  =  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
198	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()  ==  Token.STRING)  {  return  Node.newString(Token.ASSIGN);  }  [CE]  no  suitable  method  found  for  newString(int)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()  ==  Token.STRING)  {  return  Node.newString(Token.ASSIGN);  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    if(emptyStringNode.getType()  ==  Token.STRING)  {  return  Node.newString(Token.ASSIGN);  }	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int)	25	None	add
199	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeChild(emptyStringNode);  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeChild(emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    n.removeChild(emptyStringNode);	  	non-compiled	[CE]  unreachable  statement	25	None	add
200	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()!=  Token.STRING)  {  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  if(emptyStringNode.getType()!=  Token.STRING)  {  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    if(emptyStringNode.getType()!=  Token.STRING)  {  return  replacement;  }	  	non-compiled	[CE]  cannot  find  symbol  replacement	25	None	add
201	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  cannot  find  symbol  replacement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  replacement;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  replacement	19	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
203	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize  +  1);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize  +  1);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize  +  1);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
204	[BUG]  [BUGGY]      n.removeChild(arrayStringNode);  break;  [CE]  cannot  find  symbol  arrayStringNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayStringNode);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayStringNode);  break;	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	13	None	add
205	[BUG]  [BUGGY]      n.removeChild(arrayStringNode);  return  replacement;  [CE]  cannot  find  symbol  arrayStringNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayStringNode);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayStringNode);  return  replacement;	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	13	None	add
206	[BUG]  [BUGGY]      n.removeChild(arrayFoldedChildren.size()  -  1);  break;  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayFoldedChildren.size()  -  1);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayFoldedChildren.size()  -  1);  break;	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	add
207	[BUG]  [BUGGY]      n.removeChild(arrayStringNode);  [CE]  cannot  find  symbol  arrayStringNode  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(arrayStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(arrayStringNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayStringNode	13	None	add
208	[BUG]  [BUGGY]      n.removeChild(oldStringNode);  break;  [CE]  cannot  find  symbol  oldStringNode  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(oldStringNode);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(oldStringNode);  break;	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	13	None	add
209	[BUG]  [BUGGY]      n.removeChild(oldStringNode);  return  replacement;  [CE]  cannot  find  symbol  oldStringNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      n.removeChild(oldStringNode);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        n.removeChild(oldStringNode);  return  replacement;	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	13	None	add
210	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  {  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  {	  	non-compiled	[CE]  not  a  statement	4	None	add
211	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.getFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
212	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getFirstChild();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.getFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.getFirstChild();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
213	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  <   "	  	non-compiled	[CE]  not  a  statement	4	None	add
214	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  junit.framework.AssertionFailedError:  Expected:  x=[ "  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    junit.framework.AssertionFailedError:  Expected:  x=[ "  }	  	non-compiled	[CE]  not  a  statement	4	None	add
215	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode.toString();  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode.toString();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode.toString();  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  incompatible  types	5	None	replace
216	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  1)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
217	[BUG]  [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  1)  {  return  emptyStringNode;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
218	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  foldSize  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  foldSize	16	None	replace
219	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replace;  }  [CE]  cannot  find  symbol  replace  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replace;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replace;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  replace	16	None	replace
220	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  name;  }  [CE]  cannot  find  symbol  name  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  name;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  name;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  name	16	None	replace
221	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	20	None	replace
222	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	replace
223	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode.removeFirstChild();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	replace
224	[BUG]  [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	parent.replaceChild(n,  emptyStringNode);	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  cannot  find  symbol  parent	9	None	replace
225	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	n.removeChild(emptyStringNode);	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	26	3	replace
226	[BUG]  [BUGGY]  n.removeChild(emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(emptyStringNode);	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	26	3	replace
227	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  return  emptyStringNode.removeFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  return  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  emptyStringNode.removeFirstChild();  return  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
228	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.removeFirstChild();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  emptyStringNode  =  emptyStringNode.getFirstChild();  return  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
229	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  return  emptyStringNode.removeFirstChild();  [CE]  not  a  statement  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  return  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  return  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  not  a  statement	11	None	add
230	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  emptyStringNode.getFirstChild();  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  firstChild  =  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
231	[BUG]  [BUGGY]  return  new  StringNode(Token.NAME,  foldedStringNode);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  new  StringNode(Token.NAME,  foldedStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  new  StringNode(Token.NAME,  foldedStringNode);	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
232	[BUG]  [BUGGY]  return  new  StringNode(Token.STRING,  foldedStringNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  new  StringNode(Token.STRING,  foldedStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  new  StringNode(Token.STRING,  foldedStringNode);	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
233	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getFirstChild();  return  emptyStringNode.removeFirstChild();  [CE]  unreachable  statement  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getFirstChild();  return  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  firstChild  =  n.getFirstChild();  return  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
234	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getLastChild();  return  emptyStringNode.removeFirstChild();  [CE]  unreachable  statement  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getLastChild();  return  emptyStringNode.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  firstChild  =  n.getLastChild();  return  emptyStringNode.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
235	[BUG]  [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getFirstChild();  [CE]  unreachable  statement  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.removeFirstChild();  Node  firstChild  =  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.removeFirstChild();    Node  firstChild  =  n.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	11	None	add
236	[BUG]  [BUGGY]  return  new  String(oldStringNode.getString());  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  new  String(oldStringNode.getString());  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  new  String(oldStringNode.getString());	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	3	None	replace
237	[BUG]  [BUGGY]  return  new  StringBuilder(sb.toString());  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  new  StringBuilder(sb.toString());  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  new  StringBuilder(sb.toString());	  return    foldedStringNode;    	non-compiled	[CE]  incompatible  types	3	None	replace
238	[BUG]  [BUGGY]  return  new  String(oldStringNode.toString());  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  new  String(oldStringNode.toString());  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  new  String(oldStringNode.toString());	  return    foldedStringNode;    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	3	None	replace
239	[BUG]  [BUGGY]  if(oldStringNode!=  null)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(oldStringNode!=  null)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(oldStringNode!=  null)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	18	None	replace
240	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldString,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  oldString  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldString,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(oldString,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(oldStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  oldString	18	None	replace
241	[BUG]  [BUGGY]  x=[ "AssertionFailedError:  Expected:  x=[ "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  x=[ "AssertionFailedError:  Expected:  x=[ "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	x=[ "AssertionFailedError:  Expected:  x=[ "  >>  junit.framework.AssertionFailedError:  Expected:  x=[ "	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
242	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  1)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
243	[BUG]  [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  1)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  1)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
244	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  2)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  2)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
245	[BUG]  [BUGGY]  if(originalSize!=  2)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  2)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  2)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	22	2	replace
246	[BUG]  [BUGGY]  x=[ "AssertionFailedError:  Expected:  x=[ "  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  x=[ "AssertionFailedError:  Expected:  x=[ "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	x=[ "AssertionFailedError:  Expected:  x=[ "	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
247	[BUG]  [BUGGY]  return  n.replaceChild(arrayFoldedNode,  false);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(arrayFoldedNode,  false);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(arrayFoldedNode,  false);	  return    n;    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	2	None	replace
248	[BUG]  [BUGGY]  return  n.replaceChild(arrayFoldedNode,  replaceStringNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(arrayFoldedNode,  replaceStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(arrayFoldedNode,  replaceStringNode);	  return    n;    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	2	None	replace
249	[BUG]  [BUGGY]  return  emptyStringNode.getParent().cloneTarget();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getParent().cloneTarget();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.getParent().cloneTarget();	  return    emptyStringNode.cloneTarget();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
250	[BUG]  [BUGGY]  If(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  If(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	If(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
251	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  arrayFoldedChildren;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [CE]  incompatible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  arrayFoldedChildren;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  arrayFoldedChildren;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize,  originalSize);  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  incompatible  types	16	None	replace
252	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeChild(arrayFoldedNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    n.removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	25	None	add
253	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	25	None	add
254	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  Node  return  emptyStringNode.getFirstChild();  [CE]  not  a  statement  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  Node  return  emptyStringNode.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    Node  return  emptyStringNode.getFirstChild();	  	non-compiled	[CE]  not  a  statement	25	None	add
255	[BUG]  [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeFirstChild();  [CE]  unreachable  statement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getFirstChild();  n.removeFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.getFirstChild();    n.removeFirstChild();	  	non-compiled	[CE]  unreachable  statement	25	None	add
256	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    n.getParent().removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	6	None	add
257	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  if(emptyStringNode.getType()  ==  Token.STRING)  {  Expected:  x=[ "a   "  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  if(emptyStringNode.getType()  ==  Token.STRING)  {  Expected:  x=[ "a   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    if(emptyStringNode.getType()  ==  Token.STRING)  {  Expected:  x=[ "a   "	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
258	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    n.removeChild(arrayFoldedChildren.size()  -  1);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	add
259	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  Node  emptyStringNode  =  emptyStringNode.cloneTree();  [CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  Node  emptyStringNode  =  emptyStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    Node  emptyStringNode  =  emptyStringNode.cloneTree();	  	non-compiled	[CE]  variable  emptyStringNode  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
260	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    junit.framework.AssertionFailedError:  Expected:  x=[ "  {   "	  	non-compiled	[CE]  not  a  statement	6	None	add
261	[BUG]  [BUGGY]  return  emptyStringNode.cloneTree();  if(emptyStringNode.getType()!=  Token.STRING)  {  Expected:  x=[ "a   "  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.cloneTree();  if(emptyStringNode.getType()!=  Token.STRING)  {  Expected:  x=[ "a   "  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    emptyStringNode.cloneTree();    if(emptyStringNode.getType()!=  Token.STRING)  {  Expected:  x=[ "a   "	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
262	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getNext();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode.getNext();	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	26	3	replace
263	[BUG]  [BUGGY]  return  emptyStringNode.getNext();  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.getNext();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.getNext();	  return    emptyStringNode.getFirstChild();    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	26	3	replace
264	[BUG]  [BUGGY]  n.removeChild(arrayFoldedNode);  break;  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayFoldedNode);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayFoldedNode);  break;	      	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	14	None	replace
265	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayNode);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	n.removeChild(arrayNode);  break;	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
266	[BUG]  [BUGGY]  n.removeChild(arrayNode);  break;  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayNode);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayNode);  break;	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	14	3	replace
267	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  return  replacement;  [CE]  cannot  find  symbol  replacement  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  return  replacement;	      	non-compiled	[CE]  cannot  find  symbol  replacement	14	None	replace
268	[BUG]  [BUGGY]  n.removeChild(arrayNode);  return  replacement;  [CE]  cannot  find  symbol  replacement  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  n.removeChild(arrayNode);  return  replacement;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	n.removeChild(arrayNode);  return  replacement;	      	non-compiled	[CE]  cannot  find  symbol  replacement	14	None	replace
269	[BUG]  [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	      	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	14	None	replace
270	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  return  emptyStringNode;  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  return  emptyStringNode;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  return  emptyStringNode;  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	4	None	add
271	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.clone();  }  [CE]  clone()  has  protected  access  in  Object  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  if(originalSize!=  0)  {  return  emptyStringNode.clone();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    if(originalSize!=  0)  {  return  emptyStringNode.clone();  }	  	non-compiled	[CE]  clone()  has  protected  access  in  Object	4	None	add
272	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  incompatible  types	21	None	add
273	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  arrayFoldedChildren.remove(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  arrayFoldedChildren.remove(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  arrayFoldedChildren.remove(0);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
274	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(originalSize!=  0)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(originalSize!=  0)  {  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
275	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.size()  -  1);  }  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.size()  -  1);  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.size()  -  1);  }	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	8	None	add
276	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.get(0));  }  [CE]  incompatible  types  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode;  }  if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.get(0));  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize    ==    0)    {    return    emptyStringNode;    }    if(originalSize  ==  0)  {  return  emptyStringNode.removeChild(arrayFoldedChildren.get(0));  }	  	non-compiled	[CE]  incompatible  types	8	None	add
277	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
278	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize  ==  0)  {  return  emptyStringNode.removeFirstChild();  }	  if(originalSize    ==    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	9	3	replace
279	[BUG]  [BUGGY]  return  emptyStringNode.toString()  +  n.toString();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString()  +  n.toString();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString()  +  n.toString();	  return    emptyStringNode.toString();    	non-compiled	[CE]  incompatible  types	23	None	replace
280	[BUG]  [BUGGY]  return  emptyStringNode.toString(),  null);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString(),  null);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString(),  null);	  return    emptyStringNode.toString();    	non-compiled	[CE]  ';'  expected	23	None	replace
281	[BUG]  [BUGGY]  return  emptyStringNode.toString(),  n);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode.toString(),  n);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode.toString(),  n);	  return    emptyStringNode.toString();    	non-compiled	[CE]  ';'  expected	23	None	replace
282	[BUG]  [BUGGY]  if(kJoinOverhead!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(kJoinOverhead!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(kJoinOverhead!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	20	None	replace
283	[BUG]  [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [CE]  cannot  find  symbol  kJoinOverhead  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  kJoinOverhead,  foldedSize,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    kJoinOverhead,    foldedSize,    originalSize);    return    replacement;    }    	non-compiled	[CE]  cannot  find  symbol  kJoinOverhead	20	None	replace
284	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n).toString();  [CE]  int  cannot  be  dereferenced  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n).toString();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n).toString();	  return    originalSize;    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
285	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n).toString();  [CE]  int  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n).toString();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n).toString();	  return    originalSize;    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
286	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n));  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.CALL?  foldedSize  :  InlineCostEstimator.getCost(n));	  return    originalSize;    	non-compiled	[CE]  ';'  expected	10	None	replace
287	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n));  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.NAME?  originalSize  :  InlineCostEstimator.getCost(n));	  return    originalSize;    	non-compiled	[CE]  ';'  expected	10	None	replace
288	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedSize  :  InlineCostEstimator.getCost(n).toString();  [CE]  int  cannot  be  dereferenced  [FE]                          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  foldedSize  :  InlineCostEstimator.getCost(n).toString();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.FUNCTION?  foldedSize  :  InlineCostEstimator.getCost(n).toString();	  return    originalSize;    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
289	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  foldedSize  :  InlineCostEstimator.getCost(n));  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.getType()  ==  Token.NAME?  foldedSize  :  InlineCostEstimator.getCost(n));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.getType()  ==  Token.NAME?  foldedSize  :  InlineCostEstimator.getCost(n));	  return    originalSize;    	non-compiled	[CE]  ';'  expected	10	None	replace
290	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	if(originalSize!=  0)  {  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
291	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  n;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  n;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  n;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
292	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }  [CE]  incompatible  types  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  arrayFoldedChildren.size();  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    	non-compiled	[CE]  incompatible  types	5	None	replace
293	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
294	[BUG]  [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  foldedSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    foldedSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	19	None	replace
295	[BUG]  [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  break;  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  break;  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	        int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  break;	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	13	None	add
296	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  n;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
297	[BUG]  [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
298	[BUG]  [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize  +  1);  return  replacement;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize  +  1);  return  replacement;  }  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	if(originalSize!=  0)  {  return  emptyStringNode;  }  else  {  System.arraycopy(emptyStringNode,  0,  arrayFoldedChildren,  originalSize  +  1);  return  replacement;  }	  if(originalSize!=    0)    {    return    emptyStringNode;    }    else    {    System.arraycopy(emptyStringNode,    0,    arrayFoldedChildren,    originalSize);    return    replacement;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	17	None	replace
299	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode  ==  null?  null  :  emptyStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode  ==  null?  null  :  emptyStringNode.cloneTree();	  return    emptyStringNode.cloneTree();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
300	[BUG]  [BUGGY]  return  emptyStringNode  ==  null?  null  :  emptyStringNode.cloneTree();  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode  ==  null?  null  :  emptyStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode  ==  null?  null  :  emptyStringNode.cloneTree();	  return    emptyStringNode.cloneTree();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	7	2	replace
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode!=  null?  null  :  emptyStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	add	return  emptyStringNode!=  null?  null  :  emptyStringNode.cloneTree();	  return    emptyStringNode.cloneTree();    	compilable	  [FE]  RuntimeException  	7	3	replace
302	[BUG]  [BUGGY]  return  emptyStringNode!=  null?  null  :  emptyStringNode.cloneTree();  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  emptyStringNode!=  null?  null  :  emptyStringNode.cloneTree();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  emptyStringNode!=  null?  null  :  emptyStringNode.cloneTree();	  return    emptyStringNode.cloneTree();    	compilable	  [FE]  RuntimeException  	7	3	replace
303	[BUG]  [BUGGY]  return  n;  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.removeChild(arrayFoldedNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	1	None	add
304	[BUG]  [BUGGY]  return  n;  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.getParent().removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	1	None	add
305	[BUG]  [BUGGY]  return  n;  n.getParent().replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.getParent().replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.getParent().replaceChild(n,  new  Node(Token.EXPR_RESULT));	  	non-compiled	[CE]  unreachable  statement	1	None	add
306	[BUG]  [BUGGY]  return  n;  n.getParent().removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.getParent().removeChild(parent);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.getParent().removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	1	None	add
307	[BUG]  [BUGGY]  return  n;  n.getParent().replaceChild(n,  emptyStringNode);  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.getParent().replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  unreachable  statement	1	None	add
308	[BUG]  [BUGGY]  return  n;  n.getParent().replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  unreachable  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n.getParent().replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n.getParent().replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  unreachable  statement	1	None	add
309	[BUG]  [BUGGY]  return  n;  n  =  n.getFirstChild();  [CE]  unreachable  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n;  n  =  n.getFirstChild();  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return    n;    n  =  n.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	1	None	add
310	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedSize));  [CE]  no  suitable  constructor  found  for  Node(int,int)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedSize));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedSize));	  return    replacement;    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,int)	15	None	replace
311	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.FOR,  foldedSize));  [CE]  no  suitable  constructor  found  for  Node(int,int)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.FOR,  foldedSize));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.FOR,  foldedSize));	  return    replacement;    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,int)	15	None	replace
312	[BUG]  [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedStringNode));  [CE]  cannot  find  symbol  foldedStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);  reportCodeChange();    [BUGGY]  return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedStringNode));  [BUGGY]    case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    Node  replacement  =  new  Node(Token.ADD,  [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	438	438	2	replace	return  n.replaceChild(n,  new  Node(Token.EXPR_RESULT,  foldedStringNode));	  return    replacement;    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	15	None	replace
