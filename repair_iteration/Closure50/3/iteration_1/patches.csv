bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
2	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
3	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
4	[BUG]  [BUGGY]  n.removeChild(prev);  n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.getParent().removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
5	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(name);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(name);	  	non-compiled	[CE]  cannot  find  symbol  name	11	None	add
6	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(first);  [CE]  cannot  find  symbol  first  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(first);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(first);	  	non-compiled	[CE]  cannot  find  symbol  first	11	None	add
7	[BUG]  [BUGGY]  n.removeChild(prev);  node.removeChild(prev);  [CE]  cannot  find  symbol  node  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  node.removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    node.removeChild(prev);	  	non-compiled	[CE]  cannot  find  symbol  node	11	None	add
8	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(functionName);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);    n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
9	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(functionName);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(functionName);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
10	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(parent);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(parent);	  	non-compiled	[CE]  cannot  find  symbol  parent	11	None	add
11	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldedSize);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
12	[BUG]  [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren);  [CE]  cannot  find  symbol  oldStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(oldStringNode,  arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	14	None	replace
13	[BUG]  [BUGGY]  n.removeChild(prev,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev,  arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
14	[BUG]  [BUGGY]  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(oldStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(oldStringNode);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	14	None	replace
15	[BUG]  [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(functionName,  arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
16	[BUG]  [BUGGY]  n.removeChild(sb,  arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(sb,  arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
17	[BUG]  [BUGGY]  n.removeChild(type,  arrayFoldedChildren);  [CE]  cannot  find  symbol  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(type,  arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(type,  arrayFoldedChildren);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  type	14	None	replace
18	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	2	add
19	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	4	2	add
20	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
21	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
23	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
24	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
25	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
26	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize!=  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	4	None	add
27	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
28	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }  else  if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	4	2	add
29	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize  >>  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  incompatible  types	4	None	add
30	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
31	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
32	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.get(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.get(0);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    Node  n  =  arrayFoldedChildren.get(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	2	None	add
33	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(oldStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	2	None	add
34	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.remove(0);  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.remove(0);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    Node  n  =  arrayFoldedChildren.remove(0);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	2	None	add
35	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  Node  n  =  n.getParent();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    Node  n  =  n.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	2	None	add
36	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.getParent().removeChild(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);    n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
37	[BUG]  [BUGGY]  n.removeChild(n);  n.getParent().removeChild(n);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.getParent().removeChild(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.getParent().removeChild(n);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
38	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  Node  n  =  arrayFoldedChildren.getFirstChild();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    Node  n  =  arrayFoldedChildren.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldArrayJoin(Node)	2	None	add
39	[BUG]  [BUGGY]  n.removeChild(n);  node.removeChild(n);  [CE]  cannot  find  symbol  node  [FE]                  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  node.removeChild(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    node.removeChild(n);	  	non-compiled	[CE]  cannot  find  symbol  node	2	None	add
40	[BUG]  [BUGGY]  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(sb.toString());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(sb.toString());	  n.removeChild(n);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
41	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayNode);	  n.removeChild(n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	replace
42	[BUG]  [BUGGY]  n.removeChild(arrayNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayNode);	  n.removeChild(n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	3	3	replace
43	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(parent);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(parent);	  n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  parent	3	None	replace
44	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  >=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
45	[BUG]  [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >=  0)  {  reportCodeChange();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	5	2	replace
46	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportError();  }  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportError();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0)  {  reportError();  }	  if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
47	[BUG]  [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [CE]  cannot  find  symbol  parent  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  parent.replaceChild(n,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	parent.replaceChild(n,  emptyStringNode);	  if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
48	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  Node  arrayFoldedChildren  =  n.getParent();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getParent();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
49	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.getParent().replaceChild(n,  emptyStringNode);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	10	3	replace
50	[BUG]  [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.getParent().replaceChild(n,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().replaceChild(n,  emptyStringNode);	      	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	10	3	replace
51	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  Node  arrayFoldedChildren  =  n.getLastChild();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getLastChild();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
52	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  sb.toString();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  Node  arrayFoldedChildren  =  sb.toString();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  sb.toString();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
53	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  Node  arrayFoldedChildren  =  n.getFirstChild();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =  n.getFirstChild();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
54	[BUG]  [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getParent();  [CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]              AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  Node  arrayFoldedChildren  =(Node)n.getParent();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	Node  arrayFoldedChildren  =(Node)n.getParent();	      	non-compiled	[CE]  variable  arrayFoldedChildren  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
55	[BUG]  [BUGGY]  n.removeChild(leftStringNode);  [CE]  cannot  find  symbol  leftStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(leftStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(leftStringNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  leftStringNode	8	None	replace
56	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
57	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	15	2	add
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
59	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(originalSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
60	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
61	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  }  else  if(foldedSize  >  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[].join( "  	15	2	add
62	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  If(originalSize  >  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  If(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    If(originalSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	15	None	add
63	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }  [CE]  cannot  find  symbol  oldStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(oldStringNode,  0,  foldedSize,  originalSize);  }	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	15	None	add
64	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(sb,  n,  foldedSize,  originalSize);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(sb,  n,  foldedSize,  originalSize);  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(sb,  n,  foldedSize,  originalSize);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
65	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(emptyStringNode,  0,  foldedSize,  originalSize);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(emptyStringNode,  0,  foldedSize,  originalSize);  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    if(originalSize  >  0)  {  reportCodeChange();  System.arraycopy(emptyStringNode,  0,  foldedSize,  originalSize);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	15	None	add
66	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(functionName);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(functionName);	  n.removeChild(arrayStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
67	[BUG]  [BUGGY]  n.removeChild(functionName);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(functionName);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(functionName);	  n.removeChild(arrayStringNode);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	13	3	replace
68	[BUG]  [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()));  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(new  StringBuilder(sb.toString()));  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(new  StringBuilder(sb.toString()));	  n.removeChild(arrayStringNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	13	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  <  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	16	3	replace
70	[BUG]  [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  <  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  <  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	16	3	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
72	[BUG]  [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  ==  0  ||  foldedSize  >  0)  {  reportCodeChange();  }	  if(originalSize    ==    0)    {    reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	7	3	replace
73	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
74	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  ==  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
75	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  ==  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
76	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
77	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]        AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
78	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
79	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  [FE]          AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  if(originalSize  >=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    if(originalSize  >=  0)  {  reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  x=[ "a "  	6	2	add
80	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).size();  if(originalSize  ==  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
81	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  If(originalSize  ==  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  If(originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    If(originalSize  ==  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
82	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]                AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
83	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  cannot  find  symbol  type  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(type);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(type);	  n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
84	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      n.getParent().removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	        n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	add
85	[BUG]  [BUGGY]      n.getParent().removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      n.getParent().removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	        n.getParent().removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	9	3	add
86	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1,  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
87	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size());	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
88	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  +  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
89	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
90	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1-1,  foldedSize);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
91	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev.toString()));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev.toString()));  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev.toString()));	      	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
92	[BUG]  [BUGGY]  int  kJoinOverhead  =  n.getChildCount();  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  int  kJoinOverhead  =  n.getChildCount();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  kJoinOverhead  =  n.getChildCount();	      	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	10	None	replace
93	[BUG]  [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	int  originalSize  =  InlineCostEstimator.getCost(n);	  if(originalSize    ==    0)    {    reportCodeChange();    }    	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	7	None	replace
94	[BUG]  [BUGGY]      StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev));  [CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev));  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	        StringBuilder  sb  =  new  StringBuilder(new  StringBuilder(prev));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
95	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(prev);    NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
96	[BUG]  [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  NodeUtil.removeChild(n,  prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    NodeUtil.removeChild(n,  prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	11	3	add
97	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(nameNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(nameNode);	  	non-compiled	[CE]  cannot  find  symbol  nameNode	11	None	add
98	[BUG]  [BUGGY]  n.removeChild(prev);  Node  prev  =  n.getParent();  [CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  Node  prev  =  n.getParent();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    Node  prev  =  n.getParent();	  	non-compiled	[CE]  variable  prev  is  already  defined  in  method  tryFoldArrayJoin(Node)	11	None	add
99	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	4	None	add
100	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  If(originalSize!=  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  If(originalSize!=  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    If(originalSize!=  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	4	None	add
101	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	add
102	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  if(originalSize!=  0)  {  reportCodeChange();  return  null;  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    if(originalSize!=  0)  {  reportCodeChange();  return  null;  }	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('  	4	3	add
103	[BUG]  [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).size();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).size();	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	4	None	add
104	[BUG]  [BUGGY]  n.removeChild(arrayFoldedParent);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedParent);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedParent);	  if(originalSize!=    0)    {    reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	5	None	replace
105	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);  if(originalSize  >  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
106	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
107	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
108	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n,  kJoinOverhead);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
109	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).replaceChild(n,  emptyStringNode);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
110	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	6	None	add
111	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  Node  originalSize  ==  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  Node  originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    Node  originalSize  ==  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
112	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  {  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  {  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  {  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
113	[BUG]  [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  ==  0)  {  reportCodeChange();  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  ==  0)  {  reportCodeChange();  }  int  originalSize  ==  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    ==    0)    {    reportCodeChange();    }    int  originalSize  ==  0)  {  reportCodeChange();  }	  	non-compiled	[CE]  ';'  expected	6	None	add
114	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	3	3	replace
115	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.get(0));  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.get(0));	  n.removeChild(n);    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Index:  0  	3	3	replace
116	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(arrayFoldedChildren.size()  -  1);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	add
117	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.removeChild(n);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
118	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(prev);  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(prev);	  	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('  	2	3	add
119	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(sb.toString());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(sb.toString());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	add
120	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(arrayFoldedChildren.size());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	add
121	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(arrayFoldedChildren);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	add
122	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(labelNode);  [CE]  cannot  find  symbol  labelNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(labelNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(labelNode);	  	non-compiled	[CE]  cannot  find  symbol  labelNode	2	None	add
123	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  1);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
124	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  foldedStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	1	None	replace
125	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  prev);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  prev);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
126	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  emptyStringNode);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
127	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedStringNode);  [CE]  cannot  find  symbol  foldedStringNode  [FE]            junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  foldedStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  foldedStringNode);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  foldedStringNode	14	None	replace
128	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  first);  [CE]  cannot  find  symbol  first  [FE]              junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  first);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  first);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
129	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  oldStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  oldStringNode);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  cannot  find  symbol  oldStringNode	14	None	replace
130	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren,  originalSize);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren,  originalSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren,  originalSize);	  n.removeChild(arrayFoldedChildren);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	14	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.detachChildren();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	n.detachChildren();	  n.removeChild(n);    	compilable	  [FE]  AssertionFailedError  	3	3	replace
132	[BUG]  [BUGGY]  n.detachChildren();  [FE]  AssertionFailedError  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.detachChildren();  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.detachChildren();	  n.removeChild(n);    	compilable	  [FE]  AssertionFailedError  	3	3	replace
133	[BUG]  [BUGGY]  n.getParent().removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.getParent().removeChild(arrayFoldedNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.getParent().removeChild(arrayFoldedNode);	  n.removeChild(n);    	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	3	None	replace
134	[BUG]  [BUGGY]  n.removeChild(analyzedStringNode);  [CE]  cannot  find  symbol  analyzedStringNode  [FE]                junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(analyzedStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(analyzedStringNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  analyzedStringNode	8	None	replace
135	[BUG]  [BUGGY]  n.removeChild(arrangeFoldedNode);  [CE]  cannot  find  symbol  arrangeFoldedNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrangeFoldedNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrangeFoldedNode);	  n.removeChild(arrayFoldedNode);    	non-compiled	[CE]  cannot  find  symbol  arrangeFoldedNode	8	None	replace
136	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  cannot  find  symbol  left  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(left);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(left);	  n.removeChild(prev);    	non-compiled	[CE]  cannot  find  symbol  left	12	None	replace
137	[BUG]  [BUGGY]  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	add	if(originalSize!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	5	3	replace
138	[BUG]  [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  Node(CALL):  testcode:1:11  x  =  [].join('  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(originalSize!=    0)    {    reportCodeChange();    }    	compilable	  [FE]  java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.    Node(CALL):  testcode:1:11  x  =  [].join('  	5	3	replace
139	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  emptyStringNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  emptyStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  1,  emptyStringNode);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
140	[BUG]  [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  2);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(arrayFoldedChildren.size()  -  1  -  2);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(arrayFoldedChildren.size()  -  1  -  2);	  n.removeChild(arrayFoldedChildren.size()    -    1);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
141	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren.size()  -  1);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size()  -  1);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	add
142	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(sb.toString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(sb.toString());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(sb.toString());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	add
143	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(oldStringNode);  [CE]  cannot  find  symbol  oldStringNode  [FE]        java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(oldStringNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(oldStringNode);	  	non-compiled	[CE]  cannot  find  symbol  oldStringNode	11	None	add
144	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(arrayFoldedChildren);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	add
145	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren.size());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedChildren.size());  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(arrayFoldedChildren.size());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	11	None	add
146	[BUG]  [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]              java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  null  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(prev);  n.removeChild(arrayFoldedNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(prev);    n.removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	11	None	add
147	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedNode);  [CE]  cannot  find  symbol  arrayFoldedNode  [FE]    java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedNode);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(arrayFoldedNode);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedNode	2	None	add
148	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedParent);  [CE]  cannot  find  symbol  arrayFoldedParent  [FE]      java.lang.RuntimeException:  INTERNAL  COMPILER  ERROR.  Please  report  this  problem.  node  is  not  a  child  Node(CALL):  testcode:1:11  x  =  [].join('    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  n.removeChild(n);  n.removeChild(arrayFoldedParent);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	n.removeChild(n);    n.removeChild(arrayFoldedParent);	  	non-compiled	[CE]  cannot  find  symbol  arrayFoldedParent	2	None	add
149	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n).copyInformationFrom(originalSize);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
150	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(originalSize);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
151	[BUG]  [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >  0)  {  reportCodeChange();  }  int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize    >    0)    {    reportCodeChange();    }    int  originalSize  =  InlineCostEstimator.getCost(n.getParent()).copyInformationFrom(prev);	  	non-compiled	[CE]  variable  originalSize  is  already  defined  in  method  tryFoldArrayJoin(Node)	15	None	add
152	[BUG]  [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)  [FE]    AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      int  kJoinOverhead  =  InlineCostEstimator.getCost(n);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	        int  kJoinOverhead  =  InlineCostEstimator.getCost(n);	  	non-compiled	[CE]  variable  kJoinOverhead  is  already  defined  in  method  tryFoldArrayJoin(Node)	9	None	add
153	[BUG]  [BUGGY]      sb.toString().copyInformationFrom(prev);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      sb.toString().copyInformationFrom(prev);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	        sb.toString().copyInformationFrom(prev);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
154	[BUG]  [BUGGY]      n.getParent().removeChild(arrayFoldedChildren);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]      n.getParent().removeChild(arrayFoldedChildren);  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	        n.getParent().removeChild(arrayFoldedChildren);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	9	None	add
155	[BUG]  [BUGGY]  if(originalSize  >>  0)  {  reportCodeChange();  }  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  x=[   "a   "    [CONTEXT]    Node.newString(sb.toString()).copyInformationFrom(prev));  }  foldedSize  +=  arrayFoldedChildren.size()  -  1;  int  originalSize  =  InlineCostEstimator.getCost(n);  switch  (arrayFoldedChildren.size())  {  case  0:  Node  emptyStringNode  =  Node.newString(   "   ");  n.getParent().replaceChild(n,  emptyStringNode);    [BUGGY]  if(originalSize  >>  0)  {  reportCodeChange();  }  [BUGGY]    return  emptyStringNode;  case  1:  Node  foldedStringNode  =  arrayFoldedChildren.remove(0);  if  (foldedSize  >  originalSize)  {  return  n;  }  arrayNode.detachChildren();  if  (foldedStringNode.getType()  !=  Token.STRING)  {    [CLASS]  PeepholeReplaceKnownMethods  [METHOD]  tryFoldArrayJoin  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Locale  ROOT_LOCALE  boolean  StringBuilder  sb  Node  arrayNode  callTarget  elem  emptyStringNode  foldedStringNode  functionName  n  node  prev  replacement  right  List  arrayFoldedChildren  String  joinString  int  foldedSize  kJoinOverhead  originalSize  	projects/Closure50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java	0.8164965809277261	437	437	2	replace	if(originalSize  >>  0)  {  reportCodeChange();  }	  if(originalSize    >    0)    {    reportCodeChange();    }    	non-compiled	[CE]  incompatible  types	16	None	replace
